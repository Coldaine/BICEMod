#~~ Used in decision of activating/not activating a crypto

# checked daily when a country cracks crypto of another country
# game has some hard coded checks to decide if it should enable or not but it will also use these

# scope is target country
# from scope is the ai country that is checking if it should activate its bonuses or not

# you will have access to following temp variables here. these will not be calculated if we are not enemy
# activation_score: hard coded score calculated by ai
# activation_threshold: hard coded activation threshold calculated by ai

# is checked when ai decides not to activate its bonuses. you can override this decision and activate by returning true here
should_activate_active_crypto_bonuses = {
	always = no
}


# called if the ai decides activating bonuses. you can override that decision by returning true here.
should_not_activate_active_crypto_bonuses = {
	always = no
}

#--------------------------------------------------------


#~~ Used for checking if resistance should be enabled in a certain state

# this triggers are called when state controller/owner is changed
# it is also called daily if there is an active resistance and used if we should disable it or not

# should return true if a state should have resistance
# scope = state
# from = occupier
# from from = occupied (always original tag)

# can be specialized for states by using should_initiate_resistance_STATEID1_STATEID2 = { }
# those will override default should_initiate_resistance
should_initiate_resistance = {
	NOT = { is_core_of = FROM  } # never for our cores
	is_demilitarized_zone = no
	impassable = no
}

# trigger checked when gaining a new state, compliance will change by state_compliance_change (even if trigger is false)
# scope = new controller
# from = old controller
# from from = state
should_initiate_compliance_change = {	
	set_temp_variable = { state_compliance_change = 1 }

	FROM.FROM = {
		check_variable = { compliance > 0 }
		#NOT = { is_core_of = ROOT is_owned_by = ROOT }
	}
	ROOT = { 
		NOT = {
			#is_in_faction_with = FROM 
			is_puppet_of = FROM 
			is_subject_of = FROM 
		}
	}
	FROM = { 
		NOT = {
			#is_in_faction_with = FROM 
			is_puppet_of = ROOT 
			is_subject_of = ROOT 
		}
	}
	
	set_temp_variable = { state_compliance_change = 0.9 } #trigger is true
}

