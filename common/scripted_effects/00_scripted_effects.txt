#	Example:
#
#	example_effect = {
#		add_political_power = 66
#		add_popularity = {
#			ideology = fascism
#			popularity = 0.33
#		}
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

######################################################
#   SCRIPTED EFFECTS
######################################################

replace_civ_with_arms_factories = {

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_controlled_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}
}

#Country scope
ROOT_inherit_current_scope_wars_effect = {
	custom_effect_tooltip = ROOT_inherit_current_scope_wars_effect
	hidden_effect = {
		every_country = {
			limit = {
				has_defensive_war_with = PREV
			}
			ROOT = { declare_war_on = { target = PREV type = annex_everything } }
		}
		every_country = {
			limit = {
				has_offensive_war_with = PREV
			}
			declare_war_on = { target = ROOT type = annex_everything }
		}
	}
}

remove_naval_treaty_effect = {
	if = {
		limit = {
			has_idea = MTG_naval_treaty_adherent
		}
		remove_ideas = MTG_naval_treaty_adherent
	}
	else_if = {
		limit = {
			has_idea = MTG_naval_treaty_cheating
		}
		remove_ideas = MTG_naval_treaty_cheating
	}
	else_if = {
		limit = {
			has_idea = MTG_naval_treaty_adherent_reduced
		}
		remove_ideas = MTG_naval_treaty_adherent_reduced
	}
	else_if = {
		limit = {
			has_idea = MTG_naval_treaty_cheating_reduced
		}
		remove_ideas = MTG_naval_treaty_cheating_reduced
	}
	set_country_flag = MTG_naval_treaty_abandoned
	if = {
		limit = {
			NOT = { is_in_array = { global.MTG_naval_treaty_abandoned = THIS } }
		}
		add_to_array = { global.MTG_naval_treaty_abandoned = this.id }
	}
	
	if = { limit = { is_in_array = { global.MTG_naval_treaty = this.id } }
		remove_from_array = { global.MTG_naval_treaty = this.id }
	}
	
	if = {
		limit = {
			check_variable = { global.MTG_naval_treaty^num = 0 }
		}
		clear_array = global.MTG_naval_treaty
		clr_global_flag = MTG_naval_treaty_signatories
	}
}

allied_anger_effect = {
	if = {
		limit = {
			NOT = { has_global_flag = allied_anger_done }
		}
			
		clamp_variable = { var = GER.allied_anger min = 0 max = 15 }
		
		set_temp_variable = { anger_temp = GER.allied_anger }
		subtract_from_temp_variable = { anger_temp = -0.49 } #round down
		clamp_temp_variable = { var = anger_temp min = 0 }
		round_temp_variable = anger_temp
	
		for_each_scope_loop = {
			array = ENG.faction_members
			
			if = {
				limit = {
					check_variable = { anger_temp = 0 }
				}
				remove_ideas_with_trait = allied_anger_trait
			}
			else_if = {
				limit = {
					meta_trigger = {
						text = {
							NOT = { has_idea = allied_anger_[X] }
						}
						X = "[?anger_temp]"
					}
				}
				remove_ideas_with_trait = allied_anger_trait
				
				meta_effect = {
					text = {
						add_ideas = allied_anger_[X]
					}
					X = "[?anger_temp]"
				}
			}
		}
	}
}

add_allied_anger = {
	if = {
		limit = {
			NOT = { has_global_flag = allied_anger_done }
		}
				
		if = {
			limit = {
				check_variable = { extra_anger > 0 }
			}
			set_temp_variable = { total_anger = anger }
			add_to_temp_variable = { total_anger = extra_anger }
			
			custom_effect_tooltip = ALLIED_ANGER_INCREASE_EXTRA_TT
			add_to_variable = { GER.allied_anger = total_anger }
			#log = "ALLIED ANGER | NEW VALUE: [?GER.allied_anger] | [GetMonth] [GetYear]"
			#log = "ALLIED ANGER | ADDED VALUE: [?total_anger] | [GetMonth] [GetYear]"
		}
		else = {
			custom_effect_tooltip = ALLIED_ANGER_INCREASE
			add_to_variable = { GER.allied_anger = anger }
			#log = "ALLIED ANGER | NEW VALUE: [?GER.allied_anger] | [GetMonth] [GetYear]"
			#log = "ALLIED ANGER | ADDED VALUE: [?anger] | [GetMonth] [GetYear]"
		}
	}
}
recent_major_land_acquisition_effect = {
	if = {
		limit = {
			NOT = { has_global_flag = allied_anger_done }
			NOT = { has_country_flag = { flag = recent_major_land_acquisition value = 1 days > 180 } }
		}
				
		set_temp_variable = { extra_anger = 0 }
		if = {
			limit = {
				has_country_flag = recent_major_land_acquisition
			}
			custom_effect_tooltip = recent_major_land_acquisition_TT

			if = {
				limit = {
					check_variable = { #< 50
						var = recent_major_land_acquisition
						value = 50
						compare = less_than_or_equals
					}
				}
				add_to_temp_variable = { extra_anger = 4 }
				custom_effect_tooltip = allied_anger_increase_TT
			}

			else_if = {
				limit = {
					check_variable = { #< 100
						var = recent_major_land_acquisition
						value = 100
						compare = less_than_or_equals
					}
					check_variable = { #> 50
						var = recent_major_land_acquisition
						value = 50
						compare = greater_than_or_equals
					}
				}
				add_to_temp_variable = { extra_anger = 3 }
				custom_effect_tooltip = allied_anger_increase_TT
			}

			else_if = {
				limit = {
					check_variable = { #< 150
						var = recent_major_land_acquisition
						value = 150
						compare = less_than_or_equals
					}
					check_variable = { #> 100
						var = recent_major_land_acquisition
						value = 100
						compare = greater_than_or_equals
					}
				}
				add_to_temp_variable = { extra_anger = 2 }
				custom_effect_tooltip = allied_anger_increase_TT
			}

			else_if = {
				limit = {
					check_variable = { #> 150
						var = recent_major_land_acquisition
						value = 150
						compare = greater_than_or_equals
					}
				}
				add_to_temp_variable = { extra_anger = 1 }
				custom_effect_tooltip = allied_anger_increase_TT
			}
		}
	}
}

save_cosmetic_tags = {
	if = {
		limit = {
			NOT = {
				has_country_flag = saved_cosmetic_tags
			}
		}
		set_country_flag = saved_cosmetic_tags
		if = {
			limit = {
				has_cosmetic_tag = MAL_UK
			}
			set_country_flag = MAL_UK
		}
		if = {
			limit = {
				has_cosmetic_tag = INS_HOL
			}
			set_country_flag = INS_HOL
		}
		if = {
			limit = {
				has_cosmetic_tag = HUN_EMPIRE
			}
			set_country_flag = HUN_EMPIRE
		}
		if = {
			limit = {
				has_cosmetic_tag = AUS_NOT_WHITE
			}
			set_country_flag = AUS_NOT_WHITE
		}
		if = {
			limit = {
				has_cosmetic_tag = ETH_IEA
			}
			set_country_flag = ETH_IEA
		}
		if = {
			limit = {
				has_cosmetic_tag = ETH_ITA
			}
			set_country_flag = ETH_ITA
		}
		if = {
			limit = {
				has_cosmetic_tag = ECU_SOA
			}
			set_country_flag = ECU_SOA
		}
		if = {
			limit = {
				has_cosmetic_tag = ITA_MONARCHY
			}
			set_country_flag = ITA_MONARCHY
		}
		if = {
			limit = {
				has_cosmetic_tag = ITA_REPUBLIC
			}
			set_country_flag = ITA_REPUBLIC
		}
		if = {
			limit = {
				has_cosmetic_tag = ROM_MONARCHY
			}
			set_country_flag = ROM_MONARCHY
		}
		if = {
			limit = {
				has_cosmetic_tag = ROM_REPUBLIC
			}
			set_country_flag = ROM_REPUBLIC
		}
		if = {
			limit = {
				has_cosmetic_tag = MAR_SPR
			}
			set_country_flag = MAR_SPR
		}
		if = {
			limit = {
				has_cosmetic_tag = MAR_FRA
			}
			set_country_flag = MAR_FRA
		}
		if = {
			limit = {
				has_cosmetic_tag = SPC
			}
			set_country_flag = SPC
		}
		if = {
			limit = {
				has_cosmetic_tag = SPRCIV
			}
			set_country_flag = SPRCIV
		}
		if = {
			limit = {
				has_cosmetic_tag = SPA
			}
			set_country_flag = SPA
		}
		if = {
			limit = {
				has_cosmetic_tag = SPA_MONARCHY
			}
			set_country_flag = SPA_MONARCHY
		}
		if = {
			limit = {
				has_cosmetic_tag = SPA_1945
			}
			set_country_flag = SPA_1945
		}
		if = {
			limit = {
				has_cosmetic_tag = CNT
			}
			set_country_flag = CNT
		}
		if = {
			limit = {
				has_cosmetic_tag = CAT_CNT
			}
			set_country_flag = CAT_CNT
		}
		if = {
			limit = {
				has_cosmetic_tag = MED
			}
			set_country_flag = MED
		}
		if = {
			limit = {
				has_cosmetic_tag = WGR_WESTBERLIN
			}
			set_country_flag = WGR_WESTBERLIN
		}
		if = {
			limit = {
				has_cosmetic_tag = DDR_EASTBERLIN
			}
			set_country_flag = DDR_EASTBERLIN
		}
		if = {
			limit = {
				has_cosmetic_tag = BEL2
			}
			set_country_flag = BEL2
		}
		if = {
			limit = {
				has_cosmetic_tag = BEL3
			}
			set_country_flag = BEL3
		}
		if = {
			limit = {
				has_cosmetic_tag = BEL4
			}
			set_country_flag = BEL4
		}
		if = {
			limit = {
				has_cosmetic_tag = BEL4_GER
			}
			set_country_flag = BEL4_GER
		}
		if = {
			limit = {
				has_cosmetic_tag = FRA_FREE
			}
			set_country_flag = FRA_FREE
		}
		if = {
			limit = {
				has_cosmetic_tag = ENG_FREE
			}
			set_country_flag = ENG_FREE
		}
		if = {
			limit = {
				has_cosmetic_tag = CAN_UK
			}
			set_country_flag = CAN_UK
		}
		if = {
			limit = {
				has_cosmetic_tag = CAN_ALY
			}
			set_country_flag = CAN_ALY
		}
		if = {
			limit = {
				has_cosmetic_tag = CAN_ENG
			}
			set_country_flag = CAN_ENG
		}
		if = {
			limit = {
				has_cosmetic_tag = CHI_JAP
			}
			set_country_flag = CHI_JAP
		}
		if = {
			limit = {
				has_cosmetic_tag = SAP_1920
			}
			set_country_flag = SAP_1920
		}
		if = {
			limit = {
				has_cosmetic_tag = BRA_TROTSKY
			}
			set_country_flag = BRA_TROTSKY
		}
		if = {
			limit = {
				has_cosmetic_tag = BMP_UK
			}
			set_country_flag = BMP_UK
		}
		if = {
			limit = {
				has_cosmetic_tag = BMP_ENG
			}
			set_country_flag = BMP_ENG
		}
		if = {
			limit = {
				has_cosmetic_tag = RUS_EMPIRE
			}
			set_country_flag = RUS_EMPIRE
		}
		if = {
			limit = {
				has_cosmetic_tag = CSA
			}
			set_country_flag = CSA
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_13
			}
			set_country_flag = USA_13
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_48
			}
			set_country_flag = USA_48
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_49
			}
			set_country_flag = USA_49
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_50
			}
			set_country_flag = USA_50
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_51
			}
			set_country_flag = USA_51
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_52
			}
			set_country_flag = USA_52
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_53
			}
			set_country_flag = USA_53
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_54
			}
			set_country_flag = USA_54
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_55
			}
			set_country_flag = USA_55
		}
		if = {
			limit = {
				has_cosmetic_tag = USA_56
			}
			set_country_flag = USA_56
		}
		if = {
			limit = {
				has_cosmetic_tag = PARTISANS
			}
			set_country_flag = PARTISANS
		}
	}
}
apply_cosmetic_tags = {
	clr_country_flag = saved_cosmetic_tags
	if = {
		limit = {
			has_country_flag = PARTISANS
		}
		set_cosmetic_tag = PARTISANS
		clr_country_flag = PARTISANS
	}
	if = {
		limit = {
			has_country_flag = USA_56
		}
		set_cosmetic_tag = USA_56
		clr_country_flag = USA_56
	}
	if = {
		limit = {
			has_country_flag = USA_55
		}
		set_cosmetic_tag = USA_55
		clr_country_flag = USA_55
	}
	if = {
		limit = {
			has_country_flag = USA_54
		}
		set_cosmetic_tag = USA_54
		clr_country_flag = USA_54
	}
	if = {
		limit = {
			has_country_flag = USA_53
		}
		set_cosmetic_tag = USA_53
		clr_country_flag = USA_53
	}
	if = {
		limit = {
			has_country_flag = USA_52
		}
		set_cosmetic_tag = USA_52
		clr_country_flag = USA_52
	}
	if = {
		limit = {
			has_country_flag = USA_51
		}
		set_cosmetic_tag = USA_51
		clr_country_flag = USA_51
	}
	if = {
		limit = {
			has_country_flag = USA_50
		}
		set_cosmetic_tag = USA_50
		clr_country_flag = USA_50
	}
	if = {
		limit = {
			has_country_flag = USA_49
		}
		set_cosmetic_tag = USA_49
		clr_country_flag = USA_49
	}
	if = {
		limit = {
			has_country_flag = USA_48
		}
		set_cosmetic_tag = USA_48
		clr_country_flag = USA_48
	}
	if = {
		limit = {
			has_country_flag = USA_13
		}
		set_cosmetic_tag = USA_13
		clr_country_flag = USA_13
	}
	if = {
		limit = {
			has_country_flag = CSA
		}
		set_cosmetic_tag = CSA
		clr_country_flag = CSA
	}
	if = {
		limit = {
			has_country_flag = RUS_EMPIRE
		}
		set_cosmetic_tag = RUS_EMPIRE
		clr_country_flag = RUS_EMPIRE
	}
	if = {
		limit = {
			has_country_flag = BMP_ENG
		}
		set_cosmetic_tag = BMP_ENG
		clr_country_flag = BMP_ENG
	}
	if = {
		limit = {
			has_country_flag = BMP_UK
		}
		set_cosmetic_tag = BMP_UK
		clr_country_flag = BMP_UK
	}
	if = {
		limit = {
			has_country_flag = VIN_TROTSKY
		}
		set_cosmetic_tag = VIN_TROTSKY
		clr_country_flag = VIN_TROTSKY
	}
	if = {
		limit = {
			has_country_flag = BRA_TROTSKY
		}
		set_cosmetic_tag = BRA_TROTSKY
		clr_country_flag = BRA_TROTSKY
	}
	if = {
		limit = {
			has_country_flag = SAP_1920
		}
		set_cosmetic_tag = SAP_1920
		clr_country_flag = SAP_1920
	}
	if = {
		limit = {
			has_country_flag = CHI_JAP
		}
		set_cosmetic_tag = CHI_JAP
		clr_country_flag = CHI_JAP
	}
	if = {
		limit = {
			has_country_flag = CAN_ENG
		}
		set_cosmetic_tag = CAN_ENG
		clr_country_flag = CAN_ENG
	}
	if = {
		limit = {
			has_country_flag = CAN_ALY
		}
		set_cosmetic_tag = CAN_ALY
		clr_country_flag = CAN_ALY
	}
	if = {
		limit = {
			has_country_flag = CAN_UK
		}
		set_cosmetic_tag = CAN_UK
		clr_country_flag = CAN_UK
	}
	if = {
		limit = {
			has_country_flag = ENG_FREE
		}
		set_cosmetic_tag = ENG_FREE
		clr_country_flag = ENG_FREE
	}
	if = {
		limit = {
			has_country_flag = FRA_FREE
		}
		set_cosmetic_tag = FRA_FREE
		clr_country_flag = FRA_FREE
	}
	if = {
		limit = {
			has_country_flag = BEL4_GER
		}
		set_cosmetic_tag = BEL4_GER
		clr_country_flag = BEL4_GER
	}
	if = {
		limit = {
			has_country_flag = BEL4
		}
		set_cosmetic_tag = BEL4
		clr_country_flag = BEL4
	}
	if = {
		limit = {
			has_country_flag = BEL3
		}
		set_cosmetic_tag = BEL3
		clr_country_flag = BEL3
	}
	if = {
		limit = {
			has_country_flag = BEL2
		}
		set_cosmetic_tag = BEL2
		clr_country_flag = BEL2
	}
	if = {
		limit = {
			has_country_flag = DDR_EASTBERLIN
		}
		set_cosmetic_tag = DDR_EASTBERLIN
		clr_country_flag = DDR_EASTBERLIN
	}
	if = {
		limit = {
			has_country_flag = WGR_WESTBERLIN
		}
		set_cosmetic_tag = WGR_WESTBERLIN
		clr_country_flag = WGR_WESTBERLIN
	}
	if = {
		limit = {
			has_country_flag = MED
		}
		set_cosmetic_tag = MED
		clr_country_flag = MED
	}
	if = {
		limit = {
			has_country_flag = CAT_CNT
		}
		set_cosmetic_tag = CAT_CNT
		clr_country_flag = CAT_CNT
	}
	if = {
		limit = {
			has_country_flag = CNT
		}
		set_cosmetic_tag = CNT
		clr_country_flag = CNT
	}
	if = {
		limit = {
			has_country_flag = SPA_1945
		}
		set_cosmetic_tag = SPA_1945
		clr_country_flag = SPA_1945
	}
	if = {
		limit = {
			has_country_flag = SPA_MONARCHY
		}
		set_cosmetic_tag = SPA_MONARCHY
		clr_country_flag = SPA_MONARCHY
	}
	if = {
		limit = {
			has_country_flag = SPA
		}
		set_cosmetic_tag = SPA
		clr_country_flag = SPA
	}
	if = {
		limit = {
			has_country_flag = SPRCIV
		}
		set_cosmetic_tag = SPRCIV
		clr_country_flag = SPRCIV
	}
	if = {
		limit = {
			has_country_flag = SPC
		}
		set_cosmetic_tag = SPC
		clr_country_flag = SPC
	}
	if = {
		limit = {
			has_country_flag = MAR_FRA
		}
		set_cosmetic_tag = MAR_FRA
		clr_country_flag = MAR_FRA
	}
	if = {
		limit = {
			has_country_flag = MAR_SPR
		}
		set_cosmetic_tag = MAR_SPR
		clr_country_flag = MAR_SPR
	}
	if = {
		limit = {
			has_country_flag = ROM_REPUBLIC
		}
		set_cosmetic_tag = ROM_REPUBLIC
		clr_country_flag = ROM_REPUBLIC
	}
	if = {
		limit = {
			has_country_flag = ROM_MONARCHY
		}
		set_cosmetic_tag = ROM_MONARCHY
		clr_country_flag = ROM_MONARCHY
	}
	if = {
		limit = {
			has_country_flag = ITA_REPUBLIC
		}
		set_cosmetic_tag = ITA_REPUBLIC
		clr_country_flag = ITA_REPUBLIC
	}
	if = {
		limit = {
			has_country_flag = ITA_MONARCHY
		}
		set_cosmetic_tag = ITA_MONARCHY
		clr_country_flag = ITA_MONARCHY
	}
	if = {
		limit = {
			has_country_flag = ECU_SOA
		}
		set_cosmetic_tag = ECU_SOA
		clr_country_flag = ECU_SOA
	}
	if = {
		limit = {
			has_country_flag = ETH_ITA
		}
		set_cosmetic_tag = ETH_ITA
		clr_country_flag = ETH_ITA
	}
	if = {
		limit = {
			has_country_flag = ETH_IEA
		}
		set_cosmetic_tag = ETH_IEA
		clr_country_flag = ETH_IEA
	}
	if = {
		limit = {
			has_country_flag = AUS_NOT_WHITE
		}
		set_cosmetic_tag = AUS_NOT_WHITE
		clr_country_flag = AUS_NOT_WHITE
	}
	if = {
		limit = {
			has_country_flag = HUN_EMPIRE
		}
		set_cosmetic_tag = HUN_EMPIRE
		clr_country_flag = HUN_EMPIRE
	}
	if = {
		limit = {
			has_country_flag = INS_HOL
		}
		set_cosmetic_tag = INS_HOL
		clr_country_flag = INS_HOL
	}
	if = {
		limit = {
			has_country_flag = MAL_UK
		}
		set_cosmetic_tag = MAL_UK
		clr_country_flag = MAL_UK
	}
}

recalculate_tag_change = {

}

level_up_state_category = {
	if = {
		limit = {
			has_state_category = wasteland
		}
		set_state_category = rural
	}
	else_if = {
		limit = {
			has_state_category = rural
		}
		set_state_category = pastoral
	}
	else_if = {
		limit = {
			has_state_category = pastoral
		}
		set_state_category = small_town
	}
	else_if = {
		limit = {
			has_state_category = small_town
		}
		set_state_category = town
	}
	else_if = {
		limit = {
			has_state_category = town
		}
		set_state_category = large_town
	}
	else_if = {
		limit = {
			has_state_category = large_town
		}
		set_state_category = small_city
	}
	else_if = {
		limit = {
			has_state_category = small_city
		}
		set_state_category = city
	}
	else_if = {
		limit = {
			has_state_category = city
		}
		set_state_category = large_city
	}
	else_if = {
		limit = {
			has_state_category = large_city
		}
		set_state_category = small_megalopolis
	}
	else_if = {
		limit = {
			has_state_category = small_megalopolis
		}
		set_state_category = megalopolis
	}
}
level_down_state_category = {
	if = {
		limit = {
			has_state_category = megalopolis
		}
		set_state_category = small_megalopolis
	}
	else_if = {
		limit = {
			has_state_category = small_megalopolis
		}
		set_state_category = large_city
	}
	else_if = {
		limit = {
			has_state_category = large_city
		}
		set_state_category = city
	}
	else_if = {
		limit = {
			has_state_category = city
		}
		set_state_category = small_city
	}
	else_if = {
		limit = {
			has_state_category = small_city
		}
		set_state_category = large_town
	}
	else_if = {
		limit = {
			has_state_category = large_town
		}
		set_state_category = town
	}
	else_if = {
		limit = {
			has_state_category = town
		}
		set_state_category = small_town
	}
	else_if = {
		limit = {
			has_state_category = small_town
		}
		set_state_category = pastoral
	}
	else_if = {
		limit = {
			has_state_category = pastoral
		}
		set_state_category = rural
	}
	else_if = {
		limit = {
			has_state_category = rural
		}
		set_state_category = wasteland
	}
}
research_WW1 = {
	set_technology = {infantry_charge = 1}
	set_technology = {small_unit_raids = 1}
	set_technology = {night_patrols = 1}
	set_technology = {dispersed_infantry_attacks = 1}
	set_technology = {infiltration_attacks = 1}
	set_technology = {stormtroopers = 1}
	set_technology = {complex_trench_systems = 1}
	set_technology = {offensive_trenches = 1}
	set_technology = {defensive_trenches = 1}
	set_technology = {reserve_trenches = 1}
	set_technology = {communication_trenches = 1}
	set_technology = {logistics_trenches = 1}
	set_technology = {barbed_wire = 1}
	set_technology = {pillboxes = 1}
	set_technology = {sniper_pits = 1}
	set_technology = {nomans_land_saps = 1}
	set_technology = {tunnel_mines = 1}
	set_technology = {fortress_trenches = 1}
	set_technology = {basic_MG_defences = 1}
	set_technology = {multiple_MG_nests = 1}
	set_technology = {enfilade_MG_fire_fields = 1}
	set_technology = {infantry_MG_coordination = 1}
	set_technology = {MG_support_infantry_doctrine = 1}
	set_technology = {ww1_artillery = 1}
	set_technology = {artillery_concentration = 1}
	set_technology = {offensive_prep_fire = 1}
	set_technology = {continuous_fire = 1}
	set_technology = {harassment_fire = 1}
	set_technology = {rear_area_bombardment = 1}
	set_technology = {dummy_barrage = 1}
	set_technology = {standing_barrage = 1}
	set_technology = {box_barrage = 1}
	set_technology = {block_barrage = 1}
	set_technology = {creeping_barrage = 1}
	set_technology = {rolling_barrage = 1}
	set_technology = {artillery_observers = 1}
	set_technology = {balloon_observers = 1}
	set_technology = {aircraft_observers = 1}
	set_technology = {foot_runners = 1}
	set_technology = {carrier_pidgeons = 1}
	set_technology = {telephone_communications = 1}
	set_technology = {mobile_doctrines = 1}
	set_technology = {cavalry_charges = 1}
	set_technology = {cavalry_dismounting = 1}
	set_technology = {cavalry_exploitation = 1}
	set_technology = {armor_support = 1}
	set_technology = {infantry_tank_coordination = 1}
	set_technology = {infantry_tank_artillery_coordination = 1}
	set_technology = {anti_tank_traps = 1}
	set_technology = {infantry_AT_defences = 1}
	set_technology = {armored_car_recon = 1}
	set_technology = {motorcycle_liaison = 1}
	set_technology = {staff_officer_vehicles = 1}
	set_technology = {ww1_battlefield_support = 1}
	set_technology = {battlefield_commissions = 1}
	set_technology = {weather_reporting = 1}
	set_technology = {terrain_mapping = 1}
	set_technology = {camouflage_positions = 1}
	set_technology = {AA_positions = 1}
	set_technology = {first_aid_stations = 1}
}

revert_WW1 = {
	set_technology = {ww1_infantry = 0}
	set_technology = {infantry_charge = 0}
	set_technology = {small_unit_raids = 0}
	set_technology = {night_patrols = 0}
	set_technology = {dispersed_infantry_attacks = 0}
	set_technology = {infiltration_attacks = 0}
	set_technology = {stormtroopers = 0}
	set_technology = {complex_trench_systems = 0}
	set_technology = {offensive_trenches = 0}
	set_technology = {defensive_trenches = 0}
	set_technology = {reserve_trenches = 0}
	set_technology = {communication_trenches = 0}
	set_technology = {logistics_trenches = 0}
	set_technology = {barbed_wire = 0}
	set_technology = {pillboxes = 0}
	set_technology = {sniper_pits = 0}
	set_technology = {nomans_land_saps = 0}
	set_technology = {tunnel_mines = 0}
	set_technology = {fortress_trenches = 0}
	set_technology = {basic_MG_defences = 0}
	set_technology = {multiple_MG_nests = 0}
	set_technology = {enfilade_MG_fire_fields = 0}
	set_technology = {infantry_MG_coordination = 0}
	set_technology = {MG_support_infantry_doctrine = 0}
	set_technology = {ww1_artillery = 0}
	set_technology = {artillery_concentration = 0}
	set_technology = {offensive_prep_fire = 0}
	set_technology = {continuous_fire = 0}
	set_technology = {harassment_fire = 0}
	set_technology = {rear_area_bombardment = 0}
	set_technology = {dummy_barrage = 0}
	set_technology = {standing_barrage = 0}
	set_technology = {box_barrage = 0}
	set_technology = {block_barrage = 0}
	set_technology = {creeping_barrage = 0}
	set_technology = {rolling_barrage = 0}
	set_technology = {artillery_observers = 0}
	set_technology = {balloon_observers = 0}
	set_technology = {aircraft_observers = 0}
	set_technology = {foot_runners = 0}
	set_technology = {carrier_pidgeons = 0}
	set_technology = {telephone_communications = 0}
	set_technology = {mobile_doctrines = 0}
	set_technology = {cavalry_charges = 0}
	set_technology = {cavalry_dismounting = 0}
	set_technology = {cavalry_exploitation = 0}
	set_technology = {armor_support = 0}
	set_technology = {infantry_tank_coordination = 0}
	set_technology = {infantry_tank_artillery_coordination = 0}
	set_technology = {anti_tank_traps = 0}
	set_technology = {infantry_AT_defences = 0}
	set_technology = {armored_car_recon = 0}
	set_technology = {motorcycle_liaison = 0}
	set_technology = {staff_officer_vehicles = 0}
	set_technology = {ww1_battlefield_support = 0}
	set_technology = {battlefield_commissions = 0}
	set_technology = {weather_reporting = 0}
	set_technology = {terrain_mapping = 0}
	set_technology = {camouflage_positions = 0}
	set_technology = {AA_positions = 0}
	set_technology = {first_aid_stations = 0}
	set_technology = {Infantry_support_MG_doctrine = 0}
}

JAP_pearl_score = {
	add_to_variable = { pearl_score = -5 }
	if = {
		limit = {
			has_idea = JAP_interservice_rivalry_navy_dominant
		}
		add_to_variable = { pearl_score = 2 }
	}
	if = {
		limit = {
			has_idea = JAP_interservice_rivalry_navy_strengthened
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			has_idea = JAP_interservice_rivalry_army_strengthened
		}
		add_to_variable = { pearl_score = -1 }
	}
	if = {
		limit = {
			has_idea = JAP_interservice_rivalry_army_dominant
		}
		add_to_variable = { pearl_score = -2 }
	}
	if = {
		limit = {
			not = { has_completed_focus = advanced_torpedoes_focus }
		}
		add_to_variable = { pearl_score = -1 }
	}
	if = {
		limit = {
			NOT = { has_completed_focus = JAP_carrier_warfare_experiments }
		}
		add_to_variable = { pearl_score = -2 }
	}
	if = {
		limit = {
			NOT = { has_completed_focus = JAP_first_air_fleet }
		}
		add_to_variable = { pearl_score = -1 }
	}
	if = {
		limit = {
			has_completed_focus = naval_air_innovations_focus
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			has_tech = nrm_db_combined_carrier
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			has_tech = nrm_carrier_operations
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			has_tech = nrm_carrier_taskforce
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			has_tech = nrm_carrier_strike
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			date < 1942.01.01
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			date < 1941.09.01
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			USA = {
				or = {
					has_completed_focus = USA_CAS
					has_completed_focus = USA_fighter_effort
				}
			}
		}
		add_to_variable = { pearl_score = -1 }
	}
	if = {
		limit = {
			USA = {
				not = { has_completed_focus = USA_war_plans_division }
			}
		}
		add_to_variable = { pearl_score = 1 }
	}
	if = {
		limit = {
			USA = {
				not = {
					OR = {
						has_tech = advanced_encryption
						has_tech = advanced_encryption_lar
					}
				}
			}
			OR = {
				has_tech = advanced_decryption_lar
				has_tech = advanced_decryption
				if = {
					limit = {
						USA = {
							not = {
								OR = {
									has_tech = improved_encryption
									has_tech = improved_encryption_lar
								}
							}
						}
						OR = {
							has_tech = improved_decryption
							has_tech = improved_decryption_lar
						}
					}
				}
				else_if = {
					limit = {
						OR = {
							has_tech = basic_decryption
							has_tech = basic_decryption_lar
						}
						USA = {
							not = {
								OR = {
									has_tech = basic_encryption
									has_tech = basic_encryption_lar
								}
							}
						}
					}
				}
			}
		}
		add_to_variable = { pearl_score = 1 }
	}
}

increase_fuel_storage = {
	if = {
		limit = {
			has_tech = fuel_silos5
		}
	}
	else_if = {
		limit = {
			has_tech = fuel_silos4
		}
		set_technology = {
			fuel_silos5 = 1
		}
	}
	else_if = {
		limit = {
			has_tech = fuel_silos3
		}
		set_technology = {
			fuel_silos4 = 1
		}
	}
	else_if = {
		limit = {
			has_tech = fuel_silos2
		}
		set_technology = {
			fuel_silos3 = 1
		}
	}
	else_if = {
		limit = {
			has_tech = fuel_silos
		}
		set_technology = {
			fuel_silos2 = 1
		}
	}
	else = {
		set_technology = {
			fuel_silos = 1
		}
	}
}



@OVER_CAP_PERCENTAGE_TO_DEBUFF_FACTOR = 2 #with 0.8 max debuff, it means at 140% overcap we have max debuff of -80% attack / defence / para
@OVER_CAP_PERCENTAGE_TO_PARA_EFFICIENCY = 1.6

@OVER_CAP_MAX_DEBUFF = 0.8 
@OVER_CAP_MAX_PARA = 0.8

@SF_MOUNTAINEER_WEIGHT = 2
@SF_GURKHA_WEIGHT = 2
@SF_MARINE_WEIGHT = 2 
@SF_AMPH_MECH_WEIGHT = 2
@SF_PARATROOPER_WEIGHT = 3
@SF_PARA_TANK_WEIGHT = 3

@SF_COMMANDO_WEIGHT = 5
@SF_DIV_HQ_AIRBORNE_WEIGHT = 1
@SF_MOUNT_SUPPORT_WEIGHT = 1
@SF_AMPH_SUPPORT_WEIGHT = 1
@SF_PARA_SUPPORT_WEIGHT = 1

### special_forces_cap
set_special_forces_cap = {
	count_special_battalions = yes
	
	set_temp_variable = { t1 = modifier@special_forces_cap }
	
	if = {
		limit = {
			has_idea = sof_disabled 
		}
		add_to_temp_variable = { t1 = 10 }
	}
	else = {
		add_to_temp_variable = { t1 = -10 }
	}

	set_temp_variable = { special_forces_cap = army_strength }
	multiply_temp_variable = { special_forces_cap = t1 }
	clamp_temp_variable = { var = special_forces_cap min = modifier@special_forces_min }
	round_temp_variable = special_forces_cap

	clear_variable = num_specialised_over_limit
	clear_variable = special_forces_para_debuff
	if = {
		limit = {
			is_player = yes
			check_variable = { num_specialised > special_forces_cap }
		}
		
		if = {
			limit = {
				NOT = {
					has_dynamic_modifier = {
						modifier = special_forces_cap
					}
				}
			}
			add_to_array = { alerts = token:alert_special_forces_limit }
			add_ideas = sof_disabled
			add_dynamic_modifier = {
				modifier = special_forces_cap
			}
		}
		
		#STATS
		set_variable = { num_specialised_over_limit = num_specialised }
		divide_variable = { num_specialised_over_limit = special_forces_cap }
		subtract_from_variable = { num_specialised_over_limit = 1 }
		
		#PARADROP EFFICIENCY
		set_temp_variable = { special_forces_para_debuff_temp = num_specialised_over_limit }
		
		#FACTOR 
		multiply_variable = { num_specialised_over_limit = @OVER_CAP_PERCENTAGE_TO_DEBUFF_FACTOR }
		multiply_temp_variable = { special_forces_para_debuff_temp = @OVER_CAP_PERCENTAGE_TO_PARA_EFFICIENCY }

		#MAX
		set_temp_variable = { max_debuff = @OVER_CAP_MAX_DEBUFF }
		set_temp_variable = { max_para = @OVER_CAP_MAX_PARA }
		
		clamp_variable = { var = num_specialised_over_limit max = max_debuff }
		clamp_temp_variable = { var = special_forces_para_debuff_temp max = max_para }
		
		multiply_variable = { num_specialised_over_limit = -1 }
		multiply_temp_variable = { special_forces_para_debuff_temp = -1 }
		
		if = {
			limit = { #only update para debuff values if the temp value does not match with current value
				NOT = { check_variable = { special_forces_para_debuff = special_forces_para_debuff_temp } }
			}
			every_army_leader = {
				limit = { is_assigned = yes }
				
				set_variable = { special_forces_para_debuff = special_forces_para_debuff_temp }
					
				if = {
					limit = {
						NOT = {
							has_dynamic_modifier = {
								modifier = special_forces_leader
							}
						}
					}
					
					add_dynamic_modifier = {
						modifier = special_forces_leader
					}
				}
			}
			
			set_variable = { special_forces_para_debuff = special_forces_para_debuff_temp }
		}
		
	}
	else_if = {
		limit = {
			is_player = yes
			has_dynamic_modifier = {
				modifier = special_forces_cap
			}
		}
		remove_dynamic_modifier = {
			modifier = special_forces_cap
		}
		remove_ideas = sof_disabled
		every_army_leader = {
			limit = {
				has_dynamic_modifier = {
					modifier = special_forces_leader
				}
			}
			clear_variable = special_forces_para_debuff
			remove_dynamic_modifier = {
				modifier = special_forces_leader
			}
		}
		remove_from_array = { alerts = token:alert_special_forces_limit }
	}
	
	if = {
		limit = {
			is_player = yes 
		}
		
		set_temp_variable = { ui_update = special_forces_cap }
		add_to_temp_variable = { ui_update = num_specialised }
		add_to_temp_variable = { ui_update = num_specialised_over_limit }
		add_to_temp_variable = { ui_update = modifier@special_forces_attack_factor }
		add_to_temp_variable = { ui_update = modifier@special_forces_defence_factor }
		
		set_variable = { ui_sof_update = ui_update } #updates gui when displayed info changed
	}
}

count_special_battalions = {
	clear_variable = num_specialised

#MOUNTAINEER
	if = {
		limit = {
			OR = {
				check_variable = { num_battalions_with_type@mountaineers > 0 }
				check_variable = { num_battalions_with_type@ss_mountaineers > 0 }
			}
		}
			
		set_temp_variable = { temp = num_battalions_with_type@mountaineers }
		add_to_temp_variable = { temp = num_battalions_with_type@ss_mountaineers }

		set_temp_variable = { weight = Root.modifier@mountaineer_special_forces_weight }
		add_to_temp_variable = { weight = @SF_MOUNTAINEER_WEIGHT }
		set_temp_variable = { mod = Root.modifier@mountaineer_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#GURKHA
	if = {
		limit = {
			check_variable = { num_battalions_with_type@gurkha > 0 }
		}
				
		set_temp_variable = { temp = num_battalions_with_type@gurkha }

		set_temp_variable = { weight = Root.modifier@mountaineer_special_forces_weight }
		add_to_temp_variable = { weight = @SF_GURKHA_WEIGHT }
		set_temp_variable = { mod = Root.modifier@mountaineer_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#MARINES
	if = {
		limit = {
			OR = {
				check_variable = { num_battalions_with_type@marine > 0 }
				check_variable = { num_battalions_with_type@marine_assault > 0 }
			}
		}
				
		set_temp_variable = { temp = num_battalions_with_type@marine }
		add_to_temp_variable = { temp = num_battalions_with_type@marine_assault }

		set_temp_variable = { weight = Root.modifier@marine_special_forces_weight }
		add_to_temp_variable = { weight = @SF_MARINE_WEIGHT }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#AMPH MECH
	if = {
		limit = {
			OR = {
				check_variable = { num_battalions_with_type@amphibious_mechanized > 0 }
				check_variable = { num_battalions_with_type@amphibious_mechanized_assault > 0 }
			}
		}
			
		set_temp_variable = { temp = num_battalions_with_type@amphibious_mechanized }
		add_to_temp_variable = { temp = num_battalions_with_type@amphibious_mechanized_assault }

		set_temp_variable = { weight = Root.modifier@marine_special_forces_weight }
		add_to_temp_variable = { weight = @SF_AMPH_MECH_WEIGHT }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#US AMPH MECH
	if = {
		limit = {
			OR = {
				check_variable = { num_battalions_with_type@american_amph_lv > 0 }
				check_variable = { num_battalions_with_type@american_amph_lv_assault > 0 }
			}
		}
				
		set_temp_variable = { temp = num_battalions_with_type@american_amph_lv }
		add_to_temp_variable = { temp = num_battalions_with_type@american_amph_lv_assault }

		set_temp_variable = { weight = Root.modifier@marine_special_forces_weight }
		add_to_temp_variable = { weight = @SF_AMPH_MECH_WEIGHT }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#PARATROOPER
	if = {
		limit = {
			check_variable = { num_battalions_with_type@paratrooper > 0 }
		}
					
		set_temp_variable = { temp = num_battalions_with_type@paratrooper }

		set_temp_variable = { weight = Root.modifier@paratrooper_special_forces_weight }
		add_to_temp_variable = { weight = @SF_PARATROOPER_WEIGHT }
		set_temp_variable = { mod = Root.modifier@paratrooper_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#PARATROOPER TANK
	if = {
		limit = {
			check_variable = { num_battalions_with_type@trm_para_airborne_armor > 0 }
		}
					
		set_temp_variable = { temp = num_battalions_with_type@trm_para_airborne_armor }

		set_temp_variable = { weight = Root.modifier@paratrooper_special_forces_weight }
		add_to_temp_variable = { weight = @SF_PARA_TANK_WEIGHT }
		set_temp_variable = { mod = Root.modifier@paratrooper_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#COMMANDO
	if = {
		limit = {
			check_variable = { num_battalions_with_type@commando > 0 }
		}
						
		set_temp_variable = { temp = num_battalions_with_type@commando }

		set_temp_variable = { weight = Root.modifier@commando_special_forces_weight }
		add_to_temp_variable = { weight = @SF_COMMANDO_WEIGHT }
		set_temp_variable = { mod = Root.modifier@commando_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		subtract_from_temp_variable = { temp = Root.modifier@commando_special_forces_free }
		clamp_temp_variable = {
			var = temp
			min = 0
		}
		add_to_variable = { num_specialised = temp }
	}

#PARA DIV HQ 
	if = {
		limit = {
			check_variable = { num_battalions_with_type@DIV_HQ_airborne > 0 }
		}
				
		set_temp_variable = { temp = num_battalions_with_type@DIV_HQ_airborne }

		set_temp_variable = { weight = Root.modifier@DIV_HQ_airborne_special_forces_weight }
		add_to_temp_variable = { weight = @SF_DIV_HQ_AIRBORNE_WEIGHT }
		set_temp_variable = { mod = Root.modifier@DIV_HQ_airborne_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}
	
#PARA SUPPORT
	if = {
		limit = {
			check_variable = { num_battalions_with_type@para_support > 0 }
		}
				
		set_temp_variable = { temp = num_battalions_with_type@para_support }

		set_temp_variable = { weight = Root.modifier@para_support_special_forces_weight }
		add_to_temp_variable = { weight = @SF_PARA_SUPPORT_WEIGHT }
		set_temp_variable = { mod = Root.modifier@para_support_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#MOUNT SUPPORT
	if = {
		limit = {
			check_variable = { num_battalions_with_type@mount_support > 0 }
		}
					
		set_temp_variable = { temp = num_battalions_with_type@mount_support }

		set_temp_variable = { weight = Root.modifier@mount_support_special_forces_weight }
		add_to_temp_variable = { weight = @SF_MOUNT_SUPPORT_WEIGHT }
		set_temp_variable = { mod = Root.modifier@mount_support_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

#AMPH SUPPORT
	if = {
		limit = {
			check_variable = { num_battalions_with_type@amph_support > 0 }
		}
					
		set_temp_variable = { temp = num_battalions_with_type@amph_support }

		set_temp_variable = { weight = Root.modifier@amph_support_special_forces_weight }
		add_to_temp_variable = { weight = @SF_AMPH_SUPPORT_WEIGHT }
		set_temp_variable = { mod = Root.modifier@amph_support_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }

		multiply_temp_variable = { temp = weight }
		add_to_variable = { num_specialised = temp }
	}

	if = {
		limit = {
			check_variable = { num_specialised = 0 }
		}
		clear_variable = num_specialised
	}
}

alert_special_forces_limit = {
	set_temp_variable = { special_forces_ratio = modifier@special_forces_cap }
	
	if = {
		limit = {
			has_idea = sof_disabled 
		}
		add_to_temp_variable = { special_forces_ratio = 10 }
	}
	else = {
		add_to_temp_variable = { special_forces_ratio = -10 }
	}

	set_temp_variable = { special_forces_cap = army_strength }
	multiply_temp_variable = { special_forces_cap = special_forces_ratio }
	clamp_temp_variable = { var = special_forces_cap min = modifier@special_forces_min }
	round_temp_variable = special_forces_cap

	custom_effect_tooltip = SPECIAL_FORCES_TT_TEXT_ONLY
	ui_list_special_battalions = yes
}

ui_list_special_battalions = {
	if = {
		limit = {
			check_variable = { num_battalions_with_type@mountaineers > 0 }
		}
		set_temp_variable = { weight = @SF_MOUNTAINEER_WEIGHT }
		add_to_temp_variable = { weight = modifier@mountaineer_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@mountaineer_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_MOUNTAINEER
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@ss_mountaineers > 0 }
		}
		set_temp_variable = { weight = @SF_MOUNTAINEER_WEIGHT }
		add_to_temp_variable = { weight = modifier@mountaineer_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@mountaineer_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_SS_MOUNTAINEER
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@gurkha > 0 }
		}
		set_temp_variable = { weight = @SF_GURKHA_WEIGHT }
		add_to_temp_variable = { weight = modifier@mountaineer_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@mountaineer_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_GURKHA
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@mount_support > 0 }
		}
		set_temp_variable = { weight = @SF_MOUNT_SUPPORT_WEIGHT }
		add_to_temp_variable = { weight = modifier@mount_support_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@mount_support_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_MOUNT_SUPPORT
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@marine > 0 }
		}
		set_temp_variable = { weight = @SF_MARINE_WEIGHT }
		add_to_temp_variable = { weight = modifier@marine_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_MARINES
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@marine_assault > 0 }
		}
		set_temp_variable = { weight = @SF_MARINE_WEIGHT }
		add_to_temp_variable = { weight = modifier@marine_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_MARINES_ASSAULT
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@amphibious_mechanized > 0 }
		}
		set_temp_variable = { weight = @SF_AMPH_MECH_WEIGHT }
		add_to_temp_variable = { weight = modifier@marine_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_AMPH_MECH
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@amphibious_mechanized_assault > 0 }
		}
		set_temp_variable = { weight = @SF_AMPH_MECH_WEIGHT }
		add_to_temp_variable = { weight = modifier@marine_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_AMPH_MECH_ASSAULT
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@american_amph_lv > 0 }
		}
		set_temp_variable = { weight = @SF_AMPH_MECH_WEIGHT }
		add_to_temp_variable = { weight = modifier@marine_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_AMPH_MECH_US
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@american_amph_lv_assault > 0 }
		}
		set_temp_variable = { weight = @SF_AMPH_MECH_WEIGHT }
		add_to_temp_variable = { weight = modifier@marine_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@marine_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_AMPH_MECH_ASSAULT_US
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@amph_support > 0 }
		}
		set_temp_variable = { weight = @SF_AMPH_SUPPORT_WEIGHT }
		add_to_temp_variable = { weight = modifier@amph_support_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@amph_support_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_AMPH_SUPPORT
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@paratrooper > 0 }
		}
		set_temp_variable = { weight = @SF_PARATROOPER_WEIGHT }
		add_to_temp_variable = { weight = modifier@paratrooper_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@paratrooper_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_PARATROOPER
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@trm_para_airborne_armor > 0 }
		}
		set_temp_variable = { weight = @SF_PARA_TANK_WEIGHT }
		add_to_temp_variable = { weight = modifier@paratrooper_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@paratrooper_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_PARA_TANK
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@DIV_HQ_airborne > 0 }
		}
		set_temp_variable = { weight = @SF_DIV_HQ_AIRBORNE_WEIGHT }
		add_to_temp_variable = { weight = modifier@DIV_HQ_airborne_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@DIV_HQ_airborne_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_DIV_HQ_airborne
	}
	if = {
		limit = {
			check_variable = { num_battalions_with_type@para_support > 0 }
		}
		set_temp_variable = { weight = @SF_PARA_SUPPORT_WEIGHT }
		add_to_temp_variable = { weight = modifier@para_support_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@para_support_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_PARA_SUPPORT
	}
	if = {
		limit = { 
			check_variable = { num_battalions_with_type@commando > 0 }
		}
		set_temp_variable = { weight = @SF_PARA_SUPPORT_WEIGHT }
		add_to_temp_variable = { weight = modifier@commando_special_forces_weight }
		set_temp_variable = { mod = Root.modifier@commando_special_forces_weight_factor }
		add_to_temp_variable = { mod = 1 }
		multiply_temp_variable = { weight = mod }
		
		custom_effect_tooltip = SPECIAL_FORCES_COMMANDO
	}
		
	custom_effect_tooltip = SPECIAL_FORCES_MODIFIERS_TEXT
		
	ui_list_special_forces_penalties = yes
}

ui_list_special_forces_modifiers = {
	if = {
		limit = {
			NOT = { check_variable = { modifier@special_forces_training_time_factor = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_3
	}
	
	if = {
		limit = {
			NOT = { check_variable = { modifier@special_forces_no_supply_grace = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_4
	}
	
	if = {
		limit = {
			NOT = { check_variable = { modifier@extra_marine_supply_grace = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_6
	}
	
	if = {
		limit = {
			NOT = { check_variable = { modifier@extra_paratrooper_supply_grace = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_7
	}
	
	if = {
		limit = {
			NOT = { check_variable = { modifier@special_forces_out_of_supply_factor = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_5
	}
}

ui_list_special_forces_penalties = {

	if = {
		limit = {
			NOT = { check_variable = { modifier@special_forces_attack_factor = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_1
	}
	
	if = {
		limit = {
			NOT = { check_variable = { modifier@special_forces_defence_factor = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_2
	}
	
	if = { 
		limit = {
			NOT = { check_variable = { special_forces_para_debuff = 0 } }
		}
		custom_effect_tooltip = SPECIAL_FORCES_MODIFIER_8
	}
	
}

########################
##### ARMY STRENGTH ####
########################

### THE VALUES DONT TOOLTIP AUTOMATICALLY 

@INFANTRY_WEIGHT = 1
@LIGHT_INFANTRY_WEIGHT = 0.75
@GARRISON_WEIGHT = 0.5
@MILITIA_WEIGHT = 0.25
@IRREGULAR_WEIGHT = 0.7
@MOUNT_ARTILLERY_WEIGHT = 1
@LT_ARTILLERY_WEIGHT = 1
@MED_ARTILLERY_WEIGHT = 1.5
@HV_ARTILLERY_WEIGHT = 2
@ANTI_TANK_WEIGHT = 1
@HV_ANTI_TANK_WEIGHT = 2
@ANTI_AIR_WEIGHT = 1
@HV_ANTI_AIR_WEIGHT = 2
@MOUNTAINEER_WEIGHT = 3
@MARINE_WEIGHT = 3
@PARATROOPER_WEIGHT = 3
@CAVALRY_WEIGHT = 1
@SEMI_MOTORIZED_WEIGHT = 1.5
@MOTORIZED_WEIGHT = 2
@MECHANIZED_WEIGHT = 3
@LT_ARMOR_WEIGHT = 3
@MED_ARMOR_WEIGHT = 4
@HV_ARMOR_WEIGHT = 5
@HQ_WEIGHT = 1
@SUPPORT_WEIGHT = 0.25

@ARMY_STRENGTH_1_TRIGGER = 200
@ARMY_STRENGTH_2_TRIGGER = 400
@ARMY_STRENGTH_3_TRIGGER = 600
@ARMY_STRENGTH_4_TRIGGER = 800
@ARMY_STRENGTH_5_TRIGGER = 1000
@ARMY_STRENGTH_6_TRIGGER = 1200
@ARMY_STRENGTH_7_TRIGGER = 1400
@ARMY_STRENGTH_8_TRIGGER = 1600
@ARMY_STRENGTH_9_TRIGGER = 1800
@ARMY_STRENGTH_10_TRIGGER = 2000

@ARMY_STRENGTH_NEXT_INCREASE = 200

########################
##### NAVY STRENGTH ####
########################

@BATTLESHIP_WEIGHT = 8
@BATTLECRUISER_WEIGHT = 8
@LARGE_CRUISER_WEIGHT = 7
@PREDREADNOUGHT_WEIGHT = 5
@POCKET_BATTLESHIP_WEIGHT = 4
@SUPER_CARRIER_WEIGHT = 9
@FLEET_CARRIER_WEIGHT = 7
@ARMORED_CARRIER_WEIGHT = 7
@LIGHT_CARRIER_WEIGHT = 4
@ESCORT_CARRIER_WEIGHT = 2.5
@HEAVY_CRUISER_WEIGHT = 4
@LIGHT_CRUISER_WEIGHT = 3
@DESTROYER_WEIGHT = 1.2
@DESTROYER_ESCORT_WEIGHT = 0.8
@TORPEDO_BOAT_WEIGHT = 0.8
@ESCORT_WEIGHT = 0.3
@PATROL_SUBMARINE_WEIGHT = 0.45
@LONG_RANGE_SUBMARINE_WEIGHT = 0.6
@COASTAL_SUBMARINE_WEIGHT = 0.3

@SMALL_NAVY_TRIGGER = 75
@NORMAL_NAVY_TRIGGER = 200
@LARGE_NAVY_TRIGGER = 350
@HUGE_NAVY_TRIGGER = 500

@SMALL_AIR_TRIGGER = 400
@NORMAL_AIR_TRIGGER = 800
@LARGE_AIR_TRIGGER = 1600
@HUGE_AIR_TRIGGER = 3200

check_army_strength = {
	clear_variable = army_strength
	
	if = {
		limit = {
			check_variable = { num_divisions > 0 }
		}

		set_temp_variable = { temp_num_infantry = num_battalions_with_type@infantry }
		add_to_temp_variable = { temp_num_infantry = num_battalions_with_type@infantry_assault }
		add_to_temp_variable = { temp_num_infantry = num_battalions_with_type@ss_infantry }
		add_to_temp_variable = { temp_num_infantry = num_battalions_with_type@ss_infantry_assault }
		add_to_temp_variable = { temp_num_infantry = num_battalions_with_type@guards_infantry }
		add_to_temp_variable = { temp_num_infantry = num_battalions_with_type@guards_infantry_assault }
		multiply_temp_variable = { temp_num_infantry = @INFANTRY_WEIGHT }
		add_to_variable = { army_strength = temp_num_infantry }

		set_temp_variable = { temp_num_light_infantry = num_battalions_with_type@light_infantry }
		add_to_temp_variable = { temp_num_light_infantry = num_battalions_with_type@ss_light_infantry }
		multiply_temp_variable = { temp_num_light_infantry = @LIGHT_INFANTRY_WEIGHT }
		add_to_variable = { army_strength = temp_num_light_infantry }

		set_temp_variable = { temp_num_garrison = num_battalions_with_type@garrison }
		set_temp_variable = { temp_num_garrison = num_battalions_with_type@ss_garrison }
		multiply_temp_variable = { temp_num_garrison = @GARRISON_WEIGHT }
		add_to_variable = { army_strength = temp_num_garrison }

		set_temp_variable = { temp_num_militia = num_battalions_with_type@militia }
		add_to_temp_variable = { temp_num_militia = num_battalions_with_type@fascist_militia }
		add_to_temp_variable = { temp_num_militia = num_battalions_with_type@communist_militia }
		multiply_temp_variable = { temp_num_militia = @MILITIA_WEIGHT }
		add_to_variable = { army_strength = temp_num_militia }

		set_temp_variable = { temp_num_irregular_unit = num_battalions_with_type@irregulars_unit }
		multiply_temp_variable = { temp_num_irregular_unit = @IRREGULAR_WEIGHT }
		add_to_variable = { army_strength = temp_num_irregular_unit }

		set_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@mountain_artillery_brigade }
		add_to_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@mountain_artillery_brigade_mot }
		add_to_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@airborne_artillery_brigade }
		add_to_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@ss_mountain_artillery_brigade }
		add_to_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@ss_mountain_artillery_brigade_mot }
		add_to_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@ss_airborne_artillery_brigade }
		add_to_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@guards_mountain_artillery_brigade }	
		add_to_temp_variable = { temp_num_pack_artillery = num_battalions_with_type@guards_mountain_artillery_brigade_mot }	
		multiply_temp_variable = { temp_num_pack_artillery = @MOUNT_ARTILLERY_WEIGHT }
		add_to_variable = { army_strength = temp_num_pack_artillery }
		
		set_temp_variable = { temp_num_light_artillery = num_battalions_with_type@artillery_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@artillery_brigade_mot }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@ss_artillery_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@ss_artillery_brigade_mot }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@guards_artillery_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@guards_artillery_brigade_mot }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@rocket_artillery_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@motorized_rocket_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@ss_rocket_artillery_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@ss_motorized_rocket_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@guards_rocket_artillery_brigade }
		add_to_temp_variable = { temp_num_light_artillery = num_battalions_with_type@guards_motorized_rocket_brigade }
		multiply_temp_variable = { temp_num_light_artillery = @LT_ARTILLERY_WEIGHT }
		add_to_variable = { army_strength = temp_num_light_artillery }

		set_temp_variable = { temp_num_medium_artillery = num_battalions_with_type@artillery_brigade_med }
		add_to_temp_variable = { temp_num_medium_artillery = num_battalions_with_type@artillery_brigade_mot_med }
		add_to_temp_variable = { temp_num_medium_artillery = num_battalions_with_type@ss_artillery_medium }
		add_to_temp_variable = { temp_num_medium_artillery = num_battalions_with_type@ss_artillery_medium_mot }
		add_to_temp_variable = { temp_num_medium_artillery = num_battalions_with_type@guards_artillery_brigade_med }
		add_to_temp_variable = { temp_num_medium_artillery = num_battalions_with_type@guards_artillery_brigade_mot_med }
		multiply_temp_variable = { temp_num_medium_artillery = @MED_ARTILLERY_WEIGHT }
		add_to_variable = { army_strength = temp_num_medium_artillery }

		set_temp_variable = { temp_num_heavy_artillery = num_battalions_with_type@artillery_heavy }
		add_to_temp_variable = { temp_num_heavy_artillery = num_battalions_with_type@artillery_heavy_mot }
		add_to_temp_variable = { temp_num_heavy_artillery = num_battalions_with_type@artillery_division }
		multiply_temp_variable = { temp_num_heavy_artillery = @HV_ARTILLERY_WEIGHT }
		add_to_variable = { army_strength = temp_num_heavy_artillery }

		set_temp_variable = { temp_num_anti_tank = num_battalions_with_type@anti_tank_brigade }
		add_to_temp_variable = { temp_num_anti_tank = num_battalions_with_type@anti_tank_brigade_mot }
		add_to_temp_variable = { temp_num_anti_tank = num_battalions_with_type@ss_anti_tank_brigade }
		add_to_temp_variable = { temp_num_anti_tank = num_battalions_with_type@ss_anti_tank_brigade_mot }
		multiply_temp_variable = { temp_num_anti_tank = @ANTI_TANK_WEIGHT }
		add_to_variable = { army_strength = temp_num_anti_tank }

		set_temp_variable = { temp_num_hv_anti_tank = num_battalions_with_type@anti_tank_heavy }
		multiply_temp_variable = { temp_num_hv_anti_tank = @HV_ANTI_TANK_WEIGHT }
		add_to_variable = { army_strength = temp_num_hv_anti_tank }

		set_temp_variable = { temp_num_anti_air = num_battalions_with_type@anti_air }
		add_to_temp_variable = { temp_num_anti_air = num_battalions_with_type@anti_air_car }
		multiply_temp_variable = { temp_num_anti_air = @ANTI_AIR_WEIGHT }
		add_to_variable = { army_strength = temp_num_anti_air }

		set_temp_variable = { temp_num_hv_anti_air = num_battalions_with_type@anti_air_heavy }
		add_to_temp_variable = { temp_num_hv_anti_air = num_battalions_with_type@anti_air_heavy_mot }
		multiply_temp_variable = { temp_num_hv_anti_air = @HV_ANTI_AIR_WEIGHT }
		add_to_variable = { army_strength = temp_num_hv_anti_air }

		set_temp_variable = { temp_num_mountaineer = num_battalions_with_type@mountaineers }
		add_to_temp_variable = { temp_num_mountaineer = num_battalions_with_type@ss_mountaineers }
		add_to_temp_variable = { temp_num_mountaineer = num_battalions_with_type@gurkha }
		multiply_temp_variable = { temp_num_mountaineer = @MOUNTAINEER_WEIGHT }
		add_to_variable = { army_strength = temp_num_mountaineer }

		set_temp_variable = { temp_num_marine = num_battalions_with_type@marine }
		add_to_temp_array = { temp_num_marine = num_battalions_with_type@marine_assault }
		add_to_temp_array = { temp_num_marine = num_battalions_with_type@amphibious_mechanized }
		add_to_temp_array = { temp_num_marine = num_battalions_with_type@amphibious_mechanized_assault }
		add_to_temp_array = { temp_num_marine = num_battalions_with_type@american_amph_lv }
		add_to_temp_array = { temp_num_marine = num_battalions_with_type@american_amph_lv_assault }
		multiply_temp_variable = { temp_num_marine = @MARINE_WEIGHT }
		add_to_variable = { army_strength = temp_num_marine }

		set_temp_variable = { temp_num_paratrooper = num_battalions_with_type@paratrooper }
		add_to_temp_variable = { temp_num_paratrooper = num_battalions_with_type@ss_paratrooper }
		add_to_temp_variable = { temp_num_paratrooper = num_battalions_with_type@guards_paratrooper }
		multiply_temp_variable = { temp_num_paratrooper = @PARATROOPER_WEIGHT }
		add_to_variable = { army_strength = temp_num_paratrooper }

		set_temp_variable = { temp_num_cavalry = num_battalions_with_type@cavalry }
		add_to_temp_variable = { temp_num_cavalry = num_battalions_with_type@ss_cavalry }
		add_to_temp_variable = { temp_num_cavalry = num_battalions_with_type@guards_cavalry }
		multiply_temp_variable = { temp_num_cavalry = @CAVALRY_WEIGHT }
		add_to_variable = { army_strength = temp_num_cavalry }

		set_temp_variable = { temp_num_semi_motorized = num_battalions_with_type@semi_motorized }
		add_to_temp_variable = { temp_num_semi_motorized = num_battalions_with_type@semi_motorized_assault }
		add_to_temp_variable = { temp_num_semi_motorized = num_battalions_with_type@ss_semi_motorized }
		add_to_temp_variable = { temp_num_semi_motorized = num_battalions_with_type@ss_semi_motorized_assault }
		add_to_temp_variable = { temp_num_semi_motorized = num_battalions_with_type@motorcycle_infantry }
		add_to_temp_variable = { temp_num_semi_motorized = num_battalions_with_type@ss_motorcycle_infantry }
		multiply_temp_variable = { temp_num_semi_motorized = @SEMI_MOTORIZED_WEIGHT }
		add_to_variable = { army_strength = temp_num_semi_motorized }

		set_temp_variable = { temp_num_motorized = num_battalions_with_type@motorized }
		add_to_temp_variable = { temp_num_motorized = num_battalions_with_type@motorized_assault }
		add_to_temp_variable = { temp_num_motorized = num_battalions_with_type@ss_motorized }
		add_to_temp_variable = { temp_num_motorized = num_battalions_with_type@ss_motorized_assault }
		add_to_temp_variable = { temp_num_motorized = num_battalions_with_type@guards_motorized }
		add_to_temp_variable = { temp_num_motorized = num_battalions_with_type@guards_motorized_assault }
		multiply_temp_variable = { temp_num_motorized = @MOTORIZED_WEIGHT }
		add_to_variable = { army_strength = temp_num_motorized }

		set_temp_variable = { temp_num_mechanized = num_battalions_with_type@mechanized }
		add_to_temp_variable = { temp_num_mechanized = num_battalions_with_type@mechanized_assault }
		add_to_temp_variable = { temp_num_mechanized = num_battalions_with_type@ss_mechanized }
		add_to_temp_variable = { temp_num_mechanized = num_battalions_with_type@ss_mechanized_assault }
		add_to_temp_variable = { temp_num_mechanized = num_battalions_with_type@guards_mechanized }
		add_to_temp_variable = { temp_num_mechanized = num_battalions_with_type@guards_mechanized_assault }
		multiply_temp_variable = { temp_num_mechanized = @MECHANIZED_WEIGHT }
		add_to_variable = { army_strength = temp_num_mechanized }

		set_temp_variable = { temp_num_light_armor = num_light_armor }

		multiply_temp_variable = { temp_num_light_armor = @LT_ARMOR_WEIGHT }
		add_to_variable = { army_strength = temp_num_light_armor }

		set_temp_variable = { temp_num_medium_armor = num_medium_armor }

		multiply_temp_variable = { temp_num_medium_armor = @MED_ARMOR_WEIGHT }
		add_to_variable = { army_strength = temp_num_medium_armor }

		set_temp_variable = { temp_num_heavy_armor = num_heavy_armor }

		multiply_temp_variable = { temp_num_heavy_armor = @HV_ARMOR_WEIGHT }
		add_to_variable = { army_strength = temp_num_heavy_armor }

		multiply_variable = { army_strength = field_strength }

		check_army_strength_ideas = yes
		#check_specific_army_strength_ideas = yes
		#check_HQ_army_strength_ideas = yes

	}
	else_if = { limit = { NOT = { has_idea = army_strength_0 } }
		add_ideas = army_strength_0
		remove_ideas = {
			#army_strength_0
			army_strength_1
			army_strength_2
			army_strength_3
			army_strength_4
			army_strength_5
			army_strength_6
			army_strength_7
			army_strength_8
			army_strength_9
			army_strength_10
		}
		set_variable = { army_strength_level = 0 }
	}
}

military_strength_trigger_needed = {
	clear_array = global.army_strength
	
	add_to_array = { global.army_strength = token:army_strength_0 }
	add_to_array = { global.army_strength = token:army_strength_1 }
	add_to_array = { global.army_strength = token:army_strength_2 }
	add_to_array = { global.army_strength = token:army_strength_3 }
	add_to_array = { global.army_strength = token:army_strength_4 }
	add_to_array = { global.army_strength = token:army_strength_5 }
	add_to_array = { global.army_strength = token:army_strength_6 }
	add_to_array = { global.army_strength = token:army_strength_7 }
	add_to_array = { global.army_strength = token:army_strength_8 }
	add_to_array = { global.army_strength = token:army_strength_9 }
	add_to_array = { global.army_strength = token:army_strength_10 }
	
}
check_army_strength_ideas = {
	
	set_temp_variable = { max_army_strength = army_strength }
	clamp_temp_variable = { var = max_army_strength max = 2001 }

	set_temp_variable = { new_level = max_army_strength }
	divide_temp_variable = { new_level = @ARMY_STRENGTH_NEXT_INCREASE }
	subtract_from_temp_variable = { new_level = 0.5 }
	round_temp_variable = new_level
	clamp_temp_variable = { var = new_level min = 0 }

	if = {
		limit = {
			NOT = { check_variable =  { army_strength_level = new_level } }
		}
		
		swap_ideas = {
			remove_idea = var:global.army_strength^army_strength_level
			add_idea = var:global.army_strength^new_level
		}
		
		set_variable = { army_strength_level = new_level }
	}
}
@AIR_STRENGTH_IN_STORAGE_FACTOR = 0.5

@FIGHTER_EQUIPMENT_WEIGHT = 1
@HEAVY_FIGHTER_EQUIPMENT_WEIGHT = 1.2
@CAS_EQUIPMENT_WEIGHT = 1
@HV_CAS_EQUIPMENT_WEIGHT = 1.2
@NAV_BOMB_EQUIPMENT_WEIGHT = 1.5
@TAC_BOMB_EQUIPMENT_WEIGHT = 1.5
@LIGHT_BOMB_EQUIPMENT_WEIGHT = 1.5
@FAST_BOMB_EQUIPMENT_WEIGHT = 1.5
@STRAT_BOMB_EQUIPMENT_WEIGHT = 2
@TRANSPORT_EQUIPMENT_WEIGHT = 1.5
@SCOUT_EQUIPMENT_WEIGHT = 1
@SUICIDE_EQUIPMENT_WEIGHT = 1

check_air_strength = {

	clear_variable = air_strength

### Fighter
	set_temp_variable = { storage_fighter = num_equipment@fighter_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@fighter_alt_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@interceptor_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@interceptor_navy_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@fighter_navy_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@mr_fighter_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@cv_fighter_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@cv_mr_fighter_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@rocket_interceptor_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@jet_mr_fighter_equipment }
	add_to_temp_variable = { storage_fighter = num_equipment@jet_fighter_equipment }
	multiply_temp_variable = { storage_fighter = @FIGHTER_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_fighter = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_fighter = num_deployed_planes_with_type@fighter_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@fighter_alt_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@interceptor_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@interceptor_navy_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@fighter_navy_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@mr_fighter_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@cv_fighter_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@cv_mr_fighter_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@rocket_interceptor_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@jet_mr_fighter_equipment }
	add_to_temp_variable = { deployed_fighter = num_deployed_planes_with_type@jet_fighter_equipment }
	multiply_temp_variable = { deployed_fighter = @FIGHTER_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_fighter = storage_fighter }

	add_to_variable = { air_strength = deployed_fighter }
### Heavy Fighter
	set_temp_variable = { storage_heavy_fighter = num_equipment@heavy_fighter_equipment }
	add_to_temp_variable = { storage_heavy_fighter = num_equipment@night_fighter_equipment }
	multiply_temp_variable = { storage_heavy_fighter = @HEAVY_FIGHTER_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_heavy_fighter = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_heavy_fighter = num_deployed_planes_with_type@heavy_fighter_equipment }
	add_to_temp_variable = { deployed_heavy_fighter = num_deployed_planes_with_type@night_fighter_equipment }
	multiply_temp_variable = { deployed_heavy_fighter = @HEAVY_FIGHTER_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_heavy_fighter = storage_heavy_fighter }

	add_to_variable = { air_strength = deployed_heavy_fighter }

### CAS
	set_temp_variable = { storage_CAS = num_equipment@CAS_equipment }
	add_to_temp_variable = { storage_CAS = num_equipment@cv_CAS_equipment }
	add_to_temp_variable = { storage_CAS = num_equipment@jet_cas_equipment }
	add_to_temp_variable = { storage_CAS = num_deployed_planes_with_type@cv_nav_bomber_equipment }
	multiply_temp_variable = { storage_CAS = @CAS_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_CAS = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_CAS = num_deployed_planes_with_type@CAS_equipment }
	add_to_temp_variable = { deployed_CAS = num_deployed_planes_with_type@cv_CAS_equipment }
	add_to_temp_variable = { deployed_CAS = num_deployed_planes_with_type@jet_cas_equipment }
	add_to_temp_variable = { deployed_CAS = num_deployed_planes_with_type@cv_nav_bomber_equipment }
	multiply_temp_variable = { deployed_CAS = @CAS_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_CAS = storage_CAS }

	add_to_variable = { air_strength = deployed_CAS }

### Heavy CAS
	set_temp_variable = { storage_HV_CAS = num_equipment@twin_cas_equipment }
	multiply_temp_variable = { storage_HV_CAS = @HV_CAS_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_HV_CAS = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_HV_CAS = num_deployed_planes_with_type@twin_cas_equipment }
	multiply_temp_variable = { deployed_HV_CAS = @HV_CAS_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_HV_CAS = storage_HV_CAS }

	add_to_variable = { air_strength = deployed_HV_CAS }

### Nav Bomb
	set_temp_variable = { storage_NV_BOMB = num_equipment@nav_bomber_equipment }
	add_to_temp_variable = { storage_NV_BOMB = num_deployed_planes_with_type@heavy_nav_bomber_equipment }
	add_to_temp_variable = { storage_NV_BOMB = num_deployed_planes_with_type@nav_bomber_gb_equipment }
	add_to_temp_variable = { storage_NV_BOMB = num_deployed_planes_with_type@flying_boat }
	multiply_temp_variable = { storage_NV_BOMB = @NAV_BOMB_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_NV_BOMB = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_NV_BOMB = num_deployed_planes_with_type@nav_bomber_equipment }
	add_to_temp_variable = { deployed_NV_BOMB = num_deployed_planes_with_type@heavy_nav_bomber_equipment }
	add_to_temp_variable = { deployed_NV_BOMB = num_deployed_planes_with_type@nav_bomber_gb_equipment }
	add_to_temp_variable = { deployed_NV_BOMB = num_deployed_planes_with_type@flying_boat }
	multiply_temp_variable = { deployed_NV_BOMB = @NAV_BOMB_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_NV_BOMB = storage_NV_BOMB }

	add_to_variable = { air_strength = deployed_NV_BOMB }

### Tac Bomb
	set_temp_variable = { storage_TAC = num_equipment@tac_bomber_equipment }
	add_to_temp_variable = { storage_TAC = num_equipment@jet_tac_bomber_equipment }
	multiply_temp_variable = { storage_TAC = @TAC_BOMB_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_TAC = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_TAC = num_deployed_planes_with_type@tac_bomber_equipment }
	add_to_temp_variable = { deployed_TAC = num_deployed_planes_with_type@jet_tac_bomber_equipment }
	multiply_temp_variable = { deployed_TAC = @TAC_BOMB_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_TAC = storage_TAC }

	add_to_variable = { air_strength = deployed_TAC }

### Fast Bomb
	set_temp_variable = { storage_FAST = num_equipment@fast_bomber_equipment }
	multiply_temp_variable = { storage_FAST = @FAST_BOMB_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_FAST = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_FAST = num_deployed_planes_with_type@fast_bomber_equipment }
	multiply_temp_variable = { deployed_FAST = @FAST_BOMB_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_FAST = storage_FAST }

	add_to_variable = { air_strength = deployed_FAST }

### Lt Bomb
	set_temp_variable = { storage_LIGHT = num_equipment@light_bomber_equipment }
	multiply_temp_variable = { storage_LIGHT = @LIGHT_BOMB_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_LIGHT = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_LIGHT = num_deployed_planes_with_type@light_bomber_equipment }
	multiply_temp_variable = { deployed_LIGHT = @LIGHT_BOMB_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_LIGHT = storage_LIGHT }

	add_to_variable = { air_strength = deployed_LIGHT }

### Strat Bomb
	set_temp_variable = { storage_STRAT = num_equipment@quad_engine_bomber_equipment }
	add_to_temp_variable = { storage_STRAT = num_equipment@jet_strat_bomber_equipment }
	multiply_temp_variable = { storage_STRAT = @STRAT_BOMB_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_STRAT = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_STRAT = num_deployed_planes_with_type@quad_engine_bomber_equipment }
	add_to_temp_variable = { deployed_STRAT = num_deployed_planes_with_type@jet_strat_bomber_equipment }
	multiply_temp_variable = { deployed_STRAT = @STRAT_BOMB_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_STRAT = storage_STRAT }

	add_to_variable = { air_strength = deployed_STRAT }


### Transport
	set_temp_variable = { storage_TRANSPORT = num_equipment@transport_plane_equipment }
	multiply_temp_variable = { storage_TRANSPORT = @TRANSPORT_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_TRANSPORT = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_TRANSPORT = num_deployed_planes_with_type@transport_plane_equipment }
	multiply_temp_variable = { deployed_TRANSPORT = @TRANSPORT_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_TRANSPORT = storage_TRANSPORT }

	add_to_variable = { air_strength = deployed_TRANSPORT }

### Recon
	set_temp_variable = { storage_SCOUT = num_equipment@scout_plane_equipment }
	multiply_temp_variable = { storage_SCOUT = @SCOUT_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_SCOUT = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_SCOUT = num_deployed_planes_with_type@scout_plane_equipment }
	multiply_temp_variable = { deployed_SCOUT = @SCOUT_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_SCOUT = storage_SCOUT }

	add_to_variable = { air_strength = deployed_SCOUT }

### Suicide
	set_temp_variable = { storage_SUICIDE = num_equipment@suicide_craft_equipment }
	multiply_temp_variable = { storage_SUICIDE = @SUICIDE_EQUIPMENT_WEIGHT }
	multiply_temp_variable = { storage_SUICIDE = @AIR_STRENGTH_IN_STORAGE_FACTOR }

	set_temp_variable = { deployed_SUICIDE = num_deployed_planes_with_type@suicide_craft_equipment }
	multiply_temp_variable = { deployed_SUICIDE = @SUICIDE_EQUIPMENT_WEIGHT }
	add_to_temp_variable = { deployed_SUICIDE = storage_SUICIDE }

	add_to_variable = { air_strength = deployed_SUICIDE }
	
	if = {
		limit = {
			check_variable = { air_strength = 0 }
		}
		clear_variable = air_strength
	}
	check_air_strength_ideas = yes
}

check_air_strength_ideas = {
	if = {
		limit = {
			check_variable = { var = air_strength value = @HUGE_AIR_TRIGGER compare = greater_than_or_equals }
		}
		if = { limit = { NOT = { has_idea = huge_air_force } }
			add_ideas = huge_air_force
			remove_ideas = {
				tiny_air_force
				small_air_force
				average_air_force
				large_air_force
				#huge_air_force
			}
		}
	}
	else_if = {
		limit = {
			check_variable = { var = air_strength value = @LARGE_AIR_TRIGGER compare = greater_than_or_equals }
		}
		if = { limit = { NOT = { has_idea = large_air_force } }
			add_ideas = large_air_force
			remove_ideas = {
				tiny_air_force
				small_air_force
				average_air_force
				#large_air_force
				huge_air_force
			}
		}
	}
	else_if = {
		limit = {
			check_variable = { var = air_strength value = @NORMAL_AIR_TRIGGER compare = greater_than_or_equals }
		}
		if = { limit = { NOT = { has_idea = average_air_force } }
			add_ideas = average_air_force
			remove_ideas = {
				tiny_air_force
				small_air_force
				#average_air_force
				large_air_force
				huge_air_force
			}
		}
	}
	else_if = {
		limit = {
			check_variable = { var = air_strength value = @SMALL_AIR_TRIGGER compare = greater_than_or_equals }
		}
		if = { limit = { NOT = { has_idea = small_air_force } }
			add_ideas = small_air_force
			remove_ideas = {
				tiny_air_force
				#small_air_force
				average_air_force
				large_air_force
				huge_air_force
			}
		}
	}
	else_if = {
		limit = {
			check_variable = { var = air_strength value = @SMALL_AIR_TRIGGER compare = less_than_or_equals }
		}
		if = { limit = { NOT = { has_idea = tiny_air_force } }
			add_ideas = tiny_air_force
			remove_ideas = {
				#tiny_air_force
				small_air_force
				average_air_force
				large_air_force
				huge_air_force
			}
		}
	}
}
###  NAVAL

check_navy_strength = {

	clear_variable = navy_strength
	
	if = {
		limit = {
			check_variable = { num_ships > 0 }
		}

		set_temp_variable = { temp_num_battleships = num_ships_with_type@battleship }
		multiply_temp_variable = { temp_num_battleships = @BATTLESHIP_WEIGHT }
		add_to_variable = { navy_strength = temp_num_battleships }

		set_temp_variable = { temp_num_battlecruisers = num_ships_with_type@battle_cruiser }
		multiply_temp_variable = { temp_num_battlecruisers = @BATTLECRUISER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_battlecruisers }
		
		set_temp_variable = { temp_num_large_cruisers = num_ships_with_type@large_cruiser }
		multiply_temp_variable = { temp_num_large_cruisers = @LARGE_CRUISER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_large_cruisers }

		set_temp_variable = { temp_num_predreadnoughts = num_ships_with_type@predreadnought }
		multiply_temp_variable = { temp_num_predreadnoughts = @PREDREADNOUGHT_WEIGHT }
		add_to_variable = { navy_strength = temp_num_predreadnoughts }

		set_temp_variable = { temp_num_pocket_battleships = num_ships_with_type@pocket_battleship }
		multiply_temp_variable = { temp_num_pocket_battleships = @POCKET_BATTLESHIP_WEIGHT }
		add_to_variable = { navy_strength = temp_num_pocket_battleships }

		set_temp_variable = { temp_num_super_carriers = num_ships_with_type@super_carrier }
		multiply_temp_variable = { temp_num_super_carriers = @SUPER_CARRIER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_super_carriers }
		
		set_temp_variable = { temp_num_carriers = num_ships_with_type@fleet_carrier }
		multiply_temp_variable = { temp_num_carriers = @FLEET_CARRIER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_carriers }

		set_temp_variable = { temp_num_armored_carriers = num_ships_with_type@armored_carrier }
		multiply_temp_variable = { temp_num_armored_carriers = @ARMORED_CARRIER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_armored_carriers }

		set_temp_variable = { temp_num_light_carriers = num_ships_with_type@light_carrier }
		multiply_temp_variable = { temp_num_light_carriers = @LIGHT_CARRIER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_light_carriers }
		
		set_temp_variable = { temp_num_escort_carriers = num_ships_with_type@escort_carrier }
		multiply_temp_variable = { temp_num_escort_carriers = @ESCORT_CARRIER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_escort_carriers }

		set_temp_variable = { temp_num_hv_cruisers = num_ships_with_type@heavy_cruiser }
		multiply_temp_variable = { temp_num_hv_cruisers = @HEAVY_CRUISER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_hv_cruisers }

		set_temp_variable = { temp_num_lt_cruisers = num_ships_with_type@light_cruiser }
		multiply_temp_variable = { temp_num_lt_cruisers = @LIGHT_CRUISER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_lt_cruisers }

		set_temp_variable = { temp_num_destroyers = num_ships_with_type@destroyer }
		multiply_temp_variable = { temp_num_destroyers = @DESTROYER_WEIGHT }
		add_to_variable = { navy_strength = temp_num_destroyers }
		
		set_temp_variable = { temp_num_destroyer_escorts = num_ships_with_type@destroyer_escort }
		multiply_temp_variable = { temp_num_destroyer_escorts = @DESTROYER_ESCORT_WEIGHT }
		add_to_variable = { navy_strength = temp_num_destroyer_escorts }
		
		set_temp_variable = { temp_num_torpedo_boats = num_ships_with_type@torpedo_boat }
		multiply_temp_variable = { temp_num_torpedo_boats = @TORPEDO_BOAT_WEIGHT }
		add_to_variable = { navy_strength = temp_num_torpedo_boats }
		
		set_temp_variable = { temp_num_escorts = num_ships_with_type@escort }
		multiply_temp_variable = { temp_num_escorts = @ESCORT_WEIGHT }
		add_to_variable = { navy_strength = temp_num_escorts }

		set_temp_variable = { temp_num_submarines = num_ships_with_type@patrol_submarine }
		multiply_temp_variable = { temp_num_submarines = @PATROL_SUBMARINE_WEIGHT }
		add_to_variable = { navy_strength = temp_num_submarines }

		set_temp_variable = { temp_num_coastal_submarines = num_ships_with_type@coastal_submarine }
		multiply_temp_variable = { temp_num_coastal_submarines = @COASTAL_SUBMARINE_WEIGHT }
		add_to_variable = { navy_strength = temp_num_coastal_submarines }

		set_temp_variable = { temp_num_long_range_submarines = num_ships_with_type@lr_submarine }
		multiply_temp_variable = { temp_num_long_range_submarines = @LONG_RANGE_SUBMARINE_WEIGHT }
		add_to_variable = { navy_strength = temp_num_long_range_submarines }
		
		check_navy_ideas = yes
	}
	else_if = {
		limit = { NOT = { has_idea = tiny_navy } }
		add_ideas = tiny_navy
		remove_ideas = {
			#tiny_navy
			small_navy
			average_navy
			large_navy
			huge_navy
		}
	}
}


check_navy_ideas = {
	hidden_effect = {
		if = {
			limit = {
				check_variable = { var = navy_strength value = @HUGE_NAVY_TRIGGER compare = greater_than_or_equals }
			}
			if = { limit = { NOT = { has_idea = huge_navy } }
				add_ideas = huge_navy
				remove_ideas = {
					tiny_navy
					small_navy
					average_navy
					large_navy
					#huge_navy
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { var = navy_strength value = @LARGE_NAVY_TRIGGER compare = greater_than_or_equals }
			}
			if = { limit = { NOT = { has_idea = large_navy } }
				add_ideas = large_navy
				remove_ideas = {
					tiny_navy
					small_navy
					average_navy
					#large_navy
					huge_navy
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { var = navy_strength value = @NORMAL_NAVY_TRIGGER compare = greater_than_or_equals }
			}
			if = { limit = { NOT = { has_idea = average_navy } }
				add_ideas = average_navy
				remove_ideas = {
					tiny_navy
					small_navy
					#average_navy
					large_navy
					huge_navy
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { var = navy_strength value = @SMALL_NAVY_TRIGGER compare = greater_than_or_equals }
			}
			if = { limit = { NOT = { has_idea = small_navy } }
				add_ideas = small_navy
				remove_ideas = {
					tiny_navy
					#small_navy
					average_navy
					large_navy
					huge_navy
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { var = navy_strength value = @SMALL_NAVY_TRIGGER compare = less_than_or_equals }
			}
			if = { limit = { NOT = { has_idea = tiny_navy } }
				add_ideas = tiny_navy
				remove_ideas = {
					#tiny_navy
					small_navy
					average_navy
					large_navy
					huge_navy
				}
			}
		}
	}
	if = { limit = { is_ai = yes } clear_variable = navy_size_frame }
}

replace_illegal_focus_tree = {
	if = {
		limit = {
			tag = GER
			NOT = { has_government = fascism }
			NOT = { has_focus_tree = generic_focus }
		}
		load_focus_tree = generic_focus
	}
	if = {
		limit = {
			tag = ITA
			NOT = { has_government = fascism }
			NOT = { has_focus_tree = generic_focus }
		}
		load_focus_tree = generic_focus
	}
	if = {
		limit = {
			tag = SOV
			NOT = { has_government = communism }
			NOT = { has_focus_tree = generic_focus }
		}
		load_focus_tree = generic_focus
	}
	if = {
		limit = {
			tag = ENG
			OR = {
				has_government = communism
				has_government = fascism
				#monarchism? neutrality?
			}
			NOT = { has_focus_tree = generic_focus }
		}
		load_focus_tree = generic_focus
	}
	if = {
		limit = {
			tag = USA
			NOT = { democratic_govt = yes }
			NOT = { has_focus_tree = generic_focus }
		}
		load_focus_tree = generic_focus
	}
	if = {
		limit = {
			tag = JAP
			OR = {
				#democratic_govt = yes #lmao they have a small shitty democratic branch
				has_government = communism
			}
			NOT = { has_focus_tree = generic_focus }
		}
		load_focus_tree = generic_focus
	}
}

clear_sabotaged_resources_if_necesary = {
	if = {
		limit = {
			not = {
				has_dynamic_modifier = {
					modifier = sabotaged_resources
				}
			}
		}

		clear_variable = sabotaged_resources
	}
}

remove_from_allowed_party = {
	if = {
		limit = { democratic_govt = yes }
		set_temp_variable = { allowed_party_democratic = 0 }
	}
	else_if = {
		limit = { has_government = fascism }
		set_temp_variable = { allowed_party_fascism = 0 }
	}
	else_if = {
		limit = { has_government = communism }
		set_temp_variable = { allowed_party_communism = 0 }
	}
	else_if = {
		limit = { has_government = neutrality }
		set_temp_variable = { allowed_party_neutrality = 0 }
	}
	else_if = {
		limit = { has_government = monarchism }
		set_temp_variable = { allowed_party_monarchism = 0 }
	}
}
#expectes a temp variable country_to_initiate which should contain original_tag to instantiate as a collabration government
instantiate_collaboration_government = {
	custom_effect_tooltip = compliance_80_effect_tooltip
	hidden_effect = {
		set_variable = { collaboration_formed@var:country_to_initiate = 1 }

		if = {
			# if country_to_initiate does not exist, simply release it as a puppet
			limit = {
				var:country_to_initiate = {
					exists = no
				}
			}
			var:country_to_initiate = { set_variable = { collaboration_formed_by = PREV } }
			release_autonomy = {
				target = country_to_initiate
				autonomy_state = autonomy_collaboration_government
				freedom_level = 0.5
			}
		}
		else = {
			# if country_to_initiate exists, create a dynamic country as our new puppet

			create_dynamic_country = {
				original_tag = country_to_initiate

				set_variable = { collaboration_formed_by = PREV }
				set_temp_variable = { new_country = this }

				PREV = {
					every_controlled_state = {
						limit = { occupied_country_tag = country_to_initiate }

						var:new_country = {
							transfer_state = PREV
						}
					}

					puppet = new_country

					set_autonomy = {
						target = new_country
						autonomy_state = autonomy_collaboration_government
						freedom_level = 0.5
						end_wars = no
					}
				}
			}
		}
	}
}

set_local_supply_in_states_modifier = {
	if = {
		limit = {
			NOT = { check_variable = { Root.modifier@local_supply_in_states = local_supply_in_states } }
			OR = {
				AND = { ROOT = { is_player = yes } NOT = { check_variable = { Root.modifier@local_supply_in_states = 0 } } }
				NOT = { check_variable = { local_supply_in_states = 0 } }
			}
		}
		
		if = {
			limit = {
				has_variable = local_supply_in_states
			}
			set_temp_variable = { temp = local_supply_in_states }
			multiply_temp_variable = { temp = -1 }
			clear_variable = local_supply_in_states
			meta_effect = {
				text = {
					add_state_modifier = {
						modifier = {
							local_supplies = [X]
						}
					}
				}
				X = "[?temp]"
			}
		}
		if = {
			limit = {
				ROOT = { is_player = yes }
				NOT = { check_variable = { Root.modifier@local_supply_in_states = 0 } }
			}
			meta_effect = {
				text = {
					set_variable = { local_supply_in_states = [X] }
					add_state_modifier = {
						modifier = {
							local_supplies = [X]
						}
					}
				}
				X = "[?Root.modifier@local_supply_in_states]"
			}
		}
	}
}
set_local_supply_in_core_states_modifier = {
	if = {
		limit = {
			NOT = { check_variable = { Root.modifier@local_supply_in_core_states = local_supply_in_core_states } }
			OR = {
				AND = { ROOT = { is_player = yes } NOT = { check_variable = { Root.modifier@local_supply_in_core_states = 0 } } }
				NOT = { check_variable = { local_supply_in_core_states = 0 } }
			}
		}
		
		if = {
			limit = {
				has_variable = local_supply_in_core_states
			}
			set_temp_variable = { temp = local_supply_in_core_states }
			multiply_temp_variable = { temp = -1 }
			clear_variable = local_supply_in_core_states
			meta_effect = {
				text = {
					add_state_modifier = {
						modifier = {
							local_supplies = [X]
						}
					}
				}
				X = "[?temp]"
			}
		}
		if = {
			limit = {
				ROOT = { is_player = yes }
				is_core_of = ROOT
				NOT = { check_variable = { Root.modifier@local_supply_in_core_states = 0 } }
			}
			meta_effect = {
				text = {
					set_variable = { local_supply_in_core_states = [X] }
					add_state_modifier = {
						modifier = {
							local_supplies = [X]
						}
					}
				}
				X = "[?Root.modifier@local_supply_in_core_states]"
			}
		}
	}
}

BI_performance_filter_effect = {
	clear_array = BI_performance_country_array
	if = {
		limit = {
			has_country_flag = BI_performance_filter_europe
		}
		every_country = {
			limit = {
				is_ai = yes capital_scope = { is_on_continent = europe }
			}
			add_to_array = { Root.BI_performance_country_array = This.id }
		}
	}
	if = {
		limit = {
			has_country_flag = BI_performance_filter_north_america
		}
		every_country = {
			limit = {
				is_ai = yes capital_scope = { is_on_continent = north_america }
			}
			add_to_array = { Root.BI_performance_country_array = This.id }
		}
	}
	if = {
		limit = {
			has_country_flag = BI_performance_filter_south_america
		}
		every_country = {
			limit = {
				is_ai = yes capital_scope = { is_on_continent = south_america }
			}
			add_to_array = { Root.BI_performance_country_array = This.id }
		}
	}
	if = {
		limit = {
			has_country_flag = BI_performance_filter_africa
		}
		every_country = {
			limit = {
				is_ai = yes capital_scope = { is_on_continent = africa }
			}
			add_to_array = { Root.BI_performance_country_array = This.id }
		}
	}
	if = {
		limit = {
			has_country_flag = BI_performance_filter_asia
		}
		every_country = {
			limit = {
				is_ai = yes capital_scope = { is_on_continent = asia }
			}
			add_to_array = { Root.BI_performance_country_array = This.id }
		}
	}
	if = {
		limit = {
			has_country_flag = BI_performance_filter_middle_east
		}
		every_country = {
			limit = {
				is_ai = yes capital_scope = { is_on_continent = middle_east }
			}
			add_to_array = { Root.BI_performance_country_array = This.id }
		}
	}
	if = {
		limit = {
			has_country_flag = BI_performance_filter_oceania
		}
		every_country = {
			limit = {
				is_ai = yes capital_scope = { is_on_continent = australia }
			}
			add_to_array = { Root.BI_performance_country_array = This.id }
		}
	}
}

BI_filter_effect = {
	clear_array = country_selection

	every_other_country = {
		limit = {
			if = { limit = { ROOT = {
					has_country_flag = BI_filter_europe
				} }

				capital_scope = { is_on_continent = europe }
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_north_america
				} }

				capital_scope = { is_on_continent = north_america }
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_south_america
				} }

				capital_scope = { is_on_continent = south_america }
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_africa
				} }

				capital_scope = { is_on_continent = africa }
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_asia
				} }

				capital_scope = { is_on_continent = asia }
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_middle_east
				} }

				capital_scope = { is_on_continent = middle_east }
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_neighbors_owned
				} }

				is_owner_neighbor_of = ROOT
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_neighbors
				} }

				is_neighbor_of = ROOT
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_major
				} }

				is_major = yes
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_faction
				} }

				is_in_faction_with = ROOT
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_subjects
				} }

				is_subject_of = ROOT
			}

			if = { limit = { ROOT = {
					has_country_flag = BI_filter_enemies
				} }

				has_war_with = ROOT
			}
		}
		add_to_array = { Root.country_selection = This.id }
	}

}

BI_get_research_centre_slot_scores = {

	set_temp_variable = { BI_has_infrastructure_slot_scores = 1 }

	if = {
		limit = {
			is_ai = no 
		}
		
		for_each_scope_loop = { array = controlled_states

			BI_get_research_centre_slot_score = yes

			for_each_loop = { array = BI_research_centre_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.BI_research_centre_slot_score > BI_research_centre_slot_score } }

						add_to_temp_array = { array = BI_research_centre_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = BI_research_centre_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}

		clear_array = BI_research_centre_list
		if = {
			limit = { has_country_flag = placed_research_centre }
			for_each_loop = {
				array = BI_research_centre_slot_scores
				
				add_to_array = { Root.BI_research_centre_list = v }
				add_to_temp_variable = { count = 1 }
				if = {
					limit = {
						check_variable = { count > 5 }
					}
					set_temp_variable = { break = 1 }
				}
			}
		}
	}
	else = {
		set_temp_variable = { ai_research_best_target = 0 }
		set_temp_variable = { ai_research_best_target_score = 0 }
		for_each_scope_loop = { array = controlled_states 
		
			# get score
			BI_get_research_centre_slot_score = yes

			# compare with best score
			if = { limit = { check_variable = { BI_research_centre_slot_score > ai_research_best_target_score } } 

				set_temp_variable = { ai_research_best_target = THIS.id } 
				set_temp_variable = { ai_research_best_target_score = BI_research_centre_slot_score } 
			}
			clear_variable = BI_research_centre_slot_score
		}

		clear_array = Root.BI_research_centre_list
		
		# target was found
		if = { limit = { check_variable = { ai_research_best_target_score > 0 } }

			add_to_array = { Root.BI_research_centre_list = ai_research_best_target }
		}
	}
	
}
BI_get_research_centre_slot_score = {

	set_variable = { BI_research_centre_slot_score = vp_value }
	multiply_variable = { BI_research_centre_slot_score = 0.5 }

	set_temp_variable = { temp = building_level@industrial_complex }
	set_temp_variable = { mod = modifier@local_factories }
	add_to_temp_variable = { mod = 1 }
	multiply_temp_variable = { temp = mod }

	add_to_variable = { BI_research_centre_slot_score = temp }

	add_to_variable = { BI_research_centre_slot_score = building_level@infrastructure }

	if = { limit = { is_core_of = ROOT } multiply_variable = { BI_research_centre_slot_score = 4 } }

	if = { limit = { is_in_home_area = yes } multiply_variable = { BI_research_centre_slot_score = 4 } }

	if = { limit = { is_owned_by = ROOT } multiply_variable = { BI_research_centre_slot_score = 4 } }

	if = { limit = { no_border = yes } multiply_variable = { BI_research_centre_slot_score = 2 } }

	if = { limit = { no_enemy_border = yes } multiply_variable = { BI_research_centre_slot_score = 3 } }


	if = { limit = { is_coastal = yes } multiply_variable = { BI_research_centre_slot_score = 0.9 } }

	if = { limit = { OR = { is_island_state = yes has_state_category = tiny_island has_state_category = small_island } } multiply_variable = { BI_research_centre_slot_score = 0.1 } }

	if = { limit = { has_active_resistance = yes } multiply_variable = { BI_research_centre_slot_score = 0.25 } }

	if = { limit = { any_neighbor_state = { check_variable = { building_level@research_centre > 0 } } } multiply_variable = { BI_research_centre_slot_score = 0.9 } }

	if = { limit = { check_variable = { building_level@research_centre > 0 } } multiply_variable = { BI_research_centre_slot_score = 0 } }

	BI_special_research_centre_slot_scores = yes
}

BI_special_research_centre_slot_scores = {
	if = { limit = { ROOT = { tag = SOV } OR = { state = 195 state = 845 state = 219 state = 877 } }
		multiply_variable = { BI_research_centre_slot_score = 2 }
	}
	if = { limit = { state = 841 } multiply_variable = { BI_research_centre_slot_score = 0 } }
}

reduce_quota_90_idea = {
	if = {
		limit = { has_idea = ITA_quota_90_idea_reduced_2 }
		remove_ideas = ITA_quota_90_idea_reduced_2
	}
	else_if = {
		limit = { has_idea = ITA_quota_90_idea_reduced }
		swap_ideas = {
			remove_idea = ITA_quota_90_idea_reduced
			add_idea = ITA_quota_90_idea_reduced_2
		}
	}
	else_if = {
		limit = { has_idea = ITA_quota_90_idea }
		swap_ideas = {
			remove_idea = ITA_quota_90_idea
			add_idea = ITA_quota_90_idea_reduced
		}
	}
}

remove_quota_90_idea = {
	if = {
		limit = { has_idea = ITA_quota_90_idea_reduced_2 }
		remove_ideas = ITA_quota_90_idea_reduced_2
	}
	else_if = {
		limit = { has_idea = ITA_quota_90_idea_reduced }
		remove_ideas = ITA_quota_90_idea_reduced
	}
	else_if = {
		limit = { has_idea = ITA_quota_90_idea }
		remove_ideas = ITA_quota_90_idea
	}
}

increase_command = {
	if = {
		limit = { has_idea = cmd_increase9 }
		swap_ideas = {
			add_idea = cmd_increase10
			remove_idea = cmd_increase9
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase8 }
		swap_ideas = {
			add_idea = cmd_increase10
			remove_idea = cmd_increase8
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase7 }
		swap_ideas = {
			add_idea = cmd_increase9
			remove_idea = cmd_increase7
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase6 }
		swap_ideas = {
			add_idea = cmd_increase8
			remove_idea = cmd_increase6
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase5 }
		swap_ideas = {
			add_idea = cmd_increase7
			remove_idea = cmd_increase5
		}
	}		
	else_if = {
		limit = { has_idea = cmd_increase4 }
		swap_ideas = {
			add_idea = cmd_increase6
			remove_idea = cmd_increase4
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase3 }
		swap_ideas = {
			add_idea = cmd_increase5
			remove_idea = cmd_increase3
		}				
	}	
	else_if = {
		limit = { has_idea = cmd_increase2 }
		swap_ideas = {
			add_idea = cmd_increase4
			remove_idea = cmd_increase2
		}				
	}
	else_if = {
		limit = { has_idea = cmd_increase1 }
		swap_ideas = {
			add_idea = cmd_increase3
			remove_idea = cmd_increase1
		}				
	}
	else_if = {
		limit = { has_idea = cmd_increase }
		swap_ideas = {
			add_idea = cmd_increase2
			remove_idea = cmd_increase
		}				
	}
	else = {
		add_ideas = cmd_increase1
	}
}


BI_update_prospect_for_resources_decisions = {
	if = { limit = { NOT = { has_country_flag = BI_update_prospect_for_resources_decisions } }
		set_country_flag = { flag = BI_update_prospect_for_resources_decisions value = 1 days = 14 }
		#log = "[Root.GetTag] | PROSPECT"
		if = {
			limit = {
				608 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_bejing_resources
				target = 608
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_bejing_resources
				target = 608
			}
		}
		if = {
			limit = {
				612 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_suiyuan_resources
				target = 612
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_suiyuan_resources
				target = 612
			}
		}
		if = {
			limit = {
				770 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_shandong_resources
				target = 770
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_shandong_resources
				target = 770
			}
		}
		if = {
			limit = {
				615 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_shanxi_resources
				target = 615
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_shanxi_resources
				target = 615
			}
		}
		if = {
			limit = {
				607 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_henan_resources
				target = 607
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_henan_resources
				target = 607
			}
		}
		if = {
			limit = {
				620 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_hubei_resources
				target = 620
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_hubei_resources
				target = 620
			}
		}
		if = {
			limit = {
				824 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_nanjing_resources
				target = 824
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_nanjing_resources
				target = 824
			}
		}
		if = {
			limit = {
				802 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_yulin_resources
				target = 802
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_yulin_resources
				target = 802
			}
		}
		if = {
			limit = {
				806 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_ganling_resources
				target = 806
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_ganling_resources
				target = 806
			}
		}
		if = {
			limit = {
				592 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_guangdong_resources
				target = 592
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_guangdong_resources
				target = 592
			}
		}
		if = {
			limit = {
				776 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_jiangmen_resources
				target = 776
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_jiangmen_resources
				target = 776
			}
		}
		if = {
			limit = {
				602 = {
					NOT = { has_state_flag = state_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_changde_resources
				target = 602
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_changde_resources
				target = 602
			}
		}
		if = {
			limit = {
				621 = {
					NOT = { has_state_flag = suiyuan_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_suiyuan_steel_deposits
				target = 621
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_suiyuan_steel_deposits
				target = 621
			}
		}
		if = {
			limit = {
				418 = {
					NOT = { has_state_flag = seman_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_seman_steel_deposits
				target = 418
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_seman_steel_deposits
				target = 418
			}
		}
		if = {
			limit = {
				623 = {
					NOT = { has_state_flag = luzon_chromium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_luzon_chromium_deposits
				target = 623
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_luzon_chromium_deposits
				target = 623
			}
		}
		if = {
			limit = {
				627 = {
					NOT = { has_state_flag = mindanao_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_mindanao_steel_deposits
				target = 627
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_mindanao_steel_deposits
				target = 627
			}
		}
		if = {
			limit = {
				625 = {
					NOT = { has_state_flag = samar_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_samar_steel_deposits
				target = 625
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_samar_steel_deposits
				target = 625
			}
		}
		if = {
			limit = {
				725 = {
					NOT = { has_state_flag = nauru_tungsten_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_nauru_tungsten_deposits
				target = 725
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_nauru_tungsten_deposits
				target = 725
			}
		}
		if = {
			limit = {
				671 = {
					NOT = { has_state_flag = tonkin_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_tonkin_aluminium_deposits
				target = 671
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_tonkin_aluminium_deposits
				target = 671
			}
		}
		if = {
			limit = {
				336 = {
					NOT = { has_state_flag = singapore_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_singapore_aluminium_deposits
				target = 336
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_singapore_aluminium_deposits
				target = 336
			}
		}
		if = {
			limit = {
				518 = {
					NOT = { has_state_flag = tasmania_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_tasmania_aluminium_deposits
				target = 518
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_tasmania_aluminium_deposits
				target = 518
			}
		}
		if = {
			limit = {
				556 = {
					NOT = { has_state_flag = west_Africa_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_west_africa_aluminium_deposits
				target = 556
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_west_africa_aluminium_deposits
				target = 556
			}
		}
		if = {
			limit = {
				556 = {
					NOT = { has_state_flag = west_Africa_aluminium_developed_2 }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_west_africa_aluminium_deposits_2
				target = 556
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_west_africa_aluminium_deposits_2
				target = 556
			}
		}
		if = {
			limit = {
				543 = {
					NOT = { has_state_flag = madagascar_rubber_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_madagascar_rubber_plantations
				target = 543
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_madagascar_rubber_plantations
				target = 543
			}
		}
		if = {
			limit = {
				543 = {
					NOT = { has_state_flag = madagascar_rubber_developed_2 }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_madagascar_rubber_plantations_2
				target = 543
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_madagascar_rubber_plantations_2
				target = 543
			}
		}
		if = {
			limit = {
				558 = {
					NOT = { has_state_flag = nigeria_rubber_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_nigeria_rubber_plantations
				target = 558
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_nigeria_rubber_plantations
				target = 558
			}
		}
		if = {
			limit = {
				298 = {
					NOT = { has_state_flag = rubber_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_liberia_rubber_plantations
				target = 298
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_liberia_rubber_plantations
				target = 298
			}
		}
		if = {
			limit = {
				56 = {
					NOT = { has_state_flag = ems_oil_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_ems_oil_fields
				target = 56
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_ems_oil_fields
				target = 56
			}
		}
		if = {
			limit = {
				4 = {
					NOT = { has_state_flag = ems_oil_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_matzen_oil_fields
				target = 4
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_matzen_oil_fields
				target = 4
			}
		}
		if = {
			limit = {
				36 = {
					NOT = { has_state_flag = friesland_oil_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_friesland_oil_fields
				target = 36
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_friesland_oil_fields
				target = 36
			}
		}
		if = {
			limit = {
				347 = {
					NOT = { has_state_flag = eregli_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = expand_eregli_steel_works
				target = 347
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = expand_eregli_steel_works
				target = 347
			}
		}
		if = {
			limit = {
				331 = {
					NOT = { has_state_flag = newfoundland_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_newfoundland_steel
				target = 331
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_newfoundland_steel
				target = 331
			}
		}
		if = {
			limit = {
				466 = {
					NOT = { has_state_flag = quebec_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_quebec_steel
				target = 466
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_quebec_steel
				target = 466
			}
		}
		if = {
			limit = {
				315 = {
					NOT = { has_state_flag = cuba_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_cuba_steel
				target = 315
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_cuba_steel
				target = 315
			}
		}
		if = {
			limit = {
				372 = {
					NOT = { 
						has_state_flag = { 
							flag = arkansas_aluminium_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_arkansas_aluminium_deposits
				target = 372
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_arkansas_aluminium_deposits
				target = 372
			}
		}
		if = {
			limit = {
				358 = {
					NOT = { 
						has_state_flag = { 
							flag = new_york_aluminium_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_new_york_aluminium_deposits
				target = 358
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_new_york_aluminium_deposits
				target = 358
			}
		}
		if = {
			limit = {
				360 = {
					NOT = {
						has_state_flag = {
							flag = pennsylvania_coal_developed
							value = 3
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_pennsylvania_coal_deposits
				target = 360
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_pennsylvania_coal_deposits
				target = 360
			}
		}
		if = {
			limit = {
				367 = {
					NOT = {
						has_state_flag = {
							flag = alabama_bauxite_developed
							value = 4
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_alabama_bauxite_deposits
				target = 367
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_alabama_bauxite_deposits
				target = 367
			}
		}
		if = {
			limit = {
				368 = {
					NOT = { 
						has_state_flag = { 
							flag = tennessee_aluminium_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_tennessee_aluminium_deposits
				target = 368
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_tennessee_aluminium_deposits
				target = 368
			}
		}
		if = {
			limit = {
				386 = {
					NOT = { 
						has_state_flag = { 
							flag = washington_aluminium_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_washington_aluminium_deposits
				target = 386
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_washington_aluminium_deposits
				target = 386
			}
		}
		if = {
			limit = {
				387 = {
					NOT = { 
						has_state_flag = { 
							flag = idaho_tungsten_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_idaho_tungsten_deposits
				target = 387
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_idaho_tungsten_deposits
				target = 387
			}
		}
		if = {
			limit = {
				378 = {
					NOT = { 
						has_state_flag = { 
							flag = california_tungsten_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_california_tungsten_deposits
				target = 378
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_california_tungsten_deposits
				target = 378
			}
		}
		if = {
			limit = {
				380 = {
					NOT = { 
						has_state_flag = { 
							flag = utah_coal_developed 
							value = 4
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_utah_coal_deposits
				target = 380
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_utah_coal_deposits
				target = 380
			}
		}
		if = {
			limit = {
				381 = {
					NOT = {
						has_state_flag = {
							flag = wyoming_coal_developed
							value = 4
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_wyoming_coal_deposits
				target = 381
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_wyoming_coal_deposits
				target = 381
			}
		}
		if = {
			limit = {
				391 = {
					NOT = { 
						has_state_flag = { 
							flag = minnesota_steel_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_minnesota_steel_deposits
				target = 391
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_minnesota_steel_deposits
				target = 391
			}
		}
		if = {
			limit = {
				360 = {
					NOT = { 
						has_state_flag = { 
							flag = pennsylvania_steel_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_pennsylvania_steel_deposits
				target = 360
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_pennsylvania_steel_deposits
				target = 360
			}
		}
		if = {
			limit = {
				261 = {
					NOT = { 
						has_state_flag = { 
							flag = ohio_steel_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_ohio_steel_deposits
				target = 261
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_ohio_steel_deposits
				target = 261
			}
		}
		if = {
			limit = {
				396 = {
					NOT = { 
						has_state_flag = { 
							flag = indiana_steel_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_indiana_steel_deposits
				target = 396
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_indiana_steel_deposits
				target = 396
			}
		}
		if = {
			limit = {
				388 = {
					NOT = { 
						has_state_flag = { 
							flag = montana_chromium_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_montana_chromium_deposits
				target = 388
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_montana_chromium_deposits
				target = 388
			}
		}
		if = {
			limit = {
				378 = {
					NOT = { 
						has_state_flag = { 
							flag = california_chromium_developed 
							value = 5 
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_california_chromium_deposits
				target = 378
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_california_chromium_deposits
				target = 378
			}
		}
		if = {
			limit = {
				892 = {
					NOT = {
						has_state_flag = {
							flag = west_virginia_coal_developed
							value = 3
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_west_virginia_coal_deposits
				target = 892
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_west_virginia_coal_deposits
				target = 892
			}
		}
		if = {
			limit = {
				537 = {
					NOT = { has_state_flag = sakhalin_oil_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_south_sakhalin_oil_deposits
				target = 537
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_south_sakhalin_oil_deposits
				target = 537
			}
		}
		if = {
			limit = {
				647 = {
					NOT = { has_state_flag = palau_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_palau_aluminium_deposits
				target = 647
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_palau_aluminium_deposits
				target = 647
			}
		}
		# Wales
		if = {
			limit = {
				122 = {
					NOT = {
						has_state_flag = {
							flag = wales_coal_developed
							value = 4
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_wales_coal_deposits
				target = 122
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_wales_coal_deposits
				target = 122
			}
		}

		if = {
			limit = {
				123 = {
					NOT = { has_state_flag = cornwall_tungsten_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_cornwall_tungsten_deposits_1
				target = 123
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_cornwall_tungsten_deposits_1
				target = 123
			}
		}
		if = {
			limit = {
				123 = {
					NOT = { has_state_flag = cornwall_tungsten_developed_2 }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_cornwall_tungsten_deposits_2
				target = 123
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_cornwall_tungsten_deposits_2
				target = 123
			}
		}
		# Cornwall
		if = {
			limit = {
				123 = {
					NOT = {
						has_state_flag = {
							flag = cornwall_bauxite_developed
							value = 3
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_cornwall_bauxite_deposits
				target = 123
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_cornwall_bauxite_deposits
				target = 123
			}
		}

		# Yorkshire
		if = {
			limit = {
				130 = {
					NOT = {
						has_state_flag = {
							flag = yorkshire_coal_developed
							value = 2
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_yorkshire_coal_deposits
				target = 130
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_yorkshire_coal_deposits
				target = 130
			}
		}
		# Northern England
		if = {
			limit = {
				131 = {
					NOT = {
						has_state_flag = {
							flag = northern_england_coal_developed
							value = 2
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_northern_england_coal_deposits
				target = 131
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_northern_england_coal_deposits
				target = 131
			}
		}
		# West Midlands
		if = {
			limit = {
				338 = {
					NOT = {
						has_state_flag = {
							flag = west_midlands_coal_developed
							value = 2
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_west_midlands_coal_deposits
				target = 338
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_west_midlands_coal_deposits
				target = 338
			}
		}
		# Guyana
		if = {
			limit = {
				687 = {
					NOT = {
						has_state_flag = {
							flag = guyana_aluminium_developed
							value = 5
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_guyana_aluminium_deposits
				target = 687
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_guyana_aluminium_deposits
				target = 687
			}
		}
		# USSR
		if = {
			limit = {
				195 = {
					NOT = { has_state_flag = leningrad_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_leningrad_aluminium_deposits
				target = 195
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_leningrad_aluminium_deposits
				target = 195
			}
		}
		if = {
			limit = {
				653 = {
					NOT = { has_state_flag = kamensk_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_kamensk_aluminium_deposits
				target = 653
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_kamensk_aluminium_deposits
				target = 653
			}
		}
		if = {
			limit = {
				217 = {
					NOT = { has_state_flag = stalingrad_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_stalingrad_aluminium_deposits
				target = 217
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_stalingrad_aluminium_deposits
				target = 217
			}
		}
		if = {
			limit = {
				233 = {
					NOT = { has_state_flag = caucasus_tungsten_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_caucasus_tungsten_deposits_1
				target = 233
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_caucasus_tungsten_deposits_1
				target = 233
			}
		}
		if = {
			limit = {
				233 = {
					NOT = { has_state_flag = caucasus_tungsten_developed_2 }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_caucasus_tungsten_deposits_2
				target = 233
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_caucasus_tungsten_deposits_2
				target = 233
			}
		}
		if = {
			limit = {
				404 = {
					NOT = { has_state_flag = kyzla_tungsten_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_kyzyl_tungsten_deposits
				target = 404
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_kyzyl_tungsten_deposits
				target = 404
			}
		}
		if = {
			limit = {
				572 = {
					NOT = { 
						has_state_flag = { 
							flag = chelyabinsk_steel_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_chelyabinsk_steel_deposits
				target = 572
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_chelyabinsk_steel_deposits
				target = 572
			}
		}
		if = {
			limit = {
				573 = {
					NOT = { has_state_flag = zlatoust_steel_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_zlatoust_steel_deposits_1
				target = 573
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_zlatoust_steel_deposits_1
				target = 573
			}
		}
		if = {
			limit = {
				573 = {
					NOT = { has_state_flag = zlatoust_steel_developed_2 }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_zlatoust_steel_deposits_2
				target = 573
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_zlatoust_steel_deposits_2
				target = 573
			}
		}
		if = {
			limit = {
				220 = {
					NOT = { 
						has_state_flag = { 
							flag = kursk_steel_developed 
							value = 5
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_kursk_steel_deposits
				target = 220
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_kursk_steel_deposits
				target = 220
			}
		}
		if = {
			limit = {
				220 = {
					NOT = { 
						has_state_flag = { 
							flag = kursk_steel_developed_2 
							value = 5
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_kursk_steel_deposits_2
				target = 220
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_kursk_steel_deposits_2
				target = 220
			}
		}
		if = {
			limit = {
				220 = {
					NOT = { 
						has_state_flag = { 
							flag = kursk_steel_developed_3 
							value = 5
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_kursk_steel_deposits_3
				target = 220
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_kursk_steel_deposits_3
				target = 220
			}
		}
		if = {
			limit = {
				240 = {
					NOT = { 
						has_state_flag = { 
							flag = Belgorod_steel_developed 
							value = 5
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_Belgorod_steel_deposits
				target = 240
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_Belgorod_steel_deposits
				target = 240
			}
		}
		if = {
			limit = {
				240 = {
					NOT = { 
						has_state_flag = { 
							flag = Belgorod_steel_developed_2 
							value = 5
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_Belgorod_steel_deposits_2
				target = 240
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_Belgorod_steel_deposits_2
				target = 240
			}
		}
		if = {
			limit = {
				240 = {
					NOT = { 
						has_state_flag = { 
							flag = Belgorod_steel_developed_3 
							value = 5
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_Belgorod_steel_deposits_3
				target = 240
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_Belgorod_steel_deposits_3
				target = 240
			}
		}
		if = {
			limit = {
				407 = {
					NOT = { has_state_flag = uralsk_chromium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_uralsk_chromium_deposits_1
				target = 407
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_uralsk_chromium_deposits_1
				target = 407
			}
		}
		if = {
			limit = {
				407 = {
					NOT = { has_state_flag = uralsk_chromium_developed_2 }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_uralsk_chromium_deposits_2
				target = 407
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_uralsk_chromium_deposits_2
				target = 407
			}
		}
		if = {
			limit = {
				527 = {
					NOT = { 
						has_state_flag = { 
							flag = chosin_tungsten_developed 
							value = 5
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_chosen_tungsten_deposits
				target = 527
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_chosen_tungsten_deposits
				target = 527
			}
		}
		if = {
			limit = {
				527 = {
					NOT = { has_state_flag = chosen_iron_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_chosen_iron_deposits
				target = 527
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_chosen_iron_deposits
				target = 527
			}
		}
		if = {
			limit = {
				110 = {
					NOT = { has_state_flag = ostlandet_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_ostlandet_aluminium_deposits
				target = 110
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_ostlandet_aluminium_deposits
				target = 110
			}
		}
		if = {
			limit = {
				142 = {
					NOT = { has_state_flag = vestlandet_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_vestlandet_aluminium_deposits
				target = 142
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_vestlandet_aluminium_deposits
				target = 142
			}
		}
		if = {
			limit = {
				536 = {
					NOT = { has_state_flag = hokkaido_iron_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_hokkaido_iron_deposits
				target = 536
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_hokkaido_iron_deposits
				target = 536
			}
		}
		if = {
			limit = {
				672 = {
					NOT = { 
						has_state_flag = { 
							flag = sumatra_aluminium_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_sumatra_aluminium_deposits
				target = 672
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_sumatra_aluminium_deposits
				target = 672
			}
		}
		if = {
			limit = {
				536 = {
					NOT = { has_state_flag = sulawesi_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_sulawesi_aluminium_deposits
				target = 536
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_sulawesi_aluminium_deposits
				target = 536
			}
		}
		if = {
			limit = {
				724 = {
					NOT = { 
						has_state_flag = { 
							flag = north_malay_aluminium_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_north_malay_aluminium_deposits
				target = 724
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_north_malay_aluminium_deposits
				target = 724
			}
		}
		if = {
			limit = {
				871 = {
					NOT = { 
						has_state_flag = { 
							flag = south_malay_aluminium_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_south_malay_aluminium_deposits
				target = 871
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_south_malay_aluminium_deposits
				target = 871
			}
		}
		if = {
			limit = {
				43 = {
					NOT = { 
						has_state_flag = { 
							flag = hungary_aluminium_developed 
							value = 4
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_hungary_aluminium_deposits
				target = 43
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_hungary_aluminium_deposits
				target = 43
			}
		}
		if = {
			limit = {
				106 = {
					NOT = { has_state_flag = macedonia_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_macedonia_aluminium_deposits
				target = 106
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_macedonia_aluminium_deposits
				target = 106
			}
		}
		if = {
			limit = {
				105 = {
					NOT = { has_state_flag = montenegro_aluminium_developed }
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_montenegro_aluminium_deposits
				target = 105
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_montenegro_aluminium_deposits
				target = 105
			}
		}
		if = {
			limit = {
				158 = {
					NOT = { 
						has_state_flag = { 
							flag = piedmont_aluminium_developed 
							value = 2
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_piedmont_aluminium_deposits
				target = 158
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_piedmont_aluminium_deposits
				target = 158
			}
		}
		if = {
			limit = {
				39 = {
					NOT = { 
						has_state_flag = { 
							flag = south_tyrol_aluminium_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_south_tyrol_aluminium_deposits
				target = 39
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_south_tyrol_aluminium_deposits
				target = 39
			}
		}
		if = {
			limit = {
				161 = {
					NOT = { 
						has_state_flag = { 
							flag = emilia_romagna_aluminium_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_emilia_romagna_aluminium_deposits
				target = 161
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_emilia_romagna_aluminium_deposits
				target = 161
			}
		}
		if = {
			limit = {
				162 = {
					NOT = { 
						has_state_flag = { 
							flag = tuscany_iron_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_tuscany_iron_deposits
				target = 162
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_tuscany_iron_deposits
				target = 162
			}
		}
		if = {
			limit = {
				114 = {
					NOT = { 
						has_state_flag = { 
							flag = sardinia_coal_developed 
							value = 3
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_sardinia_coal_deposits
				target = 114
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_sardinia_coal_deposits
				target = 114
			}
		}
		if = {
			limit = {
				158 = {
					NOT = { 
						has_state_flag = { 
							flag = piedmont_coal_developed 
							value = 2
						} 
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_piedmont_coal_deposits
				target = 158
			}
		}
		else = {	
			remove_targeted_decision = {
				decision = develop_piedmont_coal_deposits
				target = 158
			}
		}
		
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				618 = {
					NOT = {
						has_state_flag = karamay_oil_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_karamay_oil
				target = 618
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_karamay_oil
				target = 618
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				287 = {
					NOT = {
						has_state_flag = taklamakan_oil_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_taklamakan_oil
				target = 287
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_taklamakan_oil
				target = 287
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				617 = {
					NOT = {
						has_state_flag = urumqi_oil_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_urumqi_oil
				target = 617
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_urumqi_oil
				target = 617
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				619 = {
					NOT = {
						has_state_flag = yarkand_oil_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_yarkand_oil
				target = 619
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_yarkand_oil
				target = 619
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				597 = {
					NOT = {
						has_state_flag = {
							flag = shandong_aluminium_developed
							value = 5
						}
					}
					is_controlled_by_ROOT_or_subject = yes
				}
			}
			activate_targeted_decision = {
				decision = develop_shandong_aluminium_deposits
				target = 597
			}
		}
		else_if = {
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_shandong_aluminium_deposits
				target = 597
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				616 = {
					NOT = {
						has_state_flag = ningxia_Al_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_ningxia_Al
				target = 616
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_ningxia_Al
				target = 616
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				604 = {
					NOT = {
						has_state_flag = qinghai_Al_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_qinghai_Al
				target = 604
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_qinghai_Al
				target = 604
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				593 = {
					NOT = {
						has_state_flag = guangdong_rubber_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_guangdong_rubber
				target = 593
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_guangdong_rubber
				target = 593
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				592 = {
					NOT = {
						has_state_flag = guangzhou_rubber_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_guangzhou_rubber
				target = 592
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_guangzhou_rubber
				target = 592
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				591 = {
					NOT = {
						has_state_flag = hainan_rubber_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_hainan_rubber
				target = 591
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_hainan_rubber
				target = 591
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				594 = {
					NOT = {
						has_state_flag = nanning_rubber_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_nanning_rubber
				target = 594
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_nanning_rubber
				target = 594
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				773 = {
					NOT = {
						has_state_flag = ganzhou_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_ganzhou_tungsten
				target = 773
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_ganzhou_tungsten
				target = 773
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				775 = {
					NOT = {
						has_state_flag = huaihua_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_huaihua_tungsten
				target = 775
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_huaihua_tungsten
				target = 775
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				602 = {
					NOT = {
						has_state_flag = hunan_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_hunan_tungsten
				target = 602
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_hunan_tungsten
				target = 602
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				765 = {
					NOT = {
						has_state_flag = jian_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_jian_tungsten
				target = 765
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_jian_tungsten
				target = 765
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				600 = {
					NOT = {
						has_state_flag = jiangxi_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_jiangxi_tungsten
				target = 600
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_jiangxi_tungsten
				target = 600
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				763 = {
					NOT = {
						has_state_flag = shaoguan_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_shaoguan_tungsten
				target = 763
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_shaoguan_tungsten
				target = 763
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				605 = {
					NOT = {
						has_state_flag = sichuan_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_sichuan_tungsten
				target = 605
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_sichuan_tungsten
				target = 605
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				609 = {
					NOT = {
						has_state_flag = EHopeh_steel_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_EHopeh_steel
				target = 609
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_EHopeh_steel
				target = 609
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				748 = {
					NOT = {
						has_state_flag = sichuan_steel_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_guizhou_steel
				target = 748
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_guizhou_steel
				target = 748
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				605 = {
					NOT = {
						has_state_flag = sichuan_steel_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_sichuan_steel
				target = 605
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_sichuan_steel
				target = 605
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				765 = {
					NOT = {
						has_state_flag = wuhan_steel_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_wuhan_steel
				target = 765
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_wuhan_steel
				target = 765
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				328 = {
					NOT = {
						has_state_flag = kirin_chromium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_kirin_chrome
				target = 328
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_kirin_chrome
				target = 328
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				715 = {
					NOT = {
						has_state_flag = liaoning_chromium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_liaoning_chrome
				target = 715
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_liaoning_chrome
				target = 715
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				604 = {
					NOT = {
						has_state_flag = qinghai_chrome_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_qinghai_chrome
				target = 604
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_qinghai_chrome
				target = 604
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				717 = {
					NOT = {
						has_state_flag = sungkiang_chromium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = KMT_sungkiang_chrome
				target = 717
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = KMT_sungkiang_chrome
				target = 717
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				714 = {
					NOT = {
						has_state_flag = daqing_oil_developed_1
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_daqing_deposits
				target = 714
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_daqing_deposits
				target = 714
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				714 = {
					NOT = {
						has_state_flag = daqing_oil_developed_2
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_daqing_deposits_2
				target = 714
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_daqing_deposits_2
				target = 714
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				714 = {
					NOT = {
						has_state_flag = daqing_oil_developed_3
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_daqing_deposits_3
				target = 714
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_daqing_deposits_3
				target = 714
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				714 = {
					NOT = {
						has_state_flag = daqing_oil_developed_4
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_daqing_deposits_4
				target = 714
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_daqing_deposits_4
				target = 714
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				325 = {
					NOT = {
						has_state_flag = yunnan_aluminium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_yunnan_aluminium_deposits
				target = 325
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_yunnan_aluminium_deposits
				target = 325
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				328 = {
					NOT = {
						has_state_flag = kirin_aluminium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_kirin_aluminium_deposits
				target = 328
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_kirin_aluminium_deposits
				target = 328
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				605 = {
					NOT = {
						has_state_flag = sichuan_aluminium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_sichuan_aluminium_deposits
				target = 605
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_sichuan_aluminium_deposits
				target = 605
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				716 = {
					NOT = {
						has_state_flag = liaotung_steel_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_liaotung_iron_ore_deposits
				target = 716
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_liaotung_iron_ore_deposits
				target = 716
			}
		}
		if = {
			limit = {
				OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP }
				716 = {
					NOT = {
						has_state_flag = liaotung_steel_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_liaotung_iron_ore_deposits
				target = 716
			}
		}
		else_if = {	
			limit = { OR = { tag = CHI tag = PRC tag = MAN tag = RGR tag = JAP } }
			remove_targeted_decision = {
				decision = develop_liaotung_iron_ore_deposits
				target = 716
			}
		}
		if = {
			limit = {
				48 = {
					NOT = {
						has_state_flag = sofia_aluminium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_aluminium_mines_sofia
				target = 48
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_aluminium_mines_sofia
				target = 48
			}
		}
		if = {
			limit = {
				212 = {
					NOT = {
						has_state_flag = sofia_chromium_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_chromium_mines_plovdiv
				target = 212
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_chromium_mines_plovdiv
				target = 212
			}
		}
		if = {
			limit = {
				212 = {
					NOT = {
						has_state_flag = sofia_tungsten_developed
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
			}
			activate_targeted_decision = {
				decision = develop_tungsten_mines_plovdiv
				target = 212
			}
		}
		else = {
			remove_targeted_decision = {
				decision = develop_tungsten_mines_plovdiv
				target = 212
			}
		}
		if = {
			limit = {
				70 = {
					NOT = {
						has_state_flag = HUN_slovakia_oil_surveys_done
					}
					is_controlled_by_ROOT_or_subject = yes 
				}
				NOT = { tag = CZE }
			}
			activate_targeted_decision = {
				decision = HUN_slovakia_oil_surveys
				target = 70
			}
		}
		else = {
			remove_targeted_decision = {
				decision = HUN_slovakia_oil_surveys
				target = 70
			}
		}
	}
}

update_chinese_road_decisions = {
	if = {
		limit = {
			434 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_the_hump
			target = 434
		}
		activate_targeted_decision = {
			decision = CHI_reopen_the_hump
			target = 434
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_the_hump
			target = 434
		}
		remove_targeted_decision = {
			decision = CHI_reopen_the_hump
			target = 434
		}
	}
	if = {
		limit = {
			601 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_the_hump
			target = 601
		}
		activate_targeted_decision = {
			decision = CHI_reopen_the_hump
			target = 601
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_the_hump
			target = 601
		}
		remove_targeted_decision = {
			decision = CHI_reopen_the_hump
			target = 601
		}
	}
	
	
	if = {
		limit = {
			784 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_hanoi_route
			target = 784
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_hanoi_route
			target = 784
		}
	}
	if = {
		limit = {
			671 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_hanoi_route
			target = 671
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_hanoi_route
			target = 671
		}
	}
	
	
	if = {
		limit = {
			784 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 784
		}
		activate_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 784
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 784
		}
		remove_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 784
		}
	}
	if = {
		limit = {
			785 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 785
		}
		activate_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 785
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 785
		}
		remove_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 785
		}
	}
	if = {
		limit = {
			432 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 432
		}
		activate_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 432
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 432
		}
		remove_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 432
		}
	}
	if = {
		limit = {
			640 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 640
		}
		activate_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 640
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 640
		}
		remove_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 640
		}
	}
	if = {
		limit = {
			872 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 872
		}
		activate_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 872
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_close_ledo_road
			target = 872
		}
		remove_targeted_decision = {
			decision = CHI_reopen_ledo_road
			target = 872
		}
	}
	
	if = {
		limit = {
			has_completed_focus = CHI_the_hump
			NOT = { has_global_flag = CHI_hump_3 }
			434 = {
				is_controlled_by_ROOT_or_subject = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_expand_the_airlift
			target = 434
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_expand_the_airlift
			target = 434
		}
	}
	if = {
		limit = {
			has_global_flag = CHI_the_hump_completed
			NOT = { has_global_flag = CHI_hump_3 }
			601 = {
				is_controlled_by_ROOT_or_ally = yes 
			}
		}
		activate_targeted_decision = {
			decision = CHI_expand_the_airlift
			target = 601
		}
	}
	else = {
		remove_targeted_decision = {
			decision = CHI_expand_the_airlift
			target = 601
		}
	}
}

update_demobilization_decisions = {
	if = {
		limit = {
			has_war = no
			has_unsupported_economic_law = yes
		}
		set_country_flag = has_unsupported_economic_law
		activate_mission = demob_economic_mission
	}
	else = {
		clr_country_flag = has_unsupported_economic_law
	}
	
	if = {
		limit = {
			has_war = no
			has_unsupported_manpower_law = yes
		}
		set_country_flag = has_unsupported_manpower_law
		activate_mission = demob_manpower_mission
	}
	else = {
		clr_country_flag = has_unsupported_manpower_law
	}
	
	if = {
		limit = {
			has_war = no
			has_unsupported_conscription_law = yes
		}
		set_country_flag = has_unsupported_conscription_law
		activate_mission = demob_conscription_mission
	}
	else = {
		clr_country_flag = has_unsupported_conscription_law
	}
	
}

update_mob_general_status = {
	if = { 
		limit = { 
			has_idea = mob_general 
			NOT = { has_country_flag = mob_general_bypass }
			NOT = { 
				has_war = yes
				threat > 0.5
				custom_trigger_tooltip = {
					tooltip = is_justifying_wargoal
					check_variable = { justifying_wargoal_targets^num > 0 }
				}
				if = {
					limit = {
						has_idea = CHI_nine_power_treaty
					}
					has_idea = CHI_nine_power_treaty
				}
				else = {
					hidden_trigger = { always = no }
				}
				any_claim = yes #checks if someone is justifying on us or has a wargoal on us
			}
		}
		
		add_ideas = mob_limited
	}
}

BI_create_archetype_array = {
	clear_array = global.archetypes
	clear_array = global.archetypes_infantry
	clear_array = global.archetypes_armor
	add_to_array = { global.archetypes = token:infantry_equipment }
	add_to_array = { global.archetypes = token:amphibious_mechanized_equipment }
	add_to_array = { global.archetypes = token:anti_air_equipment }
	add_to_array = { global.archetypes = token:HVanti_air_equipment }
	add_to_array = { global.archetypes = token:anti_tank_equipment }
	add_to_array = { global.archetypes = token:medanti_tank_equipment }
	add_to_array = { global.archetypes = token:HVanti_tank_equipment }
	add_to_array = { global.archetypes = token:handheld_at_equipment }
	add_to_array = { global.archetypes = token:artyhorse_equipment }
	add_to_array = { global.archetypes = token:artytractor_equipment }
	add_to_array = { global.archetypes = token:artytruck_equipment }
	add_to_array = { global.archetypes = token:artillery_equipment }
	add_to_array = { global.archetypes = token:mountain_artillery_equipment }
	add_to_array = { global.archetypes = token:medartillery_equipment }
	add_to_array = { global.archetypes = token:Hvartillery_equipment }
	add_to_array = { global.archetypes = token:railartillery_equipment }
	add_to_array = { global.archetypes = token:rocket_artillery_equipment }
	add_to_array = { global.archetypes = token:motorized_rocket_equipment }
	add_to_array = { global.archetypes = token:infantrygun_equipment }
	add_to_array = { global.archetypes = token:spotter_planes_equipment }
	#add_to_array = { global.archetypes = token:garrison_equipment } #not included as resistance needs cant be taken into account
	add_to_array = { global.archetypes = token:infantry_uniforms }
	add_to_array = { global.archetypes = token:SMG_equipment }
	add_to_array = { global.archetypes = token:HMG_equipment }
	add_to_array = { global.archetypes = token:mortar_equipment }
	add_to_array = { global.archetypes = token:para_equipment }
	add_to_array = { global.archetypes = token:amph_equipment }
	add_to_array = { global.archetypes = token:mount_equipment }
	add_to_array = { global.archetypes = token:desert_equip }
	add_to_array = { global.archetypes = token:arctic_equipment }
	add_to_array = { global.archetypes = token:jungle_equipment }
	add_to_array = { global.archetypes = token:horse_equipment }
	add_to_array = { global.archetypes = token:mechanized_equipment }
	add_to_array = { global.archetypes = token:mechanized_hmg }
	add_to_array = { global.archetypes = token:mechanized_at }
	add_to_array = { global.archetypes = token:mechanized_aa }
	add_to_array = { global.archetypes = token:motorized_equipment }
	add_to_array = { global.archetypes = token:motorized_AC_equipment }
	add_to_array = { global.archetypes = token:motorized_lia_equipment }
	add_to_array = { global.archetypes = token:radio_equipment }
	add_to_array = { global.archetypes = token:support_equipment }
	add_to_array = { global.archetypes = token:recon_equipment }
	add_to_array = { global.archetypes = token:recon_mot_equipment }
	
	add_to_array = { global.archetypes = token:trm_tankette_tank_chassis }
	add_to_array = { global.archetypes = token:trm_tankette_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_tankette_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_tankette_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_tankette_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_tankette_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_tankette_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes = token:trm_light_tank_chassis }
	add_to_array = { global.archetypes = token:trm_light_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_light_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_light_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_light_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_light_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_light_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes = token:trm_para_tank_chassis }
	add_to_array = { global.archetypes = token:trm_amph_tank_chassis }
	
	add_to_array = { global.archetypes = token:trm_cavalry_tank_chassis }
	add_to_array = { global.archetypes = token:trm_cavalry_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_cavalry_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_cavalry_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_cavalry_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_cavalry_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_cavalry_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes = token:trm_medium_tank_chassis }
	add_to_array = { global.archetypes = token:trm_medium_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_medium_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_medium_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_medium_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_medium_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_medium_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes = token:trm_medium_advanced_tank_chassis }
	add_to_array = { global.archetypes = token:trm_medium_advanced_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_medium_advanced_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_medium_advanced_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_medium_advanced_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_medium_advanced_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_medium_advanced_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes = token:trm_infantry_tank_chassis }
	add_to_array = { global.archetypes = token:trm_infantry_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_infantry_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_infantry_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_infantry_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_infantry_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_infantry_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes = token:trm_heavy_tank_chassis }
	add_to_array = { global.archetypes = token:trm_heavy_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_heavy_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_heavy_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_heavy_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_heavy_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_heavy_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes = token:trm_superheavy_tank_chassis }
	add_to_array = { global.archetypes = token:trm_superheavy_tank_cs_chassis }
	add_to_array = { global.archetypes = token:trm_superheavy_tank_destroyer_chassis }
	add_to_array = { global.archetypes = token:trm_superheavy_tank_assault_gun_chassis }
	add_to_array = { global.archetypes = token:trm_superheavy_tank_artillery_chassis }
	add_to_array = { global.archetypes = token:trm_superheavy_tank_aa_chassis }
	add_to_array = { global.archetypes = token:trm_superheavy_tank_amphibious_chassis }
	
	# infantry array 
	
	add_to_array = { global.archetypes_infantry = token:infantry_equipment }
	add_to_array = { global.archetypes_infantry = token:amphibious_mechanized_equipment }
	add_to_array = { global.archetypes_infantry = token:anti_air_equipment }
	add_to_array = { global.archetypes_infantry = token:HVanti_air_equipment }
	add_to_array = { global.archetypes_infantry = token:anti_tank_equipment }
	add_to_array = { global.archetypes_infantry = token:medanti_tank_equipment }
	add_to_array = { global.archetypes_infantry = token:HVanti_tank_equipment }
	add_to_array = { global.archetypes_infantry = token:handheld_at_equipment }
	add_to_array = { global.archetypes_infantry = token:artyhorse_equipment }
	add_to_array = { global.archetypes_infantry = token:artytractor_equipment }
	add_to_array = { global.archetypes_infantry = token:artytruck_equipment }
	add_to_array = { global.archetypes_infantry = token:artillery_equipment }
	add_to_array = { global.archetypes_infantry = token:mountain_artillery_equipment }
	add_to_array = { global.archetypes_infantry = token:medartillery_equipment }
	add_to_array = { global.archetypes_infantry = token:Hvartillery_equipment }
	add_to_array = { global.archetypes_infantry = token:railartillery_equipment }
	add_to_array = { global.archetypes_infantry = token:rocket_artillery_equipment }
	add_to_array = { global.archetypes_infantry = token:motorized_rocket_equipment }
	add_to_array = { global.archetypes_infantry = token:infantrygun_equipment }
	add_to_array = { global.archetypes_infantry = token:spotter_planes_equipment }
	#add_to_array = { global.archetypes_infantry = token:garrison_equipment } #not included as resistance needs cant be taken into account
	add_to_array = { global.archetypes_infantry = token:infantry_uniforms }
	add_to_array = { global.archetypes_infantry = token:SMG_equipment }
	add_to_array = { global.archetypes_infantry = token:HMG_equipment }
	add_to_array = { global.archetypes_infantry = token:mortar_equipment }
	add_to_array = { global.archetypes_infantry = token:para_equipment }
	add_to_array = { global.archetypes_infantry = token:amph_equipment }
	add_to_array = { global.archetypes_infantry = token:mount_equipment }
	add_to_array = { global.archetypes_infantry = token:desert_equip }
	add_to_array = { global.archetypes_infantry = token:arctic_equipment }
	add_to_array = { global.archetypes_infantry = token:jungle_equipment }
	add_to_array = { global.archetypes_infantry = token:horse_equipment }
	add_to_array = { global.archetypes_infantry = token:mechanized_equipment }
	add_to_array = { global.archetypes_infantry = token:mechanized_hmg }
	add_to_array = { global.archetypes_infantry = token:mechanized_at }
	add_to_array = { global.archetypes_infantry = token:mechanized_aa }
	add_to_array = { global.archetypes_infantry = token:motorized_equipment }
	add_to_array = { global.archetypes_infantry = token:motorized_AC_equipment }
	add_to_array = { global.archetypes_infantry = token:motorized_lia_equipment }
	add_to_array = { global.archetypes_infantry = token:radio_equipment }
	add_to_array = { global.archetypes_infantry = token:support_equipment }
	add_to_array = { global.archetypes_infantry = token:recon_equipment }
	add_to_array = { global.archetypes_infantry = token:recon_mot_equipment }
	
	# armor array
	
	add_to_array = { global.archetypes_armor = token:trm_tankette_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_tankette_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_tankette_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_tankette_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_tankette_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_tankette_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_tankette_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_light_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_light_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_light_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_light_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_light_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_light_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_light_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_para_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_amph_tank_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_cavalry_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_cavalry_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_cavalry_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_cavalry_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_cavalry_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_cavalry_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_cavalry_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_medium_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_medium_advanced_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_advanced_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_advanced_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_advanced_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_advanced_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_advanced_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_medium_advanced_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_infantry_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_infantry_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_infantry_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_infantry_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_infantry_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_infantry_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_infantry_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_heavy_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_heavy_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_heavy_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_heavy_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_heavy_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_heavy_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_heavy_tank_amphibious_chassis }
	
	add_to_array = { global.archetypes_armor = token:trm_superheavy_tank_chassis }
	add_to_array = { global.archetypes_armor = token:trm_superheavy_tank_cs_chassis }
	add_to_array = { global.archetypes_armor = token:trm_superheavy_tank_destroyer_chassis }
	add_to_array = { global.archetypes_armor = token:trm_superheavy_tank_assault_gun_chassis }
	add_to_array = { global.archetypes_armor = token:trm_superheavy_tank_artillery_chassis }
	add_to_array = { global.archetypes_armor = token:trm_superheavy_tank_aa_chassis }
	add_to_array = { global.archetypes_armor = token:trm_superheavy_tank_amphibious_chassis }
}
update_equipment_intro_UI = {
	clear_array = equipment_intro_list
	clear_array = equipment_unit_group_list
	clear_array = equipment_unit_group_deployed_list
	if = {
		limit = {
			has_tech = mortars
			NOT = { has_country_flag = mortar_equipment_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:mortar_equipment }
	}
	if = {
		limit = {
			has_tech = hmg
			NOT = { has_country_flag = HMG_equipment_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:HMG_equipment }
	}
	if = {
		limit = {
			has_tech = radio_technology
			NOT = { has_country_flag = radio_equipment_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:radio_equipment }
	}
	if = {
		limit = {
			has_tech = infantry_at
			NOT = { has_country_flag = handheld_at_equipment_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:handheld_at_equipment }
	}
	if = {
		limit = {
			has_tech = infantry_guns
			NOT = { has_country_flag = infantrygun_equipment_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:infantrygun_equipment }
	}
	#if = { #uuuhm, no
	#	limit = {
	#		has_tech = tech_command_tanks
	#	}	
	#	add_to_array = { equipment_intro_list = token:command_tank_equipment }
	#}
	if = {
		limit = {
			has_tech = mechanized_hmg_tech
			NOT = { has_country_flag = mechanized_hmg_intro/complete }
		}	
		add_to_array = { equipment_intro_list = token:mechanized_hmg }
	}
	if = {
		limit = {
			has_tech = mechanized_mortar_tech
			NOT = { has_country_flag = mechanized_mortar_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:mechanized_mortar }
	}
	if = {
		limit = {
			has_tech = mechanized_at_tech
			NOT = { has_country_flag = mechanized_at_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:mechanized_at }
	}
	if = {
		limit = {
			has_tech = mechanized_aa_tech
			NOT = { has_country_flag = mechanized_aa_intro/complete }
		}
		add_to_array = { equipment_intro_list = token:mechanized_aa }
	}
}
BI_add_unit_categories = {
	clear_array = Root.equipment_unit_group_list
	set_variable = { selected_equipment = var:v }
	
	#################
	# HMG Equipment #
	#################
	if = {
		limit = {
			check_variable = { v = token:HMG_equipment }
			NOT = { has_country_flag = HMG_equipment_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = HMG_equipment_intro/infantry_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:infantry_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:infantry_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = HMG_equipment_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = HMG_equipment_intro/special_forces_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:special_forces_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:special_forces_group }
		}
		
		### Fully done, reduce to only 1 flag
		if = {
			limit = {
				has_country_flag = HMG_equipment_intro/infantry_group
				has_country_flag = HMG_equipment_intro/mobile_group
				has_country_flag = HMG_equipment_intro/special_forces_group
			}
			clr_country_flag = HMG_equipment_intro/infantry_group
			clr_country_flag = HMG_equipment_intro/mobile_group
			clr_country_flag = HMG_equipment_intro/special_forces_group
			
			set_country_flag = HMG_equipment_intro/complete
		}
	}

	####################
	# Mortar Equipment #
	####################
	if = {
		limit = {
			check_variable = { v = token:mortar_equipment }
			NOT = { has_country_flag = mortar_equipment_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mortar_equipment_intro/infantry_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:infantry_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:infantry_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mortar_equipment_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mortar_equipment_intro/special_forces_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:special_forces_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:special_forces_group }
		}
		
		### Fully done, reduce to only 1 flag
		if = {
			limit = {
				has_country_flag = mortar_equipment_intro/infantry_group
				has_country_flag = mortar_equipment_intro/mobile_group
				has_country_flag = mortar_equipment_intro/special_forces_group
			}
			clr_country_flag = mortar_equipment_intro/infantry_group
			clr_country_flag = mortar_equipment_intro/mobile_group
			clr_country_flag = mortar_equipment_intro/special_forces_group
			
			set_country_flag = mortar_equipment_intro/complete
		}
		
	}
	
	###################
	# Radio Equipment #
	###################
	if = {
		limit = {
			check_variable = { v = token:radio_equipment }
			NOT = { has_country_flag = radio_equipment_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = radio_equipment_intro/infantry_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:infantry_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:infantry_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = radio_equipment_intro/special_forces_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:special_forces_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:special_forces_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = radio_equipment_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		if = {
			limit = {
				#has_tech = HQ_radio ## deprecated tech
				NOT = { has_country_flag = radio_equipment_intro/support_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:support_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:support_group }
		}
		
		### Fully done, reduce to only 1 flag
		if = {
			limit = {
				has_country_flag = radio_equipment_intro/infantry_group
				has_country_flag = radio_equipment_intro/mobile_group
				has_country_flag = radio_equipment_intro/special_forces_group
				has_country_flag = radio_equipment_intro/support_group
			}
			clr_country_flag = radio_equipment_intro/infantry_group
			clr_country_flag = radio_equipment_intro/mobile_group
			clr_country_flag = radio_equipment_intro/special_forces_group
			clr_country_flag = radio_equipment_intro/support_group
			
			set_country_flag = radio_equipment_intro/complete
		}
		
	}
	
	
	#########################
	# handheld_at_equipment #
	#########################
	if = {
		limit = {
			check_variable = { v = token:handheld_at_equipment }
			NOT = { has_country_flag = handheld_at_equipment_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = handheld_at_equipment_intro/infantry_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:infantry_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:infantry_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = handheld_at_equipment_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		if = {
			limit = {
				NOT = { has_country_flag = handheld_at_equipment_intro/special_forces_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:special_forces_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:special_forces_group }
		}
		
		### Fully done, reduce to only 1 flag
		if = {
			limit = {
				has_country_flag = handheld_at_equipment_intro/infantry_group
				has_country_flag = handheld_at_equipment_intro/mobile_group
				has_country_flag = handheld_at_equipment_intro/special_forces_group
			}
			clr_country_flag = handheld_at_equipment_intro/infantry_group
			clr_country_flag = handheld_at_equipment_intro/mobile_group
			clr_country_flag = handheld_at_equipment_intro/special_forces_group
			
			set_country_flag = handheld_at_equipment_intro/complete
		}
	}

	##########################
	# Infantry Gun Equipment #
	##########################
	if = {
		limit = {
			check_variable = { v = token:infantrygun_equipment }
			NOT = { has_country_flag = infantrygun_equipment_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = infantrygun_equipment_intro/infantry_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:infantry_group }
		}
		
		if = {
			limit = {
				NOT = { has_country_flag = infantrygun_equipment_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		
		### Fully done, reduce to only 1 flag
		if = {
			limit = {
				has_country_flag = infantrygun_equipment_intro/infantry_group
				has_country_flag = infantrygun_equipment_intro/mobile_group
			}
			clr_country_flag = infantrygun_equipment_intro/infantry_group
			clr_country_flag = infantrygun_equipment_intro/mobile_group
			
			set_country_flag = infantrygun_equipment_intro/complete
		}
	}

	##########################
	# Command Tank Equipment #
	##########################
	if = {
		limit = {
			check_variable = { v = token:command_tank_equipment }
			NOT = { has_country_flag = command_tank_equipment_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = command_tank_equipment_intro/armor_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:armor_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:armor_group }
		}
		if = { #why does it have support group? 
			limit = {
				NOT = { has_country_flag = command_tank_equipment_intro/support_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:support_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:support_group }
		}
		
		### Fully done, reduce to only 1 flag
		if = {
			limit = {
				has_country_flag = command_tank_equipment_intro/armor_group
				has_country_flag = command_tank_equipment_intro/support_group
			}
			clr_country_flag = command_tank_equipment_intro/armor_group
			clr_country_flag = command_tank_equipment_intro/support_group
			
			set_country_flag = command_tank_equipment_intro/complete
		}
	}

	##################
	# Mechanized HMG #
	##################
	if = {
		limit = {
			check_variable = { v = token:mechanized_hmg }
			NOT = { has_country_flag = mechanized_hmg_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_hmg_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		
		### Fully done, reduce to a different flag LOL
		if = {
			limit = {
				has_country_flag = mechanized_hmg_intro/mobile_group
			}
			clr_country_flag = mechanized_hmg_intro/mobile_group
			
			set_country_flag = mechanized_hmg_intro/complete
		}
	}

	#####################
	# Mechanized Mortar #
	#####################
	if = {
		limit = {
			check_variable = { v = token:mechanized_mortar }
			NOT = { has_country_flag = mechanized_mortar_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_mortar_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		
		### Fully done, reduce to a different flag LOL
		if = {
			limit = {
				has_country_flag = mechanized_mortar_intro/mobile_group
			}
			clr_country_flag = mechanized_mortar_intro/mobile_group
			
			set_country_flag = mechanized_mortar_intro/complete
		}
	}
	
	#################
	# Mechanized AA #
	#################
	if = {
		limit = {
			check_variable = { v = token:mechanized_aa }
			NOT = { has_country_flag = mechanized_aa_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_aa_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		
		### Fully done, reduce to a different flag LOL
		if = {
			limit = {
				has_country_flag = mechanized_aa_intro/mobile_group
			}
			clr_country_flag = mechanized_aa_intro/mobile_group
			
			set_country_flag = mechanized_aa_intro/complete
		}
	}
	
	#################
	# Mechanized AT #
	#################
	if = {
		limit = {
			check_variable = { v = token:mechanized_at }
			NOT = { has_country_flag = mechanized_at_intro/complete }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_at_intro/mobile_group }
			}
			add_to_array = { Root.equipment_unit_group_list = token:mobile_group }
		}
		else = {
			add_to_array = { Root.equipment_unit_group_deployed_list = token:mobile_group }
		}
		
		### Fully done, reduce to a different flag LOL
		if = {
			limit = {
				has_country_flag = mechanized_at_intro/mobile_group
			}
			clr_country_flag = mechanized_at_intro/mobile_group
			
			set_country_flag = mechanized_at_intro/complete
		}

	}

}
d_update_equipment_intro_alert = {
	
	#################
	# HMG Equipment #
	#################
	if = {
		limit = {
			has_tech = hmg
			NOT = { has_country_flag = HMG_equipment_intro/complete }
		}
		set_temp_variable = { temp = token:HMG_equipment }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		if = {
			limit = {
				NOT = { has_country_flag = HMG_equipment_intro/infantry_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "infantry_group_list"
			
			add_to_temp_array = { HMG_equipment = token:infantry_group }
			add_to_temp_variable = { HMG_equipment = 1 }
		}
		if = {
			limit = {
				NOT = { has_country_flag = HMG_equipment_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { HMG_equipment = token:mobile_group }
			add_to_temp_variable = { HMG_equipment = 1 }
		}
		if = {
			limit = {
				NOT = { has_country_flag = HMG_equipment_intro/special_forces_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
			custom_effect_tooltip = "special_forces_group_list"
			
			add_to_temp_array = { HMG_equipment = token:special_forces_group }
			add_to_temp_variable = { HMG_equipment = 1 }
		}
		
		set_temp_variable = { list_header = 0 }
	}

	####################
	# Mortar Equipment #
	####################
	if = {
		limit = {
			has_tech = mortars
			NOT = { has_country_flag = mortar_equipment_intro/complete }
		}
		set_temp_variable = { temp = token:mortar_equipment }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		if = {
			limit = {
				NOT = { has_country_flag = mortar_equipment_intro/infantry_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "infantry_group_list"
			
			add_to_temp_array = { mortar_equipment = token:infantry_group }
			add_to_temp_variable = { mortar_equipment = 1 }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mortar_equipment_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { mortar_equipment = token:mobile_group }
			add_to_temp_variable = { mortar_equipment = 1 }
		}
		if = {
			limit = {
				NOT = { has_country_flag = mortar_equipment_intro/special_forces_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "special_forces_group_list"
			
			add_to_temp_array = { mortar_equipment = token:special_forces_group }
			add_to_temp_variable = { mortar_equipment = 1 }
		}
		set_temp_variable = { list_header = 0 }
	}
	
	###################
	# Radio Equipment #
	###################
	if = {
		limit = {
			has_tech = radio_technology
			NOT = { has_country_flag = radio_equipment_intro/complete }
		}
		set_temp_variable = { temp = token:radio_equipment }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		
		if = {
			limit = {
				NOT = { has_country_flag = radio_equipment_intro/support_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "support_group_list"
			
			add_to_temp_array = { radio_equipment = token:support_group }
			add_to_temp_variable = { radio_equipment = 1 }
		}
		if = {
			limit = {
				has_tech = infantry_radio
				NOT = { has_country_flag = radio_equipment_intro/infantry_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "infantry_group_list"
			
			add_to_temp_array = { radio_equipment = token:infantry_group }
			add_to_temp_variable = { radio_equipment = 1 }
		}
		if = {
			limit = {
				has_tech = infantry_radio
				NOT = { has_country_flag = radio_equipment_intro/special_forces_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "special_forces_group_list"
			
			add_to_temp_array = { radio_equipment = token:special_forces_group }
			add_to_temp_variable = { radio_equipment = 1 }
		}
		if = {
			limit = {
				has_tech = vehicle_radio
				NOT = { has_country_flag = radio_equipment_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { radio_equipment = token:mobile_group }
			add_to_temp_variable = { radio_equipment = 1 }
		}
		
		set_temp_variable = { list_header = 0 }
	}
	
	
	#########################
	# handheld_at_equipment #
	#########################
	if = {
		limit = {
			has_tech = infantry_at
			NOT = { has_country_flag = handheld_at_equipment_intro/complete }
		}
		set_temp_variable = { temp = token:handheld_at_equipment }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		
		if = {
			limit = {
				NOT = { has_country_flag = handheld_at_equipment_intro/infantry_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "infantry_group_list"
			
			add_to_temp_array = { handheld_at_equipment = token:infantry_group }
			add_to_temp_variable = { handheld_at_equipment = 1 }
		}
		if = {
			limit = {
				NOT = { has_country_flag = handheld_at_equipment_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { handheld_at_equipment = token:mobile_group }
			add_to_temp_variable = { handheld_at_equipment = 1 }
		}
		if = {
			limit = {
				NOT = { has_country_flag = handheld_at_equipment_intro/special_forces_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "special_forces_group_list"
			
			add_to_temp_array = { handheld_at_equipment = token:special_forces_group }
			add_to_temp_variable = { handheld_at_equipment = 1 }
		}
		set_temp_variable = { list_header = 0 }
	}

	##########################
	# Infantry Gun Equipment #
	##########################
	if = {
		limit = {
			has_tech = infantry_guns
			NOT = { has_country_flag = infantrygun_equipment_intro/complete }
		}
		set_temp_variable = { temp = token:infantrygun_equipment }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		
		if = {
			limit = {
				NOT = { has_country_flag = infantrygun_equipment_intro/infantry_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "infantry_group_list"
			
			add_to_temp_array = { infantrygun_equipment = token:infantry_group }
			add_to_temp_variable = { infantrygun_equipment = 1 }
		}
		
		if = {
			limit = {
				NOT = { has_country_flag = infantrygun_equipment_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { infantrygun_equipment = token:mobile_group }
			add_to_temp_variable = { infantrygun_equipment = 1 }
		}
		
		set_temp_variable = { list_header = 0 }
	}

	##################
	# Mechanized HMG #
	##################
	if = {
		limit = {
			has_tech = mechanized_hmg_tech
			NOT = { has_country_flag = mechanized_hmg_intro/complete }
		}
		set_temp_variable = { temp = token:mechanized_hmg }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_hmg_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { mechanized_hmg = token:mobile_group }
			add_to_temp_variable = { mechanized_hmg = 1 }
		}
		set_temp_variable = { list_header = 0 }
	}

	#####################
	# Mechanized Mortar #
	#####################
	if = {
		limit = {
			has_tech = mechanized_mortar_tech
			NOT = { has_country_flag = mechanized_mortar_intro/complete }
		}
		set_temp_variable = { temp = token:mechanized_mortar }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_mortar_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { mechanized_mortar = token:mobile_group }
			add_to_temp_variable = { mechanized_mortar = 1 }
		}
		set_temp_variable = { list_header = 0 }
	}
	
	#################
	# Mechanized AA #
	#################
	if = {
		limit = {
			has_tech = mechanized_aa_tech
			NOT = { has_country_flag = mechanized_aa_intro/complete }
		}
		set_temp_variable = { temp = token:mechanized_aa }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_aa_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { mechanized_aa = token:mobile_group }
			add_to_temp_variable = { mechanized_aa = 1 }
		}
		set_temp_variable = { list_header = 0 }
	}
	
	#################
	# Mechanized AT #
	#################
	if = {
		limit = {
			has_tech = mechanized_at_tech
			NOT = { has_country_flag = mechanized_at_intro/complete }
		}
		set_temp_variable = { temp = token:mechanized_at }
		custom_effect_tooltip = "[GetEquipmentIntroAlertHeader]"
		
		if = {
			limit = {
				NOT = { has_country_flag = mechanized_at_intro/mobile_group }
			}
			custom_effect_tooltip = "[GetEquipmentIntroAlertListHeader]"
			custom_effect_tooltip = "mobile_group_list"
			
			add_to_temp_array = { mechanized_at = token:mobile_group }
			add_to_temp_variable = { mechanized_at = 1 }
		}
		set_temp_variable = { list_header = 0 }
		
	}

	add_to_temp_variable = { num_alerts = HMG_equipment }
	add_to_temp_variable = { num_alerts = mortar_equipment }
	add_to_temp_variable = { num_alerts = radio_equipment }
	add_to_temp_variable = { num_alerts = handheld_at_equipment }
	add_to_temp_variable = { num_alerts = infantrygun_equipment }
	add_to_temp_variable = { num_alerts = mechanized_aa }
	add_to_temp_variable = { num_alerts = mechanized_at }
	add_to_temp_variable = { num_alerts = mechanized_hmg }
	add_to_temp_variable = { num_alerts = mechanized_mortar }
	
}
introduce_equipments_big_ass_tooltip = {
	if = {
		limit = {
			check_variable = { selected_equipment = token:HMG_equipment }
		}
		
		if = {
			limit = {
				check_variable = { v = token:infantry_group }
			}
			
			set_temp_variable = { temp = 18 }
			set_temp_variable = { total_infantry = num_battalions_with_type@infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry_assault }
			multiply_temp_variable = { total_infantry = temp }
				
			custom_effect_tooltip = infantry_tt
			
			set_temp_variable = { temp = 9 }
			set_temp_variable = { total_light_infantry = num_battalions_with_type@light_infantry }
			multiply_temp_variable = { total_light_infantry = temp }
				
			custom_effect_tooltip = light_infantry_tt
			
			set_temp_variable = { temp = 7 }
			set_temp_variable = { total_irregulars_unit = num_battalions_with_type@irregulars_unit }
			multiply_temp_variable = { total_irregulars_unit = temp }
			
			custom_effect_tooltip = irregulars_unit_tt
			
		}
		else_if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 18 }
			set_temp_variable = { total_semi_mot = num_battalions_with_type@motorcycle_infantry }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized_assault }
			multiply_temp_variable = { total_semi_mot = temp }
			
			set_temp_variable = { total_mot = num_battalions_with_type@motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@motorized_assault }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized_assault }
			multiply_temp_variable = { total_mot = temp }
			
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }
			
			custom_effect_tooltip = semi_motorized_tt
			custom_effect_tooltip = motorized_tt
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
			
			set_temp_variable = { temp = 9 }
			set_temp_variable = { total_cavalry = num_battalions_with_type@cavalry }
			add_to_temp_variable = { total_cavalry = num_battalions_with_type@guards_cavalry }
			multiply_temp_variable = { total_cavalry = temp }
			
			custom_effect_tooltip = cavalry_tt
			
		}
		else_if = {
			limit = {
				check_variable = { v = token:special_forces_group }
			}
			
			set_temp_variable = { temp = 12 }
			set_temp_variable = { total_paratrooper = num_battalions_with_type@paratrooper }
			add_to_temp_variable = { total_paratrooper = num_battalions_with_type@guards_paratrooper }
			multiply_temp_variable = { total_paratrooper = temp }
			
			set_temp_variable = { total_mountaineer = num_battalions_with_type@mountaineers }
			add_to_temp_variable = { total_mountaineer = num_battalions_with_type@gurkha }
			multiply_temp_variable = { total_mountaineer = temp }
			
			set_temp_variable = { total_marine = num_battalions_with_type@marine }
			add_to_temp_variable = { total_marine = num_battalions_with_type@marine_assault }
			multiply_temp_variable = { total_marine = temp }
			
			custom_effect_tooltip = paratrooper_tt
			custom_effect_tooltip = mountaineers_tt
			custom_effect_tooltip = marine_tt
			
		}
		
	}
	else_if = {
		limit = {
			check_variable = { selected_equipment = token:mortar_equipment }
		}
		
		if = {
			limit = {
				check_variable = { v = token:infantry_group }
			}
			
			set_temp_variable = { temp = 16 }
			set_temp_variable = { total_infantry = num_battalions_with_type@infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry_assault }
			multiply_temp_variable = { total_infantry = temp }
			
			custom_effect_tooltip = infantry_tt

			set_temp_variable = { temp = 8 }
			set_temp_variable = { total_light_infantry = num_battalions_with_type@light_infantry }
			multiply_temp_variable = { total_light_infantry = temp }
			
			custom_effect_tooltip = light_infantry_tt

			
		}
		else_if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 16 }
			set_temp_variable = { total_semi_mot = num_battalions_with_type@motorcycle_infantry }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized_assault }
			multiply_temp_variable = { total_semi_mot = temp }
			
			set_temp_variable = { total_mot = num_battalions_with_type@motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@motorized_assault }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized_assault }
			multiply_temp_variable = { total_mot = temp }
			
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }
			
			custom_effect_tooltip = semi_motorized_tt
			custom_effect_tooltip = motorized_tt
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
			
			set_temp_variable = { temp = 8 }
			set_temp_variable = { total_cavalry = num_battalions_with_type@cavalry }
			add_to_temp_variable = { total_cavalry = num_battalions_with_type@guards_cavalry }
			multiply_temp_variable = { total_cavalry = temp }
			custom_effect_tooltip = cavalry_tt
			
		}
		else_if = {
			limit = {
				check_variable = { v = token:special_forces_group }
			}
			
			if = {
				limit = {
					NOT = { has_country_flag = mortar_equipment_first_support }
				}
				
				set_temp_variable = { temp = 12 }
				set_temp_variable = { total_mountaineer = num_battalions_with_type@mountaineers }
				add_to_temp_variable = { total_mountaineer = num_battalions_with_type@gurkha }
				multiply_temp_variable = { total_mountaineer = temp }
				
				set_temp_variable = { total_marine = num_battalions_with_type@marine }
				add_to_temp_variable = { total_marine = num_battalions_with_type@marine_assault }
				multiply_temp_variable = { total_marine = temp }
				
				custom_effect_tooltip = mountaineers_tt
				custom_effect_tooltip = marine_tt
				set_country_flag = mortar_equipment_first_support
			}
			
			if = {
				limit = {
					has_tech = mortars_2
				}
				
				set_temp_variable = { temp = 12 }
				set_temp_variable = { total_paratrooper = num_battalions_with_type@paratrooper }
				add_to_temp_variable = { total_paratrooper = num_battalions_with_type@guards_paratrooper }
				multiply_temp_variable = { total_paratrooper = temp }
				
				custom_effect_tooltip = paratrooper_tt
			}
			
		}
	}
	else_if = {
		limit = {
			check_variable = { selected_equipment = token:infantrygun_equipment }
		}
		
		if = {
			limit = {
				check_variable = { v = token:infantry_group }
			}
			
			set_temp_variable = { temp = 2 }
			set_temp_variable = { total_infantry = num_battalions_with_type@infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry_assault }
			multiply_temp_variable = { total_infantry = temp }
			
			custom_effect_tooltip = infantry_tt
			
		}
		else_if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 2 }
			set_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized_assault }
			multiply_temp_variable = { total_semi_mot = temp }
			
			set_temp_variable = { total_mot = num_battalions_with_type@motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@motorized_assault }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized_assault }
			multiply_temp_variable = { total_mot = temp }
			
			custom_effect_tooltip = semi_motorized_tt
			custom_effect_tooltip = motorized_tt
		}
	}
	else_if = {
		limit = {
			check_variable = { selected_equipment = token:handheld_at_equipment }
		}
		
		if = {
			limit = {
				check_variable = { v = token:infantry_group }
			}
			
			set_temp_variable = { temp = 12 }
			set_temp_variable = { total_infantry = num_battalions_with_type@infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@ss_infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@ss_infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry_assault }
			multiply_temp_variable = { total_infantry = temp }
			
			custom_effect_tooltip = infantry_tt
			set_temp_variable = { temp = 6 }
			set_temp_variable = { total_light_infantry = num_battalions_with_type@light_infantry }
			add_to_temp_variable = { total_light_infantry = num_battalions_with_type@ss_light_infantry }
			multiply_temp_variable = { total_light_infantry = temp }
			
			custom_effect_tooltip = light_infantry_tt
			
		}
		else_if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 12 }
			set_temp_variable = { total_semi_mot = num_battalions_with_type@motorcycle_infantry }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@ss_motorcycle_infantry }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized_assault }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@ss_semi_motorized }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@ss_semi_motorized_assault }
			multiply_temp_variable = { total_semi_mot = temp }
			
			set_temp_variable = { total_mot = num_battalions_with_type@motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@motorized_assault }
			add_to_temp_variable = { total_mot = num_battalions_with_type@ss_motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@ss_motorized_assault }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized_assault }
			multiply_temp_variable = { total_mot = temp }
			
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }
			
			custom_effect_tooltip = semi_motorized_tt
			custom_effect_tooltip = motorized_tt
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
		}
		else_if = {
			limit = {
				check_variable = { v = token:special_forces_group }
			}
			
			set_temp_variable = { temp = 9 }
			set_temp_variable = { total_paratrooper = num_battalions_with_type@paratrooper }
			add_to_temp_variable = { total_paratrooper = num_battalions_with_type@ss_paratrooper }
			add_to_temp_variable = { total_paratrooper = num_battalions_with_type@guards_paratrooper }
			multiply_temp_variable = { total_paratrooper = temp }
			
			set_temp_variable = { total_mountaineer = num_battalions_with_type@mountaineers }
			add_to_temp_variable = { total_mountaineer = num_battalions_with_type@ss_mountaineers }
			add_to_temp_variable = { total_mountaineer = num_battalions_with_type@gurkha }
			multiply_temp_variable = { total_mountaineer = temp }
			
			custom_effect_tooltip = paratrooper_tt
			custom_effect_tooltip = mountaineers_tt
			
			set_temp_variable = { temp = 6 }
			set_temp_variable = { total_commando = num_battalions_with_type@commando }
			multiply_temp_variable = { total_commando = temp }
			
			custom_effect_tooltip = commando_tt

		}
	}
	if = {
		limit = {
			check_variable = { selected_equipment = token:radio_equipment }
		}
		
		if = {
			limit = {
				check_variable = { v = token:infantry_group }
			}
			
			set_temp_variable = { temp = 6 }
			set_temp_variable = { total_infantry = num_battalions_with_type@infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@ss_infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@ss_infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@guards_infantry_assault }
			add_to_temp_variable = { total_infantry = num_battalions_with_type@luftwaffe_infantry }
			multiply_temp_variable = { total_infantry = temp }
			
			custom_effect_tooltip = infantry_tt

			set_temp_variable = { temp = 6 }
			set_temp_variable = { total_light_infantry = num_battalions_with_type@light_infantry }
			add_to_temp_variable = { total_light_infantry = num_battalions_with_type@ss_light_infantry }
			multiply_temp_variable = { total_light_infantry = temp }
			
			custom_effect_tooltip = light_infantry_tt
			
			set_temp_variable = { temp = 5 }
			set_temp_variable = { total_irregulars_unit = num_battalions_with_type@irregulars_unit }
			multiply_temp_variable = { total_irregulars_unit = temp }
			
			custom_effect_tooltip = irregulars_unit_tt
			
			set_temp_variable = { temp = 3 }
			set_temp_variable = { total_garrison = num_battalions_with_type@garrison }
			multiply_temp_variable = { total_garrison = temp }
			
			set_temp_variable = { total_militia = num_battalions_with_type@militia }
			multiply_temp_variable = { total_militia = temp }
			
			custom_effect_tooltip = garrison_tt
			custom_effect_tooltip = militia_tt

		}
		else_if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 10 }
			set_temp_variable = { total_semi_mot = num_battalions_with_type@motorcycle_infantry }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@ss_motorcycle_infantry }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@semi_motorized_assault }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@ss_semi_motorized }
			add_to_temp_variable = { total_semi_mot = num_battalions_with_type@ss_semi_motorized_assault }
			multiply_temp_variable = { total_semi_mot = temp }
			
			set_temp_variable = { total_mot = num_battalions_with_type@motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@motorized_assault }
			add_to_temp_variable = { total_mot = num_battalions_with_type@ss_motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@ss_motorized_assault }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized }
			add_to_temp_variable = { total_mot = num_battalions_with_type@guards_motorized_assault }
			multiply_temp_variable = { total_mot = temp }
			
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }

			set_temp_variable = { total_cavalry = num_battalions_with_type@cavalry }
			add_to_temp_variable = { total_cavalry = num_battalions_with_type@camelry }
			add_to_temp_variable = { total_cavalry = num_battalions_with_type@guards_cavalry }
			add_to_temp_variable = { total_cavalry = num_battalions_with_type@ss_cavalry }
			multiply_temp_variable = { total_cavalry = temp }
			
			custom_effect_tooltip = semi_motorized_tt
			custom_effect_tooltip = motorized_tt
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
			custom_effect_tooltip = cavalry_tt
			
		}
		else_if = {
			limit = {
				check_variable = { v = token:special_forces_group }
			}
			
			set_temp_variable = { temp = 6 }
			set_temp_variable = { total_paratrooper = num_battalions_with_type@paratrooper }
			add_to_temp_variable = { total_paratrooper = num_battalions_with_type@ss_paratrooper }
			add_to_temp_variable = { total_paratrooper = num_battalions_with_type@guards_paratrooper }
			multiply_temp_variable = { total_paratrooper = temp }
			
			set_temp_variable = { total_mountaineer = num_battalions_with_type@mountaineers }
			add_to_temp_variable = { total_mountaineer = num_battalions_with_type@ss_mountaineers }
			add_to_temp_variable = { total_mountaineer = num_battalions_with_type@gurkha }
			multiply_temp_variable = { total_mountaineer = temp }
			
			set_temp_variable = { total_marine = num_battalions_with_type@marine }
			add_to_temp_variable = { total_marine = num_battalions_with_type@marine_assault }
			multiply_temp_variable = { total_marine = temp }
			
			set_temp_variable = { total_nkvd = num_battalions_with_type@nkvd }
			multiply_temp_variable = { total_nkvd = temp }
			
			custom_effect_tooltip = paratrooper_tt
			custom_effect_tooltip = mountaineers_tt
			custom_effect_tooltip = marine_tt
			custom_effect_tooltip = nkvd_tt
			
			
		}
		else_if = {
			limit = {
				check_variable = { v = token:support_group }
			}
			
			if = {
				limit = {
					NOT = { has_country_flag = radio_equipment_first_support }
				}
				
				set_temp_variable = { temp = 40 }
				set_temp_variable = { total_div_hq = num_battalions_with_type@DIV_HQ }
				add_to_temp_variable = { total_div_hq = num_battalions_with_type@DIV_HQ_airborne }
				add_to_temp_variable = { total_div_hq = num_battalions_with_type@DIV_HQ_car }
				add_to_temp_variable = { total_div_hq = num_battalions_with_type@DIV_HQ_mech }
				#add_to_temp_variable = { total_div_hq = num_battalions_with_type@DIV_HQ_arm }
				multiply_temp_variable = { total_div_hq = temp }
				
				custom_effect_tooltip = div_hq_tt
				set_country_flag = radio_equipment_first_support
			}
			
			if = {
				limit = {
					has_tech = recon_radio
				}
				
				set_temp_variable = { temp = 6 }
				set_temp_variable = { total_recon = num_battalions_with_type@recon }
				add_to_temp_variable = { total_recon = num_battalions_with_type@recon_cav }
				add_to_temp_variable = { total_recon = num_battalions_with_type@recon_mot }
				add_to_temp_variable = { total_recon = num_battalions_with_type@recon_mech }
				add_to_temp_variable = { total_recon = num_battalions_with_type@recon_ac }
				multiply_temp_variable = { total_recon = temp }
				
				custom_effect_tooltip = recon_tt
			}
			
		}
	}
	else_if = {
		limit = {
			check_variable = { selected_equipment = token:mechanized_hmg }
		}
		
		if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 10 }
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
			
		}
	}
	else_if = {
		limit = {
			check_variable = { selected_equipment = token:mechanized_mortar }
		}
		
		if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 10 }
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
			
		}
	}
	else_if = {
		limit = {
			check_variable = { selected_equipment = token:mechanized_at }
		}
		
		if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 5 }
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
			
		}
	}
	else_if = {
		limit = {
			check_variable = { selected_equipment = token:mechanized_aa }
		}
		
		if = {
			limit = {
				check_variable = { v = token:mobile_group }
			}
			
			set_temp_variable = { temp = 5 }
			set_temp_variable = { total_mech = num_battalions_with_type@mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@ss_mechanized_assault }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized }
			add_to_temp_variable = { total_mech = num_battalions_with_type@guards_mechanized_assault }
			multiply_temp_variable = { total_mech = temp }
			set_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@amphibious_mechanized_assault }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv }
			add_to_temp_variable = { total_amph_mech = num_battalions_with_type@american_amph_lv_assault }
			multiply_temp_variable = { total_amph_mech = temp }
			custom_effect_tooltip = mechanized_tt
			custom_effect_tooltip = amph_mechanized_tt
			
		}
	}
}


update_license_production_speed = {
	if = {
		limit = {
			has_any_license = yes
		}
		
		set_variable = { license_cap = modifier@industrial_capacity_factory }
		multiply_variable = { license_cap = -0.4 }
		
		if = { 
			limit = {
				NOT = { 
					has_dynamic_modifier = {
						modifier = license_cap
					}
				}
			}
			add_dynamic_modifier = {
				modifier = license_cap
			}
		}
	}
	else_if = {
		limit = { has_variable = license_cap }
		clear_variable = license_cap
		remove_dynamic_modifier = {
			modifier = license_cap
		}
	}
}

cmd_increase_up_1_level = {
	if = {
		limit = { has_idea = cmd_increase10 }
		add_command_power = 10
	}
	else_if = {
		limit = { has_idea = cmd_increase9 }
		swap_ideas = {
			add_idea = cmd_increase10
			remove_idea = cmd_increase9
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase8 }
		swap_ideas = {
			add_idea = cmd_increase9
			remove_idea = cmd_increase8
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase7 }
		swap_ideas = {
			add_idea = cmd_increase8
			remove_idea = cmd_increase7
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase6 }
		swap_ideas = {
			add_idea = cmd_increase7
			remove_idea = cmd_increase6
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase5 }
		swap_ideas = {
			add_idea = cmd_increase6
			remove_idea = cmd_increase5
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase4 }
		swap_ideas = {
			add_idea = cmd_increase5
			remove_idea = cmd_increase4
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase3 }
		swap_ideas = {
			add_idea = cmd_increase4
			remove_idea = cmd_increase3
		}
	}	
	else_if = {
		limit = { has_idea = cmd_increase2 }
		swap_ideas = {
			add_idea = cmd_increase3
			remove_idea = cmd_increase2
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase1 }
		swap_ideas = {
			add_idea = cmd_increase2
			remove_idea = cmd_increase1
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase }
		swap_ideas = {
			add_idea = cmd_increase1
			remove_idea = cmd_increase
		}
	}
	else = {
		add_ideas = cmd_increase
	}
}

cmd_increase_up_2_level = {
	if = {
		limit = { has_idea = cmd_increase10 }
		add_command_power = 20
	}
	else_if = {
		limit = { has_idea = cmd_increase9 }
		add_command_power = 10
		swap_ideas = {
			add_idea = cmd_increase10
			remove_idea = cmd_increase9
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase8 }
		swap_ideas = {
			add_idea = cmd_increase10
			remove_idea = cmd_increase8
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase7 }
		swap_ideas = {
			add_idea = cmd_increase9
			remove_idea = cmd_increase7
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase6 }
		swap_ideas = {
			add_idea = cmd_increase8
			remove_idea = cmd_increase6
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase5 }
		swap_ideas = {
			add_idea = cmd_increase7
			remove_idea = cmd_increase5
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase4 }
		swap_ideas = {
			add_idea = cmd_increase6
			remove_idea = cmd_increase4
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase3 }
		swap_ideas = {
			add_idea = cmd_increase5
			remove_idea = cmd_increase3
		}
	}	
	else_if = {
		limit = { has_idea = cmd_increase2 }
		swap_ideas = {
			add_idea = cmd_increase4
			remove_idea = cmd_increase2
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase1 }
		swap_ideas = {
			add_idea = cmd_increase3
			remove_idea = cmd_increase1
		}
	}
	else_if = {
		limit = { has_idea = cmd_increase }
		swap_ideas = {
			add_idea = cmd_increase2
			remove_idea = cmd_increase
		}
	}
	else = {
		add_ideas = cmd_increase1
	}
}

create_buildings_array = {
	clear_array = global.storage
	clear_array = global.storage_mat
	clear_array = global.storage_ore
	clear_array = global.storage_frame

	add_to_array = { global.storage = token:rubber }
	add_to_array = { global.storage = token:steel }
	add_to_array = { global.storage = token:aluminium }
	add_to_array = { global.storage = token:tungsten }
	add_to_array = { global.storage = token:chromium }
	add_to_array = { global.storage = token:bauxite }
	add_to_array = { global.storage = token:coal }
	add_to_array = { global.storage = token:iron }
	
	add_to_array = { global.storage_frame = 3 }
	add_to_array = { global.storage_frame = 5 }
	add_to_array = { global.storage_frame = 2 }
	add_to_array = { global.storage_frame = 4 }
	add_to_array = { global.storage_frame = 6 }
	add_to_array = { global.storage_frame = 7 }
	add_to_array = { global.storage_frame = 8 }
	add_to_array = { global.storage_frame = 9 }
	
	add_to_array = { global.storage_mat = token:rubber }
	add_to_array = { global.storage_mat = token:tungsten }
	add_to_array = { global.storage_mat = token:steel }
	add_to_array = { global.storage_mat = token:aluminium }
	
	add_to_array = { global.storage_ore = token:iron }
	add_to_array = { global.storage_ore = token:coal }
	add_to_array = { global.storage_ore = token:bauxite }
	
	clear_array = global.buildings
	clear_array = global.buildings_frame
	add_to_array = { global.buildings = token:industrial_complex }
	add_to_array = { global.buildings = token:arms_factory }
	add_to_array = { global.buildings = token:dockyard }
	add_to_array = { global.buildings = token:shipyard }
	add_to_array = { global.buildings = token:subyard }
	add_to_array = { global.buildings = token:artillery_assembly }
	add_to_array = { global.buildings = token:engine_assembly }
	add_to_array = { global.buildings = token:tank_assembly }
	add_to_array = { global.buildings = token:air_assembly }
	add_to_array = { global.buildings = token:shipyard_capital_building }
	add_to_array = { global.buildings = token:steel_refinery }
	add_to_array = { global.buildings = token:aluminium_refinery }
	add_to_array = { global.buildings = token:synthetic_refinery }
	add_to_array = { global.buildings = token:synthetic_rubber_refinery }
	add_to_array = { global.buildings = token:farm }
	add_to_array = { global.buildings = token:power_plant }
	add_to_array = { global.buildings = token:hydro_power }
	add_to_array = { global.buildings = token:fuel_silo }
	add_to_array = { global.buildings = token:storage }
	add_to_array = { global.buildings = token:food_storage }
	add_to_array = { global.buildings = token:nuclear_reactor }
	add_to_array = { global.buildings = token:nuclear_reactor_heavy_water }
	add_to_array = { global.buildings = token:recruitment_building }
	add_to_array = { global.buildings = token:police_station }
	add_to_array = { global.buildings = token:stronghold_network }
	add_to_array = { global.buildings = token:rocket_site }
	add_to_array = { global.buildings = token:mega_gun_emplacement }
	
	set_variable = { global.building_frame@infrastructure = 1 }
	set_variable = { global.building_frame@air_base = 2 }
	set_variable = { global.building_frame@anti_air_building = 3 }
	set_variable = { global.building_frame@radar_station = 4 }
	set_variable = { global.building_frame@research_centre = 31 }
	set_variable = { global.building_frame@industrial_complex = 8 }
	set_variable = { global.building_frame@arms_factory = 9 }
	set_variable = { global.building_frame@dockyard = 5 }
	set_variable = { global.building_frame@shipyard = 26 }
	set_variable = { global.building_frame@subyard = 27 }
	set_variable = { global.building_frame@artillery_assembly = 20 }
	set_variable = { global.building_frame@engine_assembly = 19 }
	set_variable = { global.building_frame@tank_assembly = 18 }
	set_variable = { global.building_frame@air_assembly = 24 }
	set_variable = { global.building_frame@shipyard_capital_building = 44 }
	set_variable = { global.building_frame@steel_refinery = 14 }
	set_variable = { global.building_frame@aluminium_refinery = 15 }
	set_variable = { global.building_frame@synthetic_refinery = 11 }
	set_variable = { global.building_frame@synthetic_rubber_refinery = 13 }
	set_variable = { global.building_frame@farm = 23 }
	set_variable = { global.building_frame@power_plant = 21 }
	set_variable = { global.building_frame@hydro_power = 22 }
	set_variable = { global.building_frame@fuel_silo = 12 }
	set_variable = { global.building_frame@storage = 25 }
	set_variable = { global.building_frame@food_storage = 23 }
	set_variable = { global.building_frame@nuclear_reactor = 17 }
	set_variable = { global.building_frame@nuclear_reactor_heavy_water = 37 }
	set_variable = { global.building_frame@recruitment_building = 43 }
	set_variable = { global.building_frame@police_station = 40 }
	set_variable = { global.building_frame@stronghold_network = 29 }
	set_variable = { global.building_frame@rocket_site = 16 }
	set_variable = { global.building_frame@mega_gun_emplacement = 32 }
	
	set_variable = { global.building_cost@industrial_complex = 8000 }
	set_variable = { global.building_cost@arms_factory = 8000 }
	set_variable = { global.building_cost@fuel_silo = 14400 }
	set_variable = { global.building_cost@radar_station = 4000 }
	set_variable = { global.building_cost@air_assembly = 10000 }
	set_variable = { global.building_cost@tank_assembly = 10000 }
	set_variable = { global.building_cost@engine_assembly = 7500 }
	set_variable = { global.building_cost@artillery_assembly = 5000 }
	set_variable = { global.building_cost@steel_refinery = 4400 }
	set_variable = { global.building_cost@aluminium_refinery = 4400 }
	set_variable = { global.building_cost@synthetic_refinery = 25000 }
	set_variable = { global.building_cost@synthetic_rubber_refinery = 30000 }
	set_variable = { global.building_cost@shipyard = 12500 }
	set_variable = { global.building_cost@subyard = 7500 }
	set_variable = { global.building_cost@dockyard = 30000 }
	set_variable = { global.building_cost@infrastructure = 4000 }
	set_variable = { global.building_cost@storage = 10000 }
	set_variable = { global.building_cost@power_plant = 8000 }
	set_variable = { global.building_cost@air_base = 600 }
	set_variable = { global.building_cost@nuclear_facility = 30000 }
	set_variable = { global.building_cost@electronics_facility = 18000 }
	set_variable = { global.building_cost@air_facility = 20000 }
	set_variable = { global.building_cost@land_facility = 20000 }
	set_variable = { global.building_cost@naval_facility = 20000 }

	
	set_variable = { global.building_speed@industrial_complex = token:production_speed_industrial_complex_factor }
	set_variable = { global.building_speed@arms_factory = token:production_speed_arms_factory_factor }
	set_variable = { global.building_speed@fuel_silo = token:production_speed_fuel_silo_factor }
	set_variable = { global.building_speed@radar_station = token:production_speed_radar_station_factor }
	set_variable = { global.building_speed@air_assembly = token:production_speed_air_assembly_factor }
	set_variable = { global.building_speed@steel_refinery = token:production_speed_steel_refinery_factor }
	set_variable = { global.building_speed@aluminium_refinery = token:production_speed_aluminium_refinery_factor }
	set_variable = { global.building_speed@synthetic_refinery = token:production_speed_synthetic_refinery_factor }
	set_variable = { global.building_speed@synthetic_rubber_refinery = token:production_speed_synthetic_rubber_refinery_factor }
	set_variable = { global.building_speed@shipyard = token:production_speed_shipyard_factor }
	set_variable = { global.building_speed@subyard = token:production_speed_subyard_factor }
	set_variable = { global.building_speed@dockyard = token:production_speed_dockyard_factor }
	set_variable = { global.building_speed@infrastructure = token:production_speed_infrastructure_factor }
	set_variable = { global.building_speed@storage = token:production_speed_storage_factor }
	set_variable = { global.building_speed@power_plant = token:production_speed_power_plant_factor }
	set_variable = { global.building_speed@air_base = token:production_speed_air_base_factor }
	set_variable = { global.building_speed@nuclear_facility = token:production_speed_nuclear_facility_factor }
	set_variable = { global.building_speed@electronics_facility = token:production_speed_electronics_facility_factor }
	set_variable = { global.building_speed@air_facility = token:production_speed_air_facility_factor }
	set_variable = { global.building_speed@land_facility = token:production_speed_land_facility_factor }
	set_variable = { global.building_speed@naval_facility = token:production_speed_naval_facility_factor }
	
	
	clear_array = global.resources
	add_to_array = { global.resources = token:oil }
	add_to_array = { global.resources = token:aluminium }
	add_to_array = { global.resources = token:rubber }
	add_to_array = { global.resources = token:tungsten }
	add_to_array = { global.resources = token:steel }
	add_to_array = { global.resources = token:chromium }
	add_to_array = { global.resources = token:bauxite }
	add_to_array = { global.resources = token:coal }
	add_to_array = { global.resources = token:iron }
	add_to_array = { global.resources = token:food }
	
	#also change it in mtth variable num_of_civilian_factories_for_import
	set_variable = { global.resource_cost@oil = 10 }
	set_variable = { global.resource_cost@rubber = 8 }
	set_variable = { global.resource_cost@tungsten = 8 }
	set_variable = { global.resource_cost@steel = 12 }
	set_variable = { global.resource_cost@aluminium = 8 }
	set_variable = { global.resource_cost@chromium = 8 }
	set_variable = { global.resource_cost@iron = 25 }
	set_variable = { global.resource_cost@coal = 32 }
	set_variable = { global.resource_cost@bauxite = 25 }
	set_variable = { global.resource_cost@food = 20 }
	
}
create_idea_slot_array = {
	clear_array = global.idea_slots
	clear_array = global.idea_slots_num

	add_to_array = { global.idea_slots = token:head_of_state }
	add_to_array = { global.idea_slots = token:foreign_minister }
	add_to_array = { global.idea_slots = token:interior_minister }
	add_to_array = { global.idea_slots = token:intel_minister }
	add_to_array = { global.idea_slots = token:economic_minister }
	add_to_array = { global.idea_slots = token:political_advisor }
	add_to_array = { global.idea_slots = token:domestic_minister }
	add_to_array = { global.idea_slots = token:influence_minister }
	
	add_to_array = { global.idea_slots = token:tank_manufacturers }
	add_to_array = { global.idea_slots = token:naval_manufacturers }
	add_to_array = { global.idea_slots = token:aircraft_manufacturers }
	add_to_array = { global.idea_slots = token:big_aircraft_manufacturer }
	add_to_array = { global.idea_slots = token:materiel_manufacturer }
	add_to_array = { global.idea_slots = token:industrial_concern }
	add_to_array = { global.idea_slots = token:electrical_concern }
	
	add_to_array = { global.idea_slots = token:supreme_commander }
	add_to_array = { global.idea_slots = token:army_chief }
	add_to_array = { global.idea_slots = token:air_chief }
	add_to_array = { global.idea_slots = token:navy_chief }
	add_to_array = { global.idea_slots = token:high_command }
	add_to_array = { global.idea_slots = token:theorist }
	
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 2 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 2 }
	add_to_array = { global.idea_slots_num = 1 }
	
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 1 }
	add_to_array = { global.idea_slots_num = 4 }
	add_to_array = { global.idea_slots_num = 3 }
}
create_ww1_array = {
	clear_array = global.ww1_doctrines
	add_to_array = { global.ww1_doctrines = token:ww1_infantry }
	add_to_array = { global.ww1_doctrines = token:infantry_charge }
	add_to_array = { global.ww1_doctrines = token:night_patrols }
	add_to_array = { global.ww1_doctrines = token:dispersed_infantry_attacks }
	add_to_array = { global.ww1_doctrines = token:infiltration_attacks }
	add_to_array = { global.ww1_doctrines = token:stormtroopers }
	add_to_array = { global.ww1_doctrines = token:complex_trench_systems }
	add_to_array = { global.ww1_doctrines = token:offensive_trenches }
	add_to_array = { global.ww1_doctrines = token:defensive_trenches }
	add_to_array = { global.ww1_doctrines = token:reserve_trenches }
	add_to_array = { global.ww1_doctrines = token:communication_trenches }
	add_to_array = { global.ww1_doctrines = token:logistics_trenches }
	add_to_array = { global.ww1_doctrines = token:barbed_wire }
	add_to_array = { global.ww1_doctrines = token:pillboxes }
	add_to_array = { global.ww1_doctrines = token:sniper_pits }
	add_to_array = { global.ww1_doctrines = token:nomans_land_saps }
	add_to_array = { global.ww1_doctrines = token:tunnel_mines }
	add_to_array = { global.ww1_doctrines = token:fortress_trenches }
	add_to_array = { global.ww1_doctrines = token:basic_MG_defences }
	add_to_array = { global.ww1_doctrines = token:multiple_MG_nests }
	add_to_array = { global.ww1_doctrines = token:enfilade_MG_fire_fields }
	add_to_array = { global.ww1_doctrines = token:infantry_MG_coordination }
	add_to_array = { global.ww1_doctrines = token:MG_support_infantry_doctrine }
	add_to_array = { global.ww1_doctrines = token:ww1_artillery }
	add_to_array = { global.ww1_doctrines = token:artillery_concentration }
	add_to_array = { global.ww1_doctrines = token:offensive_prep_fire }
	add_to_array = { global.ww1_doctrines = token:continuous_fire }
	add_to_array = { global.ww1_doctrines = token:harassment_fire }
	add_to_array = { global.ww1_doctrines = token:rear_area_bombardment }
	add_to_array = { global.ww1_doctrines = token:dummy_barrage }
	add_to_array = { global.ww1_doctrines = token:standing_barrage }
	add_to_array = { global.ww1_doctrines = token:box_barrage }
	add_to_array = { global.ww1_doctrines = token:block_barrage }
	add_to_array = { global.ww1_doctrines = token:creeping_barrage }
	add_to_array = { global.ww1_doctrines = token:rolling_barrage }
	add_to_array = { global.ww1_doctrines = token:artillery_observers }
	add_to_array = { global.ww1_doctrines = token:balloon_observers }
	add_to_array = { global.ww1_doctrines = token:aircraft_observers }
	add_to_array = { global.ww1_doctrines = token:foot_runners }
	add_to_array = { global.ww1_doctrines = token:carrier_pidgeons }
	add_to_array = { global.ww1_doctrines = token:telephone_communications }
	add_to_array = { global.ww1_doctrines = token:mobile_doctrines }
	add_to_array = { global.ww1_doctrines = token:cavalry_charges  }
	add_to_array = { global.ww1_doctrines = token:cavalry_dismounting  }
	add_to_array = { global.ww1_doctrines = token:cavalry_exploitation }
	add_to_array = { global.ww1_doctrines = token:armor_support  }
	add_to_array = { global.ww1_doctrines = token:infantry_tank_coordination  }
	add_to_array = { global.ww1_doctrines = token:infantry_tank_artillery_coordination  }
	add_to_array = { global.ww1_doctrines = token:anti_tank_traps  }
	add_to_array = { global.ww1_doctrines = token:infantry_AT_defences  }
	add_to_array = { global.ww1_doctrines = token:armored_car_recon  }
	add_to_array = { global.ww1_doctrines = token:motorcycle_liaison  }
	add_to_array = { global.ww1_doctrines = token:staff_officer_vehicles  }
	add_to_array = { global.ww1_doctrines = token:ww1_battlefield_support  }
	add_to_array = { global.ww1_doctrines = token:battlefield_commissions  }
	add_to_array = { global.ww1_doctrines = token:weather_reporting  }
	add_to_array = { global.ww1_doctrines = token:terrain_mapping  }
	add_to_array = { global.ww1_doctrines = token:camouflage_positions  }
	add_to_array = { global.ww1_doctrines = token:AA_positions  }
	add_to_array = { global.ww1_doctrines = token:first_aid_stations }
	
	#Air
	add_to_array = { global.ww1_doctrines = token:WW1_air_power }
	add_to_array = { global.ww1_doctrines = token:WW1_air_survey }
	add_to_array = { global.ww1_doctrines = token:WW1_air_control }
	add_to_array = { global.ww1_doctrines = token:WW1_air_bomb }
	add_to_array = { global.ww1_doctrines = token:WW1_air_ground }
	
	
	### Tech progression
		
	add_to_array = { global.ww1_progression@ww1_infantry = token:infantry_charge }
	add_to_array = { global.ww1_progression@infantry_charge = token:dispersed_infantry_attacks }
	add_to_array = { global.ww1_progression@infantry_charge = token:small_unit_raids }
	add_to_array = { global.ww1_progression@small_unit_raids = token:night_patrols }
	add_to_array = { global.ww1_progression@dispersed_infantry_attacks = token:stormtroopers }
	add_to_array = { global.ww1_progression@dispersed_infantry_attacks = token:infiltration_attacks }
	add_to_array = { global.ww1_progression@complex_trench_systems = token:offensive_trenches }
	add_to_array = { global.ww1_progression@complex_trench_systems = token:defensive_trenches }
	add_to_array = { global.ww1_progression@complex_trench_systems = token:reserve_trenches }
	add_to_array = { global.ww1_progression@complex_trench_systems = token:communication_trenches }
	add_to_array = { global.ww1_progression@complex_trench_systems = token:logistics_trenches }
	add_to_array = { global.ww1_progression@offensive_trenches = token:nomans_land_saps }
	add_to_array = { global.ww1_progression@defensive_trenches = token:barbed_wire }
	add_to_array = { global.ww1_progression@defensive_trenches = token:pillboxes }
	add_to_array = { global.ww1_progression@defensive_trenches = token:sniper_pits }
	add_to_array = { global.ww1_progression@pillboxes = token:fortress_trenches }
	add_to_array = { global.ww1_progression@nomans_land_saps = token:tunnel_mines }
	add_to_array = { global.ww1_progression@basic_MG_defences = token:multiple_MG_nests }
	add_to_array = { global.ww1_progression@multiple_MG_nests = token:enfilade_MG_fire_fields }
	add_to_array = { global.ww1_progression@enfilade_MG_fire_fields = token:infantry_MG_coordination }
	add_to_array = { global.ww1_progression@infantry_MG_coordination = token:MG_support_infantry_doctrine }
	add_to_array = { global.ww1_progression@infantry_MG_coordination = token:Infantry_support_MG_doctrine }
	add_to_array = { global.ww1_progression@ww1_artillery = token:artillery_concentration }
	add_to_array = { global.ww1_progression@artillery_concentration = token:offensive_prep_fire }
	add_to_array = { global.ww1_progression@offensive_prep_fire = token:continuous_fire }
	add_to_array = { global.ww1_progression@continuous_fire = token:harassment_fire }
	add_to_array = { global.ww1_progression@continuous_fire = token:rear_area_bombardment }
	add_to_array = { global.ww1_progression@continuous_fire = token:standing_barrage }
	add_to_array = { global.ww1_progression@harassment_fire = token:rear_area_bombardment }
	add_to_array = { global.ww1_progression@rear_area_bombardment = token:dummy_barrage }
	add_to_array = { global.ww1_progression@standing_barrage = token:box_barrage }
	add_to_array = { global.ww1_progression@box_barrage = token:block_barrage }
	add_to_array = { global.ww1_progression@box_barrage = token:creeping_barrage }
	add_to_array = { global.ww1_progression@box_barrage = token:rolling_barrage }
	add_to_array = { global.ww1_progression@artillery_observers = token:balloon_observers }
	add_to_array = { global.ww1_progression@balloon_observers = token:aircraft_observers }
	add_to_array = { global.ww1_progression@foot_runners = token:carrier_pidgeons }
	add_to_array = { global.ww1_progression@carrier_pidgeons = token:telephone_communications }
	add_to_array = { global.ww1_progression@mobile_doctrines = token:cavalry_charges }
	add_to_array = { global.ww1_progression@mobile_doctrines = token:armor_support }
	add_to_array = { global.ww1_progression@mobile_doctrines = token:armored_car_recon }
	add_to_array = { global.ww1_progression@mobile_doctrines = token:motorcycle_liaison }
	add_to_array = { global.ww1_progression@mobile_doctrines = token:staff_officer_vehicles }
	add_to_array = { global.ww1_progression@cavalry_charges = token:cavalry_dismounting }
	add_to_array = { global.ww1_progression@cavalry_dismounting = token:cavalry_exploitation }
	add_to_array = { global.ww1_progression@armor_support = token:infantry_tank_coordination }
	add_to_array = { global.ww1_progression@infantry_tank_coordination = token:infantry_tank_artillery_coordination }
	add_to_array = { global.ww1_progression@ww1_battlefield_support = token:battlefield_commissions }
	add_to_array = { global.ww1_progression@ww1_battlefield_support = token:weather_reporting }
	add_to_array = { global.ww1_progression@ww1_battlefield_support = token:terrain_mapping }
	add_to_array = { global.ww1_progression@ww1_battlefield_support = token:camouflage_positions }
	add_to_array = { global.ww1_progression@ww1_battlefield_support = token:AA_positions }
	add_to_array = { global.ww1_progression@ww1_battlefield_support = token:first_aid_stations }
	add_to_array = { global.ww1_progression@WW1_air_power = token:WW1_air_survey }
	add_to_array = { global.ww1_progression@WW1_air_survey = token:WW1_air_control }
	add_to_array = { global.ww1_progression@WW1_air_survey = token:WW1_air_bomb }
	add_to_array = { global.ww1_progression@WW1_air_control = token:WW1_air_ground }
	add_to_array = { global.ww1_progression@WW1_air_bomb = token:WW1_air_naval }
}

calculate_global_front_states = { #creates global.front_states array monthly

	every_controlled_state = {
		set_temp_variable = { t1 = PREV }
		if = {
			limit = {
				OR = {
					NOT = { is_fully_controlled_by = PREV }
					any_neighbor_state = {
						CONTROLLER = { has_war_with = var:t1 }
					}
				}
				impassable = no
			}
			
			set_state_flag = { flag = front_state value = 1 days = 31 }
			if = {
				limit = { 
					NOT = {
						is_in_array = { global.front_states = THIS }
					}
				}
				add_to_array = { global.front_states = THIS }
			}
			
		}
	}
}

calculate_local_front_states = { 
	if = {
		limit = {
			check_variable = { has_local_front_states = 0 }
		}
		set_temp_variable = { has_local_front_states = 1 }
			
		clear_temp_array = front_states
		clear_temp_array = front_states_and_nearby
		clear_temp_array = region_checked
		for_each_loop = {
			array = global.front_states
			
			if = {
				limit = {
					check_variable = { num_armies_in_state@var:v > 0 }
				}
				add_to_temp_array = { front_states = v }
				add_to_temp_array = { front_states_and_nearby = v }
				set_temp_variable = { front_state_and_nearby@var:v = 1 }
				
				var:v = {
					if = {
						limit = {
							NOT = { is_in_array = { region_checked = region } }
						}
						add_to_temp_array = { region_checked = region }
						
						set_temp_variable = { region_origin = region }
						for_each_loop = {
							array = global.region_nearby@var:region
							value = nearby_region
							
							for_each_loop = {
								array = global.region_states@var:nearby_region
								value = nearby_state
								
								if = {
									limit = {	
										check_variable = { front_state_and_nearby@var:nearby_state = 0 } 
										var:nearby_state = { 
											CONTROLLER = { is_ally_with = ROOT }
										}
										any_of = {
											array = global.region_states@var:region_origin
											value = v2
											
											var:v2 = { 
												has_state_flag = front_state
												check_variable = { distance_to@var:nearby_state < 100 } 
											}
										}
										NOT = { is_in_array = { front_states_and_nearby = nearby_state } }
									}
									add_to_temp_array = { front_states_and_nearby = nearby_state }
									set_temp_variable = { front_state_and_nearby@var:nearby_state = 1 }
								}
							}
							
						}
						
					}
					
				}
				
			}
			
		}
		
	}
	
	#log = "[?front_states_air_capacity] front_states_air_capacity"
	#log = "[?front_states^num] front_states num"
	#log = "[?front_states_and_nearby^num] front_states_and_nearby num"
	
	#clear_array = fronts
	#clear_array = fronts_nearby
	
	#for_each_loop = {
	#	array = front_states
	#	
	#	#log = "FRONT STATE [?v] [?v.GetName]"
	#}
	#for_each_loop = {
	#	array = front_states_and_nearby
	#	
	#	#log = "FRONT STATE NEARBY [?v] [?v.GetName]"
	#}
}

calculate_local_front_states_nearby = { 
	if = {
		limit = {
			check_variable = { has_local_front_states_nearby = 0 }
		}
		set_temp_variable = { has_local_front_states_nearby = 1 }
			
		clear_temp_array = front_states_nearby
		clear_temp_array = region_checked
		
		for_each_loop = {
			array = global.front_states
			
			if = {
				limit = {
					check_variable = { num_armies_in_state@var:v > 0 }
				}
				set_temp_variable = { front_state_and_nearby@var:v = 1 }
				
				var:v = {
					if = {
						limit = {
							NOT = { is_in_array = { region_checked = region } }
						}
						add_to_temp_array = { region_checked = region }
						
						set_temp_variable = { region_origin = region }
						for_each_loop = {
							array = global.region_nearby@var:region
							value = nearby_region
							
							for_each_loop = {
								array = global.region_states@var:nearby_region
								value = nearby_state
								
								if = {
									limit = {	
										check_variable = { front_state_and_nearby@var:nearby_state = 0 } 
										var:nearby_state = { 
											CONTROLLER = { is_ally_with = ROOT }
										}
										any_of = {
											array = global.region_states@var:region_origin
											value = v2
											
											var:v2 = { 
												has_state_flag = front_state
												check_variable = { distance_to@var:nearby_state < 100 } 
											}
										}
										NOT = { is_in_array = { front_states_nearby = nearby_state } }
									}
									add_to_temp_array = { front_states_nearby = nearby_state }
									set_temp_variable = { front_state_and_nearby@var:nearby_state = 1 }
								}
							}
							
						}
						
					}
					
				}
				
			}
			
		}
		
	}
	
	#log = "[?front_states_air_capacity] front_states_air_capacity"
	#log = "[?front_states^num] front_states num"
	#log = "[?front_states_and_nearby^num] front_states_and_nearby num"
	
	#clear_array = fronts
	#clear_array = fronts_nearby
	
	#for_each_loop = {
	#	array = front_states_and_nearby
	#	
	#	#log = "FRONT STATE NEARBY [?v] [?v.GetName]"
	#}
}

calculate_front_area_for_ai_airbase = {
	if = {
		limit = {
			check_variable = { has_local_front_states = 0 }
			check_variable = { has_local_front_regions = 0 }
		}
		ai_scripted_air_base_states = yes
		set_temp_variable = { has_local_front_states = 1 }
		set_temp_variable = { has_local_front_regions = 1 }
			
		set_temp_variable = { front_states_air_capacity = 0 }
		set_temp_variable = { front_states_nearby_air_capacity = 0 }
	
		for_each_loop = {
			array = ai_airbase_state
			
			var:v = {
				check_scripted_airbase_state = yes
			}
			
		}
		for_each_loop = {
			array = global.front_states
			
			if = {
				limit = {
					check_variable = { num_armies_in_state@var:v > 0 }
				}
				
				var:v = {
					check_airbase_state = yes
				}
					
			}
			
		}
		
	}
	
	for_each_loop = {
		array = front_regions
		
		multiply_temp_variable = { front_region_air_capacity@var:v = 100 }
		set_temp_variable = { airbase_filled@var:v = front_region_planes@var:v }
		divide_temp_variable = { airbase_filled@var:v = front_region_air_capacity@var:v }
		clamp_variable = { var = airbase_filled@var:v max = 2 }
		#log = "[?v] REGION ID | Capacity: [?front_region_air_capacity@var:v] | Deployed: [?front_region_planes@var:v] ---> airbase_filled: [?airbase_filled@var:v|%]	"
	}
}

check_airbase_state = {
	if = {
		limit = {
			NOT = { is_in_array = { front_regions = region } }
		}
		add_to_temp_array = { front_regions = region }
		
		set_temp_variable = { region_origin = region }
		for_each_loop = {
			array = global.region_nearby@var:region
			value = nearby_region
			
			set_temp_variable = { reg = nearby_region }
			PREV = { set_temp_variable = { front_region_planes@var:nearby_region = mtth:num_deployed_planes_in_region } }
		
			#log = "[?front_region_planes@var:nearby_region] FRONT REGION PLANES FOR [?nearby_region]"
			for_each_loop = {
				array = global.region_states@var:nearby_region
				value = nearby_state
				
				if = {
					limit = {	

						var:nearby_state = { 
							CONTROLLER = { is_ally_with = ROOT }
													
							NOT = { is_in_array = { front_states_and_nearby = nearby_state } }
							
							add_to_temp_variable = { front_region_air_capacity@var:nearby_region = building_level@air_base }
							
							free_building_slots = { building = air_base size > 0 include_locked = no }
							
							OR = {
								has_state_flag = front_state
								any_of = {
									array = global.region_states@var:region_origin
									value = v2
									var:v2 = { 
										has_state_flag = front_state
										check_variable = { distance_to@var:nearby_state < ai_airbase_max_front_distance } 
									}
								}
							}
							
							if = { #get SHORTEST distance to front
								limit = {
									NOT = { has_state_flag = front_state }
								}
								set_temp_variable = { shortest_front_distance@var:nearby_state = ai_airbase_max_front_distance }
								all_of = {
									array = global.region_states@var:region_origin
									value = v2
									
									var:v2 = { 
										#log = "SHORTEST DISTANCE [?distance_to@var:nearby_state] [THIS.GetName]"
										if = {
											limit = {
												has_state_flag = front_state
												check_variable = { distance_to@var:nearby_state < shortest_front_distance@var:nearby_state }
											}
											#log = "[?distance_to@var:nearby_state] distance_to@var:nearby_state | [?shortest_front_distance@var:nearby_state] shortest_front_distance@var:nearby_state"
											set_temp_variable = { shortest_front_distance@var:nearby_state = distance_to@var:nearby_state }
										}
									}
								}
							}
								
							if = {
								limit = {
									NOT = { is_in_array = { front_regions = region } }
								}
								add_to_temp_array = { front_regions = region }
							}
								
						}
					}
					add_to_temp_array = { front_states_and_nearby = nearby_state }
					
				}
			}
			
		}
	}
}
check_scripted_airbase_state = {
	if = {
		limit = {
			NOT = { is_in_array = { front_regions = region } }
		}
		add_to_temp_array = { front_regions = region }
		
		
		set_temp_variable = { reg = region }
		PREV = { set_temp_variable = { front_region_planes@var:nearby_region = mtth:num_deployed_planes_in_region } }
		
		if = {
			limit = {	

				var:v = { 
					CONTROLLER = { is_ally_with = ROOT }
											
					NOT = { is_in_array = { front_states_and_nearby = v } }
					
					add_to_temp_variable = { front_region_air_capacity@var:nearby_region = building_level@air_base }
					
					free_building_slots = { building = air_base size > 0 include_locked = no }
					
				}
			}
			add_to_temp_array = { front_states_and_nearby = v }
			
		}
	}
}

calculate_local_front_regions = {
	if = {
		limit = {
			check_variable = { has_local_front_regions = 0 }
		}
		set_temp_variable = { has_local_front_regions = 1 }
		
		for_each_loop = {
			array = global.front_states
			
			if = {
				limit = {
					check_variable = { num_armies_in_state@var:v > 0 }
				}
				var:v = {
					if = {
						limit = {
							NOT = { is_in_array = { front_regions = region } }
						}
						add_to_temp_array = { front_regions = region }
						
					}
				}
						
			}
			
		}
		
	}
}
clamp_army_org_factor_min = {
	if = {
		limit = {
			set_temp_variable = { t = modifier@army_org_factor } #-1.10
			subtract_from_temp_variable = { t = min_army_org_factor_offset } #0.15
			
			check_variable = { t < -0.95 }
		}
		
		set_variable = { min_army_org_factor_offset = -0.95 }
		subtract_from_variable = { min_army_org_factor_offset = t }
		
		if = {
			limit = {
				NOT = { has_dynamic_modifier = { modifier = min_army_org } }
			}
			add_dynamic_modifier = { modifier = min_army_org }
		}
	}
	else_if = {
		limit = { has_dynamic_modifier = { modifier = min_army_org } }
		clear_variable = min_army_org_factor_offset
	}
}

assign_vanilla_DLC_portraits = {
	if = {
		limit = {
			tag = BUL
		}
		if = {
			limit = { 
				has_dlc = "Battle for the Bosporus"
			}
			set_portraits = {
				character = BUL_theodosi_daskalov
				army = { 
					small = GFX_idea_bul_theodosi_daskalov 
				}
			}
			
			set_portraits = {
				character = BUL_nikola_hadzipetkov
				army = {
					small = "GFX_idea_bul_nikola_hadzipetkov"
					large = "GFX_portrait_bul_nikola_hadzipetkov"
				}
			}
			
			set_portraits = {
				character = BUL_asen_nikolov
				army = {
					large = "GFX_portrait_bul_asen_nikolov"
					small = GFX_portrait_BUL_asen_nikolov_small
				}
			}
			
			set_portraits = {
				character = BUL_stoyan_stoyanov
				army = {
					small = "GFX_idea_bul_stoyan_stoyanov"
				}
			}
			
			set_portraits = {
				character = BUL_kiril_dimitrov_yanchulev
				army = {
					small = "GFX_idea_bul_kiril_yanchulev"
				}
			}
			
			set_portraits = {
				character = BUL_kiril_dimitrov_yanchulev
				army = {
					small = "GFX_idea_bul_kiril_yanchulev"
				}
			}
			
			set_portraits = {
				character = BUL_atanas_zhilkov
				army = {
					small = "GFX_idea_bul_atanas_zhilkov"
				}
			}
		}
	}
	
	else_if = {
		limit = {
			tag = CHI
		}
		if = {
			limit = { 
				has_dlc = "Waking the Tiger"
			}
			set_portraits = {
				character = CHI_dai_li
				army = {
					small="GFX_idea_CHI_dai_li"
				}
			}
		}
	}
	else_if = {
		limit = {
			tag = HUN
		}
		if = {
			limit = { 
				has_dlc = "Death or Dishonor"
			}
			set_portraits = {
				character = HUN_gusztav_gratz
				army = {
					small="GFX_idea_HUN_gusztav_gratz"
				}
			}
			
			set_portraits = {
				character = HUN_regent_miklos_horthy
				navy = { 
					large = "GFX_Portrait_hungary_miklos_horthy_admiral"
					small = "gfx/interface/ideas/idea_HUN_miklos_horthy_admiral.dds"
				}
				civilian={
					large="gfx/leaders/HUN/Portrait_Hungary_Miklos_Horthy.dds"
				}
			}
		}
	}
	
	else_if = {
		limit = {
			tag = TUR
		}
		if = {
			limit = { 
				has_dlc = "Battle for the Bosporus"
			}
			set_portraits = {
				character = TUR_kazim_ozalp
				army = { small = GFX_idea_tur_kazim_ozalp }
			}
			
		}
	}
	
	else_if = {
		limit = {
			tag = SPR
		}
		if = {
			limit = { 
				has_dlc = "La Resistance"
			}
			set_portraits = {
				character = SPR_francisco_largo_caballero
				army = { 
					small = GFX_idea_SPR_francisco_largo_caballero 
				}
				civilian = {
					large = "gfx/leaders/SPR/Portrait_Spain_Caballero.dds"
				}
			}
			
			set_portraits = {
				character = SPR_augusto_barcia_trelles
				army = { 
					small = GFX_idea_SPR_augusto_barcia_trelles 
				}
			}
			
			set_portraits = {
				character = SPR_diego_martinez_barrio
				army = { 
					small = GFX_idea_SPR_diego_martinez_barrio 
				}
			}
			
			set_portraits = {
				character = SPR_nicolas_molero
				army = { 
					small = GFX_idea_SPR_nicolas_molero 
				}
			}
			
			set_portraits = {
				character = SPR_vicente_rojo_lluch
				army = { 
					large = "GFX_portrait_SPR_vicente_rojo_lluch"
					small = "gfx/interface/ideas/idea_SPR_vicente_rojo_lluch.dds"
				}
			}
			
			set_portraits = {
				character = SPR_jose_asensio_torrado
				army = { 
					large = "GFX_portrait_SPR_jose_asensio_torrado"
					small = "gfx/interface/ideas/idea_SPR_jose_asensio_torrado.dds"
				}
			}
			
			set_portraits = {
				character = SPR_andres_garcia_calle
				army = { 
					small = "GFX_idea_SPR_andres_garcia_la_calle"
				}
			}
			
			set_portraits = {
				character = SPR_louis_gonzalez_ubieta
				army = { 
					small = "GFX_idea_SPR_luis_gonzalez_ubieta"
				}
			}
			
			set_portraits = {
				character = SPR_jose_miaja
				army = { 
					large = "GFX_portrait_SPR_jose_miaja"
					small = "gfx/interface/ideas/idea_SPR_jose_miaja.dds"
				}
			}
			
			set_portraits = {
				character = SPR_miguel_buiza_femandez_palacios
				army = {
					large = "GFX_portrait_SPR_miguel_buiza_fernandez_palacios"
					small = "gfx/interface/ideas/idea_SPR_miguel_buiza_fernandez_palacios.dds"
				}
			}
			
			set_portraits = {
				character = SPA_emilio_mola
				army = {
					large = GFX_portrait_SPA_emilio_mola
					small = GFX_portrait_SPA_emilio_mola_small
				}
			}
			
			set_portraits = {
				character = SPA_jose_enrique_varela
				army = {
					large = "GFX_portrait_SPA_jose_enrique_varela"
					small = "gfx/interface/ideas/idea_spa_jose_enrique_varela.dds"
				}
			}
			
			set_portraits = {
				character = SPA_miguel_cabanellas
				army = {
					large = "GFX_portrait_SPA_miguel_cabanellas"
					small = "gfx/interface/ideas/idea_spa_miguel_cabanellas.dds"
				}
			}
			
			set_portraits = {
				character = SPA_juan_yague
				army = {
					large = "GFX_portrait_SPA_juan_yague"
					small = "gfx/interface/ideas/idea_spa_juan_yague.dds"
				}
			}
			
			set_portraits = {
				character = SPA_luis_carrero_blanco
				army = {
					large = "GFX_portrait_SPA_luis_carrero_blanco"
					small = "gfx/interface/ideas/idea_spa_luis_carrero_blanco.dds"
				}
			}
			
			set_portraits = {
				character = SPA_agustin_munoz_grandes
				army = {
					small = "GFX_idea_SPA_agustin_munoz_grandes"
					large = "GFX_portrait_SPA_augustin_muynoz_grandes"
				}
			}
			
			set_portraits = {
				character = SPA_agustin_munoz_grandes
				army = {
					small = "GFX_idea_SPA_joaquin_garcia_morato"
				}
			}
		}
	}
	
	else_if = {
		limit = {
			tag = POR
		}
		if = {
			limit = { 
				has_dlc = "La Resistance"
			}
			set_portraits = {
				character = POR_jose_norton_de_matos
				army = {
					small = GFX_idea_por_jose_norton_de_matos
				}
			}
			set_portraits = {
				character = POR_augusto_de_vasconcelos
				army = {
					small = GFX_idea_por_augusto_de_vasconcelos
				}
			}
		}
	}
	
}

update_global_resource = {
	for_each_loop = {
		array = global.resources
		
		add_to_variable = { global.resource_export@var:v = resource_exported@var:v }
		add_to_variable = { global.resource_import@var:v = resource_imported@var:v }
	}
}


settings_startup_configuration = {
	if = {
		limit = {
			#NOT = {
			#	USA = { is_ai = yes }
			#	ENG = { is_ai = yes }
			#}
		}
		set_variable = { global.setting_status@ai_forced_d_day_enable = 2 }
		CIV = { add_ideas = ai_forced_d_day_enable }
		
	}
	
	set_variable = { global.setting_status@ai_forced_d_day_strength = token:ai_forced_d_day_strength_med }
	set_variable = { global.setting_status@ai_forced_d_day_date = token:ai_forced_d_day_date_1944_6 }
}

d_settings_start = {
	log = "Settings initialized"
	
	for_each_loop = {
		array = global.settings
		
		clear_array = global.options@var:v
	}
	
	clear_array = global.settings
	clear_array = global.settings_header
	
	## SETTINGS
	
	add_to_array = { global.settings = token:header_ai_forced_d_day }
		add_to_array = { global.settings = token:ai_forced_d_day_enable }
		add_to_array = { global.settings = token:ai_forced_d_day_strength }
			add_to_array = { global.options@ai_forced_d_day_strength = token:ai_forced_d_day_strength_low }
			add_to_array = { global.options@ai_forced_d_day_strength = token:ai_forced_d_day_strength_med }
			add_to_array = { global.options@ai_forced_d_day_strength = token:ai_forced_d_day_strength_high }
			#add_to_array = { global.options@ai_forced_d_day_strength = token:ai_forced_d_day_strength_extreme }
		add_to_array = { global.settings = token:ai_forced_d_day_date }
			add_to_array = { global.options@ai_forced_d_day_date = token:ai_forced_d_day_date_1942_1 }
			add_to_array = { global.options@ai_forced_d_day_date = token:ai_forced_d_day_date_1942_6 }
			add_to_array = { global.options@ai_forced_d_day_date = token:ai_forced_d_day_date_1943_1 }
			add_to_array = { global.options@ai_forced_d_day_date = token:ai_forced_d_day_date_1943_6 }
			add_to_array = { global.options@ai_forced_d_day_date = token:ai_forced_d_day_date_1944_1 }
			add_to_array = { global.options@ai_forced_d_day_date = token:ai_forced_d_day_date_1944_6 }
			add_to_array = { global.options@ai_forced_d_day_date = token:ai_forced_d_day_date_1945_1 }
			
		#add_to_array = { global.settings = token:ai_forced_d_day_tries }
		#	add_to_array = { global.options@ai_forced_d_day_tries = token:ai_forced_d_day_tries_1 }
		#	add_to_array = { global.options@ai_forced_d_day_tries = token:ai_forced_d_day_tries_2 }
		#	add_to_array = { global.options@ai_forced_d_day_tries = token:ai_forced_d_day_tries_3 }
		#	add_to_array = { global.options@ai_forced_d_day_tries = token:ai_forced_d_day_tries_infinite }
			
		
	## HEADERS - need to be in order!!!
	
	add_to_array = { global.settings_header = token:header_ai_forced_d_day }
	
	
	
	clear_array = settings
	for_each_loop = {
		array = global.settings
		
		add_to_array = { settings = v }
	}
}

d_alert_test = {
	log = "alert test"
	#clear_array = alerts
	
	add_to_array = { alerts = token:alert_energy_lack_resource }
	add_to_array = { alerts = token:alert_energy_lack_capacity }
	add_to_array = { alerts = token:alert_food_deficit }
	add_to_array = { alerts = token:alert_fuel_deficit }
	#add_to_array = { alerts = token:alert_mobilization }
	#add_to_array = { alerts = token:alert_equipment_intro }
	
	add_to_array = { alerts = token:alert_fuel_deficit }
}


alert_food_deficit = {
	custom_effect_tooltip = LACK_OF_FOOD_DELAYED
	custom_effect_tooltip = alert_food_deficit_desc
	ui_lack_of_food = yes
}
alert_fuel_deficit = {
	custom_effect_tooltip = LACK_OF_FUEL_DELAYED
	custom_effect_tooltip = alert_fuel_deficit_desc
	ui_lack_of_fuel = yes
}
alert_energy_lack_capacity = {
	custom_effect_tooltip = alert_energy_lack_capacity_desc
	
	set_temp_variable = { t = 120 }
	
	set_temp_variable = { factor = modifier@energy_production_factor }
	add_to_temp_variable = { factor = 1 }
	multiply_temp_variable = { t = factor }
	
	set_temp_variable = { need = energy_cost }
	subtract_from_temp_variable = { need = max_energy_production }
	
	divide_temp_variable = { need = t }
	clamp_temp_variable = { var = need min = 1 }
	
	custom_effect_tooltip = alert_energy_lack_capacity_need
	
	custom_effect_tooltip = alert_energy_lack_capacity_penalties
	
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_civilian = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_civilian
	}
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_military = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_military
	}
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_naval = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_naval
	}
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_conversion = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_refinery
	}
}

alert_energy_lack_resource = {
	custom_effect_tooltip = alert_energy_lack_resource_desc
	if = {
		limit = {
			check_variable = { energy_input@coal < energy_input_real@coal }
		}
		custom_effect_tooltip = alert_energy_lack_resource_coal
	}
	if = {
		limit = {
			fuel_ratio < 0.05
			check_variable = { energy_input@fuel > 0 }
		}
		set_temp_variable = { req = energy_input@fuel }
		multiply_temp_variable = { req = 24 }
		custom_effect_tooltip = alert_energy_lack_resource_fuel
	}
	custom_effect_tooltip = alert_energy_lack_capacity_penalties
	
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_civilian = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_civilian
	}
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_military = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_military
	}
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_naval = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_naval
	}
	if = {
		limit = {
			NOT = { check_variable = { lack_of_energy@energy_conversion = 0 } }
		}
		custom_effect_tooltip = alert_energy_lack_refinery
	}
}











