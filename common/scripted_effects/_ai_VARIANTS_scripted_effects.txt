
@AI_XP_TO_CREATE_LAND_VARIANT = 100 

@AI_XP_USE_FOR_LAND_UPGRADES = 1.0 #how much of its available XP ai is able to spend per update. note that it can go into debt slightly since the cost gets checked after an upgrade is added to an eq.
@AI_XP_USE_FOR_AIR_UPGRADES = 1.0

@AI_MIN_LAND_UPGRADES_PER_VARIANT = 3 #per update
@AI_MIN_AIR_UPGRADES_PER_VARIANT = 3

@AI_UPGRADE_LAND_XP_COST = 15 
@AI_UPGRADE_LAND_XP_RAMP_COST = 10 
@AI_UPGRADE_AIR_XP_COST = 15 
@AI_UPGRADE_AIR_XP_RAMP_COST = 10 

@AI_FIELD_STRENGTH_TRIGGER = 0.95 #how much field strength the equipment needs before designing a variant of it

@AI_MIN_SCORE_FOR_VARIANT = 100 #how much score an equipment needs to create a variant of it
@AI_CONTINUE_VARIANT_MULT = 1.5 #this multiplies score if we already invested points into an equipment

################################################################

@AI_ARTILLERY_EQUIPMENT_BASE = 40
@AI_ARTILLERY_EQUIPMENT_WEIGHT = 0.4

@AI_MED_ARTILLERY_EQUIPMENT_BASE = 50 
@AI_MED_ARTILLERY_EQUIPMENT_WEIGHT = 0.6

@AI_HV_ARTILLERY_EQUIPMENT_BASE = 60
@AI_HV_ARTILLERY_EQUIPMENT_WEIGHT = 0.8

@AI_PACK_ARTILLERY_EQUIPMENT_BASE = 50
@AI_PACK_ARTILLERY_EQUIPMENT_WEIGHT = 0.3

@AI_ANTI_TANK_EQUIPMENT_BASE = 10
@AI_ANTI_TANK_EQUIPMENT_WEIGHT = 0.6

@AI_MED_ANTI_TANK_EQUIPMENT_BASE = 20 
@AI_MED_ANTI_TANK_EQUIPMENT_WEIGHT = 0.8 

@AI_HV_ANTI_TANK_EQUIPMENT_BASE = 40 
@AI_HV_ANTI_TANK_EQUIPMENT_WEIGHT = 0.10

@AI_ANTI_TANK_SUPERIOR_NEIGHBOR_ARMOR = 50 #adds this if enemy armor is higher than our piercing
@AI_ANTI_TANK_SUPERIOR_ENEMY_ARMOR = 100 #adds this if enemy armor is higher than our piercing

@AI_ANTI_AIR_EQUIPMENT_BASE = 10 
@AI_ANTI_AIR_EQUIPMENT_WEIGHT = 0.4

@AI_HV_ANTI_AIR_EQUIPMENT_BASE = 10 
@AI_HV_ANTI_AIR_EQUIPMENT_WEIGHT = 0.8 

################################################################

ai_update_equipment_variants = {
	if = {
		limit = {
			check_variable = { army_experience > @AI_XP_TO_CREATE_LAND_VARIANT }
		}
			
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@artillery_equipment }
				
				### CONDITIONS 
				has_tech = artillery1
				
				check_variable = { num_target_equipment_in_armies@artillery_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@artillery_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@artillery_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@artillery_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@artillery_equipment }
			multiply_temp_variable = { score = @AI_ARTILLERY_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_ARTILLERY_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_variable = ai_variant_level@artillery_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:artillery_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@medartillery_equipment }
				
				### CONDITIONS 
				has_tech = medartillery1
				
				check_variable = { num_target_equipment_in_armies@medartillery_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@medartillery_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@medartillery_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@medartillery_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@medartillery_equipment }
			multiply_temp_variable = { score = @AI_MED_ARTILLERY_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_MED_ARTILLERY_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_variable = ai_variant_level@medartillery_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:medartillery_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@Hvartillery_equipment }
				
				### CONDITIONS 
				has_tech = Hvartillery1
				
				check_variable = { num_target_equipment_in_armies@Hvartillery_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@Hvartillery_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@Hvartillery_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@Hvartillery_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@Hvartillery_equipment }
			multiply_temp_variable = { score = @AI_HV_ARTILLERY_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_HV_ARTILLERY_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_variable = ai_variant_level@Hvartillery_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:Hvartillery_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@mountain_artillery_equipment }
				
				### CONDITIONS 
				has_tech = gw_artillery
				
				check_variable = { num_target_equipment_in_armies@mountain_artillery_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@mountain_artillery_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@mountain_artillery_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@mountain_artillery_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@mountain_artillery_equipment }
			multiply_temp_variable = { score = @AI_PACK_ARTILLERY_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_PACK_ARTILLERY_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_variable = ai_variant_level@mountain_artillery_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:mountain_artillery_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@anti_tank_equipment }
				
				### CONDITIONS 
				has_tech = interwar_antitank
				
				check_variable = { num_target_equipment_in_armies@anti_tank_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@anti_tank_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@anti_tank_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@anti_tank_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@anti_tank_equipment }
			multiply_temp_variable = { score = @AI_ANTI_TANK_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_ANTI_TANK_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_country_flag = ai_superior_enemy_armor }
				add_to_temp_variable = { score = @AI_ANTI_TANK_SUPERIOR_ENEMY_ARMOR }
			}
			if = { limit = { has_country_flag = ai_superior_neighbor_armor }
				add_to_temp_variable = { score = @AI_ANTI_TANK_SUPERIOR_NEIGHBOR_ARMOR }
			}
			if = { limit = { has_variable = ai_variant_level@anti_tank_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:anti_tank_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@medanti_tank_equipment }
				
				### CONDITIONS 
				has_tech = antitank2
				
				check_variable = { num_target_equipment_in_armies@medanti_tank_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@medanti_tank_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@medanti_tank_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@medanti_tank_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@medanti_tank_equipment }
			multiply_temp_variable = { score = @AI_MED_ANTI_TANK_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_MED_ANTI_TANK_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_country_flag = ai_superior_enemy_armor }
				add_to_temp_variable = { score = @AI_ANTI_TANK_SUPERIOR_ENEMY_ARMOR }
			}
			if = { limit = { has_country_flag = ai_superior_neighbor_armor }
				add_to_temp_variable = { score = @AI_ANTI_TANK_SUPERIOR_NEIGHBOR_ARMOR }
			}
			if = { limit = { has_variable = ai_variant_level@medanti_tank_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:medanti_tank_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@HVanti_tank_equipment }
				
				### CONDITIONS 
				has_tech = HVantitank1
				
				check_variable = { num_target_equipment_in_armies@HVanti_tank_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@HVanti_tank_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@HVanti_tank_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@HVanti_tank_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@HVanti_tank_equipment }
			multiply_temp_variable = { score = @AI_HV_ANTI_TANK_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_HV_ANTI_TANK_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_country_flag = ai_superior_enemy_armor }
				add_to_temp_variable = { score = @AI_ANTI_TANK_SUPERIOR_ENEMY_ARMOR }
			}
			if = { limit = { has_country_flag = ai_superior_neighbor_armor }
				add_to_temp_variable = { score = @AI_ANTI_TANK_SUPERIOR_NEIGHBOR_ARMOR }
			}
			if = { limit = { has_variable = ai_variant_level@HVanti_tank_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:HVanti_tank_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@anti_air_equipment }
				
				### CONDITIONS 
				has_tech = interwar_antiair
				
				check_variable = { num_target_equipment_in_armies@anti_air_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@anti_air_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@anti_air_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@anti_air_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@anti_air_equipment }
			multiply_temp_variable = { score = @AI_ANTI_AIR_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_ANTI_AIR_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_variable = ai_variant_level@anti_air_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:anti_air_equipment }
			add_to_temp_array = { variant_score = score }
		}
		if = {
			limit = {
				NOT = { has_country_flag = ai_variant@HVanti_air_equipment }
				
				### CONDITIONS
				has_tech = HVantiair2 
				
				check_variable = { num_target_equipment_in_armies@HVanti_air_equipment > 0 }
				set_temp_variable = { equipment_supplied = num_equipment_in_armies@HVanti_air_equipment }
				divide_temp_variable = { equipment_supplied = num_target_equipment_in_armies@HVanti_air_equipment }
				check_variable = { equipment_supplied > @AI_FIELD_STRENGTH_TRIGGER }
			}
				
			set_temp_variable = { score = num_equipment@HVanti_air_equipment }
			add_to_temp_variable = { score = num_equipment_in_armies@HVanti_air_equipment }
			multiply_temp_variable = { score = @AI_HV_ANTI_AIR_EQUIPMENT_WEIGHT }
			add_to_temp_variable = { score = @AI_HV_ANTI_AIR_EQUIPMENT_BASE }
			multiply_temp_variable = { score = equipment_supplied }
			if = { limit = { has_variable = ai_variant_level@HVanti_air_equipment }
				multiply_temp_variable = { score = @AI_CONTINUE_VARIANT_MULT }
			}
			
			add_to_temp_array = { variant_equipment = token:HVanti_air_equipment }
			add_to_temp_array = { variant_score = score }
		}
		
		find_highest_in_array = {
			array = variant_score 
			index = position
		}
		#log= "[?variant_equipment^position.GetTokenKey] Equipment"
		#log= "[?variant_score^position] Score"
		
		if = {
			limit = {
				check_variable = { variant_score^position > @AI_MIN_SCORE_FOR_VARIANT }
			}
			
			meta_effect = {
				text = {
					ai_create_variant/[X] = yes
				}
				X = "[?variant_equipment^position.GetTokenKey]"
			}
		}
	}
}
ai_create_variant/artillery_equipment = { #variant_target^num = 5
	if = { limit = { has_tech = artillery6 }
		set_temp_variable = { selected_variant = token:artillery_equipment_4 }
	}
	else_if = { limit = { has_tech = artillery5 }
		set_temp_variable = { selected_variant = token:artillery_equipment_3 }
	}
	else_if = { limit = { has_tech = artillery2 }
		set_temp_variable = { selected_variant = token:artillery_equipment_2 }
	}
	else_if = { limit = { has_tech = artillery1 }
		set_temp_variable = { selected_variant = token:artillery_equipment_1 }
	}
	else = {
		set_temp_variable = { selected_variant = token:artillery_equipment_0 }
	}
	
	set_temp_variable = { variant_archetype = token:artillery_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@artillery_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade }
	
	add_to_temp_array = { variant_target = token:range_finder }
	add_to_temp_array = { variant_target = token:range_finder }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes	
	ai_create_equipment_variant = yes 
}
ai_create_variant/mountain_artillery_equipment = { #variant_target^num = 6
	if = { limit = { has_tech = mntartillery1 }
		set_temp_variable = { selected_variant = token:mountain_artillery_equipment_1 }
	}
	else = {
		set_temp_variable = { selected_variant = token:mountain_artillery_equipment_0 }
	}
	
	set_temp_variable = { variant_archetype = token:mountain_artillery_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@mountain_artillery_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade }
	
	add_to_temp_array = { variant_target = token:range_finder }
	add_to_temp_array = { variant_target = token:range_finder }
	add_to_temp_array = { variant_target = token:range_finder }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes
	ai_create_equipment_variant = yes 
}
ai_create_variant/medartillery_equipment = { #variant_target^num = 4
	if = { limit = { has_tech = medartillery6 }
		set_temp_variable = { selected_variant = token:medartillery_equipment_4 }
	}
	else_if = { limit = { has_tech = medartillery5 }
		set_temp_variable = { selected_variant = token:medartillery_equipment_3 }
	}
	else_if = { limit = { has_tech = medartillery2 }
		set_temp_variable = { selected_variant = token:medartillery_equipment_2 }
	}
	else_if = { limit = { has_tech = medartillery1 }
		set_temp_variable = { selected_variant = token:medartillery_equipment_1 }
	}
	else = {
		set_temp_variable = { selected_variant = token:medartillery_equipment_0 }
	}
	
	set_temp_variable = { variant_archetype = token:medartillery_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@medartillery_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade_hv }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade_hv }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade_hv }
	
	add_to_temp_array = { variant_target = token:range_finder_hv }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes
	ai_create_equipment_variant = yes 
}
ai_create_variant/Hvartillery_equipment = { #variant_target^num = 3
	if = { limit = { has_tech = Hvartillery6 }
		set_temp_variable = { selected_variant = token:Hvartillery_equipment_4 }
	}
	else_if = { limit = { has_tech = Hvartillery5 }
		set_temp_variable = { selected_variant = token:Hvartillery_equipment_3 }
	}
	else_if = { limit = { has_tech = Hvartillery2 }
		set_temp_variable = { selected_variant = token:Hvartillery_equipment_2 }
	}
	else_if = { limit = { has_tech = Hvartillery1 }
		set_temp_variable = { selected_variant = token:Hvartillery_equipment_1 }
	}
	else = {
		set_temp_variable = { selected_variant = token:Hvartillery_equipment_0 }
	}
	
	set_temp_variable = { variant_archetype = token:Hvartillery_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@Hvartillery_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade_hv }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade_hv }
	add_to_temp_array = { variant_target = token:artillery_carriage_upgrade_hv }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes	
	ai_create_equipment_variant = yes 
}
ai_create_variant/anti_tank_equipment = { #variant_target^num = 3
	if = { limit = { has_tech = improved_antitank }
		set_temp_variable = { selected_variant = token:anti_tank_equipment_2 }
	}
	else_if = { limit = { has_tech = interwar_antitank }
		set_temp_variable = { selected_variant = token:anti_tank_equipment_1 }
	}
	
	set_temp_variable = { variant_archetype = token:anti_tank_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@anti_tank_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes	
	ai_create_equipment_variant = yes 
}
ai_create_variant/medanti_tank_equipment = { #variant_target^num = 3
	if = { limit = { has_tech = antitank5 }
		set_temp_variable = { selected_variant = token:medanti_tank_equipment_2 }
	}
	else_if = { limit = { has_tech = antitank2 }
		set_temp_variable = { selected_variant = token:medanti_tank_equipment_1 }
	}
	
	set_temp_variable = { variant_archetype = token:medanti_tank_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@medanti_tank_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes
	ai_create_equipment_variant = yes 
}
ai_create_variant/HVanti_tank_equipment = { #variant_target^num = 3
	if = { limit = { has_tech = HVantitank4 }
		set_temp_variable = { selected_variant = token:HVanti_tank_equipment_2 }
	}
	else_if = { limit = { has_tech = HVantitank1 }
		set_temp_variable = { selected_variant = token:HVanti_tank_equipment_1 }
	}
	
	set_temp_variable = { variant_archetype = token:HVanti_tank_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@HVanti_tank_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	add_to_temp_array = { variant_target = token:AT_gun_sights }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes
	ai_create_equipment_variant = yes 
}
ai_create_variant/anti_air_equipment = { #variant_target^num = 4
	if = { limit = { has_tech = antiair5 }
		set_temp_variable = { selected_variant = token:anti_air_equipment_3 }
	}
	else_if = { limit = { has_tech = antiair2 }
		set_temp_variable = { selected_variant = token:anti_air_equipment_2 }
	}
	else_if = { limit = { has_tech = interwar_antiair }
		set_temp_variable = { selected_variant = token:anti_air_equipment_1 }
	}
	
	set_temp_variable = { variant_archetype = token:anti_air_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@anti_air_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:AA_shell_fuse }
	
	add_to_temp_array = { variant_target = token:AA_gun_sights }
	add_to_temp_array = { variant_target = token:AA_gun_sights }
	add_to_temp_array = { variant_target = token:AA_gun_sights }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes
	ai_create_equipment_variant = yes 
}
ai_create_variant/HVanti_air_equipment = { #variant_target^num = 4
	if = { limit = { has_tech = HVantiair5 }
		set_temp_variable = { selected_variant = token:HVanti_air_equipment_3 }
	}
	else_if = { limit = { has_tech = HVantiair2 }
		set_temp_variable = { selected_variant = token:HVanti_air_equipment_2 }
	}
	
	set_temp_variable = { variant_archetype = token:HVanti_air_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@HVanti_air_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:AA_shell_fuse }
	
	add_to_temp_array = { variant_target = token:AA_gun_sights }
	add_to_temp_array = { variant_target = token:AA_gun_sights }
	add_to_temp_array = { variant_target = token:AA_gun_sights }
	
	ai_get_max_allowed_land_upgrades = yes 
	ai_design_equipment_variant = yes
	ai_create_equipment_variant = yes 
}

##########################################################################################

d_ai_create_variant/alt_fighter_equipment = {
	set_temp_variable = { target_upgrade = 4 }
	ai_create_variant/fighter_alt_equipment = yes 
}

@plane_bubble_canopy_upgrade = 0.02
@plane_engine_upgrade = 0.01
@plane_drop_tank_upgrade = 0.01
@plane_gun_upgrade = 0.01

ai_create_variant/fighter_equipment = { #variant_target^num = 8
	ai_get_newest_fighter_equipment = yes 
	
	set_temp_variable = { variant_archetype = token:fighter_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@fighter_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:plane_bubble_canopy_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_drop_tank_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	
	### variant IC cost - order needs to be the same order as above, the index being the first time the upgrade gets added to variant_target
	add_to_temp_array = { variant_cost = @plane_bubble_canopy_upgrade }
	add_to_temp_array = { variant_cost = @plane_engine_upgrade }
	add_to_temp_array = { variant_cost = @plane_drop_tank_upgrade }
	add_to_temp_array = { variant_cost = @plane_gun_upgrade }
	
	ai_get_max_allowed_air_upgrades = yes 
	ai_design_equipment_variant = yes
		
	ai_create_air_equipment_variant = yes 
}
ai_create_variant/mr_fighter_equipment = { #variant_target^num = 8
	ai_get_newest_mr_fighter_equipment = yes 
	
	set_temp_variable = { variant_archetype = token:mr_fighter_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@mr_fighter_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:plane_bubble_canopy_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_drop_tank_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	
	### variant IC cost - order needs to be the same order as above, the index being the first time the upgrade gets added to variant_target
	add_to_temp_array = { variant_cost = @plane_bubble_canopy_upgrade }
	add_to_temp_array = { variant_cost = @plane_engine_upgrade }
	add_to_temp_array = { variant_cost = @plane_drop_tank_upgrade }
	add_to_temp_array = { variant_cost = @plane_gun_upgrade }
	
	ai_get_max_allowed_air_upgrades = yes 
	ai_design_equipment_variant = yes
		
	#add_to_temp_variable = { ic_cost = 10 } #edit this to give the plane an IC bonus. 1 = 1%
	ai_create_air_equipment_variant = yes 
}
ai_create_variant/fighter_alt_equipment = { #variant_target^num = 8
	ai_get_newest_alt_fighter_equipment = yes 
	
	set_temp_variable = { variant_archetype = token:fighter_alt_equipment }
	set_temp_variable = { num_upgrades = ai_variant_level@fighter_alt_equipment }

	### target variant - order matters
	add_to_temp_array = { variant_target = token:plane_bubble_canopy_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	add_to_temp_array = { variant_target = token:plane_engine_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_drop_tank_upgrade }
	
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	add_to_temp_array = { variant_target = token:plane_gun_upgrade }
	
	### variant IC cost - order needs to be the same order as above, the index being the first time the upgrade gets added to variant_target
	add_to_temp_array = { variant_cost = @plane_bubble_canopy_upgrade }
	add_to_temp_array = { variant_cost = @plane_engine_upgrade }
	add_to_temp_array = { variant_cost = @plane_drop_tank_upgrade }
	add_to_temp_array = { variant_cost = @plane_gun_upgrade }
	
	ai_get_max_allowed_air_upgrades = yes 
	ai_design_equipment_variant = yes
		
	#add_to_temp_variable = { ic_cost = 10 } #edit this to give the plane an IC bonus. 1 = 1%
	ai_create_air_equipment_variant = yes 
}

ai_get_newest_fighter_equipment = {
	if = {
		limit = {
			tag = GER 
		}
		
		if = {
			limit = {
				has_tech = tech_me_109_late_fighter_equipment_5
			}
			set_temp_variable = { selected_variant = token:me_109_late_fighter_equipment_5 }
		}
		else_if = {
			limit = {
				has_tech = tech_me_109_late_fighter_equipment_4
			}
			set_temp_variable = { selected_variant = token:me_109_late_fighter_equipment_4 }
		}
		else_if = {
			limit = {
				has_tech = tech_me_109_late_fighter_equipment_3
			}
			set_temp_variable = { selected_variant = token:me_109_late_fighter_equipment_3 }
		}
		else_if = {
			limit = {
				has_tech = tech_me_109_late_fighter_equipment_2
			}
			set_temp_variable = { selected_variant = token:me_109_late_fighter_equipment_2 }
		}
		else_if = {
			limit = {
				has_tech = tech_me_109_late_fighter_equipment_1
			}
			set_temp_variable = { selected_variant = token:me_109_late_fighter_equipment_1 }
		}
		else_if = {
			limit = {
				has_tech = tech_me_109_mid_fighter_equipment_1
			}
			set_temp_variable = { selected_variant = token:me_109_mid_fighter_equipment_1 }
		}
		else_if = {
			limit = {
				has_tech = tech_me_109_early_fighter_equipment_1
			}
			set_temp_variable = { selected_variant = token:me_109_early_fighter_equipment_1 }
		}
		
	}
	else_if = {
		limit = {
			tag = ENG 
		}
		
	}
}
ai_get_newest_mr_fighter_equipment = {
	if = {
		limit = {
			tag = GER 
		}
		
		if = {
			limit = {
				has_tech = tech_fw_190_fighter_equipment_1
			}
			set_temp_variable = { selected_variant = token:fw_190_fighter_equipment_1 }
		}
	}
}
ai_get_newest_alt_fighter_equipment = {
	if = {
		limit = {
			tag = SOV 
		}
		
		if = {
			limit = {
				has_tech = tech_yak_1_equipment_1
			}
			set_temp_variable = { selected_variant = token:yak_1_equipment_1 }
		}
	}
}
###########################################################################

ai_design_equipment_variant = {
	
	if = {
		limit = {
			check_variable = { target_upgrade = 0 }
		}
		#target_upgrade - to what array index the variant to be created gets set at 
		set_temp_variable = { target_upgrade = num_upgrades } #if we already put points into it dont start fresh 
		add_to_temp_variable = { target_upgrade = ai_allowed_upgrades } #how many upgrades we can afford?
	}
	clamp_temp_variable = { var = target_upgrade max = variant_target^num } #upgrade to the target variant
	
	if = { #variant finished
		limit = {
			check_variable = { target_upgrade = variant_target^num }
		}
		clear_variable = ai_variant_level@var:variant_archetype
		meta_effect = {
			text = {
				set_country_flag = ai_variant@[X]
			}
			X = "[?variant_archetype.GetTokenKey]"
		}
	}
	else = {
		set_variable = { ai_variant_level@var:variant_archetype = target_upgrade }
	}
	
	for_each_loop = {
		array = variant_target
		
		#log= "========== NEW ITERATION ======="
		if = {
			limit = {
				NOT = { is_in_array = { variant_upgrade = v } }
			}
			#log= "ADDING NEW UPGRADE"
			#log= "[?v.GetTokenKey] Value for Iteration [?iteration]"
			
			set_temp_variable = { variant_index = variant_upgrade^num }
			
			#log= "[?variant_index] variant_index"
			
			add_to_temp_array = { variant_upgrade = v }
			add_to_temp_array = { variant_upgrade_level = 1 }
			
		}
		else = {
			#log= "IMPROVING UPGRADE"
			set_temp_variable = { t1 = v }
			for_each_loop = {
				array = variant_upgrade 
				break = small_break
				
				if = {
					limit = {
						check_variable = { t1 = v }
					}
					#log= "[?v.GetTokenKey] UPRGADE IMPROVE"
					
					add_to_temp_variable = { variant_upgrade_level^i = 1 }
					#log= "IMPROVED [?variant_upgrade_level^i] variant_upgrade_level^i by ONE"
					set_temp_variable = { small_break = 1 }
				}
			}
		}
				
		add_to_temp_variable = { iteration = 1 }
		#log= "[?iteration] ITERATION"
		
		if = {
			limit = {
				check_variable = { var = iteration value = target_upgrade compare = greater_than_or_equals }
			}
			#log= "[?iteration] ITERATION BREAK"
			set_temp_variable = { break = 1 }
		}
	}
	#log= "==========================="
	#log= "Final Variant Upgrade for [?target_upgrade] Target Upgrades"
	for_each_loop = {
		array = variant_upgrade
		 
		#log= "UPGRADE: [?v.GetTokenKey] LEVEL: [?variant_upgrade_level^i]"
	}
	#log= "==========================="
	#log= "Final Variant Upgrade Cost"
	for_each_loop = {
		array = variant_cost
		 
		if = {
			limit = {
				check_variable = { variant_upgrade^num > i }
			}
			multiply_temp_variable = { v = variant_upgrade_level^i }
			add_to_temp_variable = { ic_cost = v }
		}
		#log= "UPGRADE: [?variant_upgrade^i] COST: [?v]"
	}
	
	multiply_temp_variable = { ic_cost = 100 }
	#log= "AI UPGRADE: [?ic_cost]"
	
}

ai_get_max_allowed_land_upgrades = { #sets ai_allowed_upgrades temp variable
	
	set_temp_variable = { army_xp = army_experience }
	multiply_temp_variable = { army_xp = @AI_XP_USE_FOR_LAND_UPGRADES }

	set_temp_variable = { cost = @AI_UPGRADE_LAND_XP_COST }
	set_temp_variable = { cost_per_step = @AI_UPGRADE_LAND_XP_RAMP_COST }
	
	set_temp_variable = { xp_loop = variant_target^num }
	subtract_from_temp_variable = { xp_loop = num_upgrades }
	
	for_loop_effect = {
		end = xp_loop
			
		set_temp_variable = { old_cost = cost }
		add_to_temp_variable = { num_upgrades = 1 }
		set_temp_variable = { ramp_cost = cost_per_step }
		multiply_temp_variable = { ramp_cost = num_upgrades }
		add_to_temp_variable = { cost = ramp_cost }
		
		if = {
			limit = {
				check_variable = { army_xp > cost }
			}
			add_to_temp_variable = { ai_allowed_upgrades = 1 }
		}
		else = {
			set_temp_variable = { cost = old_cost }
			subtract_from_temp_variable = { num_upgrades = 1 }
			set_temp_variable = { break = 1 }
		} 
			 
	}
	
	set_temp_variable = { min_value = @AI_MIN_LAND_UPGRADES_PER_VARIANT }
	clamp_temp_variable = { var = ai_allowed_upgrades min = min_value }
	add_to_variable = { ai_land_experience = cost }
	#log= "[?ai_allowed_upgrades] ai_allowed_upgrades"
	#log= "[?cost] cost"
}
ai_get_max_allowed_air_upgrades = { #sets ai_allowed_upgrades temp variable
	
	set_temp_variable = { air_xp = air_experience }
	multiply_temp_variable = { air_xp = @AI_XP_USE_FOR_AIR_UPGRADES }

	set_temp_variable = { cost = @AI_UPGRADE_AIR_XP_COST }
	set_temp_variable = { cost_per_step = @AI_UPGRADE_AIR_XP_RAMP_COST }
	
	set_temp_variable = { xp_loop = variant_target^num }
	subtract_from_temp_variable = { xp_loop = num_upgrades }
	
	for_loop_effect = {
		end = xp_loop
			
		set_temp_variable = { old_cost = cost }
		add_to_temp_variable = { num_upgrades = 1 }
		set_temp_variable = { ramp_cost = cost_per_step }
		multiply_temp_variable = { ramp_cost = num_upgrades }
		add_to_temp_variable = { cost = ramp_cost }
		
		if = {
			limit = {
				check_variable = { air_xp > cost }
			}
			add_to_temp_variable = { ai_allowed_upgrades = 1 }
		}
		else = {
			set_temp_variable = { cost = old_cost }
			subtract_from_temp_variable = { num_upgrades = 1 }
			set_temp_variable = { break = 1 }
		} 
			 
	}
	
	set_temp_variable = { min_value = @AI_MIN_AIR_UPGRADES_PER_VARIANT }
	clamp_temp_variable = { var = ai_allowed_upgrades min = min_value }
	add_to_variable = { ai_air_experience = cost }
	#log= "[?ai_allowed_upgrades] ai_allowed_upgrades"
	#log= "[?cost] cost"
}

		
ai_create_equipment_variant = {
	if = { limit = { check_variable = { variant_upgrade^num = 1 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
					}
					mark_older_equipment_obsolete = yes
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 2 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
					}
					mark_older_equipment_obsolete = yes
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 3 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
					}
					mark_older_equipment_obsolete = yes
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 4 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
						[UPGRADE_4] = [LEVEL_4]
					}
					mark_older_equipment_obsolete = yes
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			UPGRADE_4 = "[?variant_upgrade^3.GetTokenKey]"
			LEVEL_4 = "[?variant_upgrade_level^3]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 5 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
						[UPGRADE_4] = [LEVEL_4]
						[UPGRADE_5] = [LEVEL_5]
					}
					mark_older_equipment_obsolete = yes
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			UPGRADE_4 = "[?variant_upgrade^3.GetTokenKey]"
			LEVEL_4 = "[?variant_upgrade_level^3]"
			
			UPGRADE_5 = "[?variant_upgrade^4.GetTokenKey]"
			LEVEL_5 = "[?variant_upgrade_level^4]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 6 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
						[UPGRADE_4] = [LEVEL_4]
						[UPGRADE_5] = [LEVEL_5]
						[UPGRADE_6] = [LEVEL_6]
					}
					mark_older_equipment_obsolete = yes
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			UPGRADE_4 = "[?variant_upgrade^3.GetTokenKey]"
			LEVEL_4 = "[?variant_upgrade_level^3]"
			
			UPGRADE_5 = "[?variant_upgrade^4.GetTokenKey]"
			LEVEL_5 = "[?variant_upgrade_level^4]"
			
			UPGRADE_6 = "[?variant_upgrade^5.GetTokenKey]"
			LEVEL_6 = "[?variant_upgrade_level^5]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
}


ai_create_air_equipment_variant = {
	if = { limit = { check_variable = { variant_upgrade^num = 1 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						
						ai_upgrade = [AI_UPGRADE]
					}
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			AI_UPGRADE = "[?ic_cost]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 2 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						
						ai_upgrade = [AI_UPGRADE]
					}
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			AI_UPGRADE = "[?ic_cost]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 3 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
						
						ai_upgrade = [AI_UPGRADE]
					}
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			AI_UPGRADE = "[?ic_cost]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 4 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
						[UPGRADE_4] = [LEVEL_4]
						
						ai_upgrade = [AI_UPGRADE]
					}
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			UPGRADE_4 = "[?variant_upgrade^3.GetTokenKey]"
			LEVEL_4 = "[?variant_upgrade_level^3]"
			
			AI_UPGRADE = "[?ic_cost]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 5 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
						[UPGRADE_4] = [LEVEL_4]
						[UPGRADE_5] = [LEVEL_5]
						
						ai_upgrade = [AI_UPGRADE]
					}
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			UPGRADE_4 = "[?variant_upgrade^3.GetTokenKey]"
			LEVEL_4 = "[?variant_upgrade_level^3]"
			
			UPGRADE_5 = "[?variant_upgrade^4.GetTokenKey]"
			LEVEL_5 = "[?variant_upgrade_level^4]"
			
			AI_UPGRADE = "[?ic_cost]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
	else_if = { limit = { check_variable = { variant_upgrade^num = 6 } }
		meta_effect = {
			text = {
				create_equipment_variant = { 
					type = [EQUIPMENT]
					upgrades = { 
						[UPGRADE_1] = [LEVEL_1]
						[UPGRADE_2] = [LEVEL_2]
						[UPGRADE_3] = [LEVEL_3]
						[UPGRADE_4] = [LEVEL_4]
						[UPGRADE_5] = [LEVEL_5]
						[UPGRADE_6] = [LEVEL_6]
						
						ai_upgrade = [AI_UPGRADE]
					}
				}
			}
			UPGRADE_1 = "[?variant_upgrade^0.GetTokenKey]"
			LEVEL_1 = "[?variant_upgrade_level^0]"
			
			UPGRADE_2 = "[?variant_upgrade^1.GetTokenKey]"
			LEVEL_2 = "[?variant_upgrade_level^1]"
			
			UPGRADE_3 = "[?variant_upgrade^2.GetTokenKey]"
			LEVEL_3 = "[?variant_upgrade_level^2]"
			
			UPGRADE_4 = "[?variant_upgrade^3.GetTokenKey]"
			LEVEL_4 = "[?variant_upgrade_level^3]"
			
			UPGRADE_5 = "[?variant_upgrade^4.GetTokenKey]"
			LEVEL_5 = "[?variant_upgrade_level^4]"
			
			UPGRADE_6 = "[?variant_upgrade^5.GetTokenKey]"
			LEVEL_6 = "[?variant_upgrade_level^5]"
			
			AI_UPGRADE = "[?ic_cost]"
			
			EQUIPMENT = "[?selected_variant.GetTokenKey]"
		}
	}
}

ai_pay_xp_debt = {
	if = {
		limit = {
			check_variable = { ai_land_experience > 0 }
		}
		
		if = { limit = { check_variable = { army_experience > ai_land_experience } }
			multiply_variable = { ai_land_experience = -1 }
			army_experience = ai_land_experience
			clear_variable = ai_land_experience
		}
		else_if = {
			limit = { check_variable = { army_experience > 0 } }
			set_temp_variable = { pay = army_experience }
			multiply_temp_variable = { pay = -1 }
			army_experience = pay 
			add_to_variable = { ai_land_experience = pay }
		}
	}
	if = {
		limit = {
			check_variable = { ai_air_experience > 0 }
		}
		
		if = { limit = { check_variable = { air_experience > ai_air_experience } }
			multiply_variable = { ai_air_experience = -1 }
			air_experience = ai_air_experience
			clear_variable = ai_air_experience
		}
		else_if = {
			limit = { check_variable = { air_experience > 0 } }
			set_temp_variable = { pay = air_experience }
			multiply_temp_variable = { pay = -1 }
			air_experience = pay 
			add_to_variable = { ai_air_experience = pay }
		}
	}
}






















































