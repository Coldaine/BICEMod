scripted_gui = {

	BI_resource_conversion_window = {   
		context_type = player_context 
		  
		window_name = "BI_resource_conversion_container"
		parent_window_token = trade_tab 
  
		visible = {
			NOT = { has_country_flag = ui_show_energy }
		}
		
		dirty = ui_refinery
		
		dynamic_lists = {
			aluminium_conversion_refinery_list = {
				array = global.aluminium_assigned_refineries
				change_scope = yes  
				entry_container = "aluminium_refinery_entry_container"
			}
			steel_conversion_refinery_list = {
				array = global.steel_assigned_refineries
				change_scope = yes
				entry_container = "steel_refinery_entry_container"
			}
			rubber_conversion_refinery_list = {
				array = global.rubber_assigned_refineries
				change_scope = yes
				entry_container = "rubber_refinery_entry_container"
			}
			fuel_conversion_refinery_list = {
				array = global.fuel_assigned_refineries
				change_scope = yes
				entry_container = "fuel_refinery_entry_container"
			}
		} 
		
		properties = {
			assign_aluminium_refinery = {
				frame = aluminium_refinery_status
			}
			assign_steel_refinery = {
				frame = steel_refinery_status
			}
			assign_rubber_refinery = {
				frame = rubber_refinery_status
			}
			assign_fuel_refinery = {
				frame = fuel_refinery_status
			}
			steel_btn_x5 = {
				frame = steel_5
			}
			steel_btn_x10 = {
				frame = steel_10
			}
			aluminium_btn_x5 = {
				frame = aluminium_5
			}
			aluminium_btn_x10 = {
				frame = aluminium_10
			}
			fuel_btn_x5 = {
				frame = fuel_5
			}
			fuel_btn_x10 = {
				frame = fuel_10
			}
			rubber_btn_x5 = {
				frame = rubber_5
			}
			rubber_btn_x10 = {
				frame = rubber_10
			}
			 
			steel_alert = {
				frame = steel_alert
			}
			aluminium_alert = {
				frame = aluminium_alert
			}
		}
		
		effects = {
		### ALUMINIUM 
			aluminium_alert_click = {
				if = {
					limit = {
						check_variable = { aluminium_alert = 2 }
					}
					clear_variable = aluminium_alert
				}
				else = {
					set_variable = { aluminium_alert = 2 }
				}
				
				country_event = BI_on_action.444
				country_event = BI_on_action.445
				add_to_variable = { ui_refinery = 1 }
			}
			assign_aluminium_refinery_tooltip_delayed_click = {
				ui_assign_aluminium_refinery_tooltip_delayed = yes
			}
			
			assign_aluminium_refinery_tooltip_click = {
				ui_assign_aluminium_refinery_tooltip = yes
			} 
			 
			aluminium_btn_x5_click = {
				if = {
					limit = {
						check_variable = { ui_aluminium_x = 5 }
					}
					clear_variable = ui_aluminium_x
				}
				else = {
					set_variable = { ui_aluminium_x = 5 }
				}
				
				add_to_variable = { ui_refinery = 1 } 
			}
			aluminium_btn_x10_click = {
				if = {
					limit = {
						check_variable = { ui_aluminium_x = 10 }
					}
					clear_variable = ui_aluminium_x
				}
				else = {
					set_variable = { ui_aluminium_x = 10 }
				}
				
				add_to_variable = { ui_refinery = 1 } 
			}
			assign_aluminium_refinery_click = {
				set_temp_variable = { entry = i }  
				add_to_temp_variable = { entry = 1 }
				multiply_temp_variable = { entry = ui_aluminium_x?1 }
				
				ui_assign_aluminium_refinery = yes
				
				#add_to_temp_array = { conversion = token:aluminium } 
				#update_resource_conversion = yes
				
				country_event = BI_on_action.445
			}
			aluminium_increase_click = {
				set_temp_variable = { res = token:aluminium }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.445
			}
			aluminium_increase_shift_click = {
				set_temp_variable = { res = token:aluminium }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.445
			}
			aluminium_increase_control_click = {
				set_temp_variable = { res = token:aluminium }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.445
			}
			aluminium_decrease_click = {
				set_temp_variable = { res = token:aluminium }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.445
			}
			aluminium_decrease_shift_click = {
				set_temp_variable = { res = token:aluminium }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.445
			}
			aluminium_decrease_control_click = {
				set_temp_variable = { res = token:aluminium }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.445
			}
			 
		### STEEL 
			steel_alert_click = {
				if = {
					limit = {
						check_variable = { steel_alert = 2 }
					}
					clear_variable = steel_alert
				}
				else = {
					set_variable = { steel_alert = 2 }
				}
				
				country_event = BI_on_action.444
				country_event = BI_on_action.445
				add_to_variable = { ui_refinery = 1 }
			}
			assign_steel_refinery_tooltip_delayed_click = {
				ui_assign_steel_refinery_tooltip_delayed = yes
			}    
			
			assign_steel_refinery_tooltip_click = {
				set_resource_conversion_properties = yes
				ui_assign_steel_refinery_tooltip = yes
			} 
			 
			input_chromium_text_click = { 
				set_temp_variable = { target_input = num_refinery_assigned@steel }
				
				set_temp_variable = { num_alloy_ref = target_input }
				
				set_temp_variable = { damaged = num_refinery_damaged@steel }
				set_temp_variable = { resilience = 1 }
				subtract_from_temp_variable = { resilience = modifier@refinery_resilience }
				clamp_temp_variable = { var = resilience min = 0.5 }
				multiply_temp_variable = { damaged = resilience }
				subtract_from_temp_variable = { target_input = damaged }
				clamp_temp_variable = { var = target_input max = max_num_alloy_refinery }
				
				multiply_temp_variable = { target_input = chromium_input }
			
				custom_effect_tooltip = "STEEL_INPUT_CHROMIUM_TARGET_TOOLTIP"
				if = {
					limit = {
						check_variable = { chromium_deficit > 0 }
					}
					custom_effect_tooltip = "STEEL_INPUT_CHROMIUM_DEFICIT_TOOLTIP"
				}
				else_if = {
					limit = {
						set_temp_variable = { chromium_surplus = resource_produced@chromium }
						add_to_temp_variable = { chromium_surplus = resource_imported@chromium }
						subtract_from_temp_variable = { chromium_surplus = resource_exported@chromium }
						subtract_from_temp_variable = { chromium_surplus = resource_consumed@chromium }
						subtract_from_temp_variable = { chromium_surplus = alloy_input_actual }
						
						check_variable = { chromium_surplus > 0.5 }
					}
					set_temp_variable = { num_possible = chromium_surplus }
					divide_temp_variable = { num_possible = chromium_input }
					custom_effect_tooltip = "STEEL_INPUT_CHROMIUM_SURPLUS_TOOLTIP"
				}
			}	
			 
			steel_btn_x5_click = {
				if = {
					limit = {
						check_variable = { ui_steel_x = 5 }
					}
					clear_variable = ui_steel_x
				}
				else = {
					set_variable = { ui_steel_x = 5 }
				}
				
				add_to_variable = { ui_refinery = 1 } 
			}
			steel_btn_x10_click = {
				if = {
					limit = {
						check_variable = { ui_steel_x = 10 }
					}
					clear_variable = ui_steel_x
				}
				else = {
					set_variable = { ui_steel_x = 10 }
				}
				
				add_to_variable = { ui_refinery = 1 } 
			}
			assign_steel_refinery_click = { 
				set_temp_variable = { entry = i }  
				add_to_temp_variable = { entry = 1 }
				multiply_temp_variable = { entry = ui_steel_x?1 }
				
				ui_assign_steel_refinery = yes
				
				#add_to_temp_array = { conversion = token:steel } 
				#update_resource_conversion = yes
				
				country_event = BI_on_action.444
			}
			steel_increase_click = {
				set_temp_variable = { res = token:steel }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.444
			}
			steel_increase_shift_click = {
				set_temp_variable = { res = token:steel }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.444
			}
			steel_increase_control_click = {
				set_temp_variable = { res = token:steel }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.444
			}
			steel_decrease_click = {
				set_temp_variable = { res = token:steel }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.444 
			}
			steel_decrease_shift_click = {
				set_temp_variable = { res = token:steel }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.444 
			}
			steel_decrease_control_click = {
				set_temp_variable = { res = token:steel }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.444 
			}
			
			         
			### RUBBER    
			assign_rubber_refinery_tooltip_delayed_click = {
				ui_assign_rubber_refinery_tooltip_delayed = yes
			}
			 
			assign_rubber_refinery_tooltip_click = {
				ui_assign_rubber_refinery_tooltip = yes 
			} 
			 
			rubber_btn_x5_click = {
				if = {
					limit = {
						check_variable = { ui_rubber_x = 5 }
					}
					clear_variable = ui_rubber_x
				}
				else = {
					set_variable = { ui_rubber_x = 5 }
				}
				
				add_to_variable = { ui_refinery = 1 } 
			}
			rubber_btn_x10_click = {
				if = {
					limit = {
						check_variable = { ui_rubber_x = 10 }
					}
					clear_variable = ui_rubber_x
				}
				else = {
					set_variable = { ui_rubber_x = 10 }
				}
				
				add_to_variable = { ui_refinery = 1 }
			}
			assign_rubber_refinery_click = {
				set_temp_variable = { entry = i }  
				add_to_temp_variable = { entry = 1 }
				multiply_temp_variable = { entry = ui_rubber_x?1 }
				
				ui_assign_rubber_refinery = yes
				
				#add_to_temp_array = { conversion = token:rubber } 
				#update_resource_conversion = yes
				
				country_event = BI_on_action.449
			}
			rubber_increase_click = {
				set_temp_variable = { res = token:rubber }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.449
			}
			rubber_increase_shift_click = {
				set_temp_variable = { res = token:rubber }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.449
			}
			rubber_increase_control_click = {
				set_temp_variable = { res = token:rubber }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.449
			}
			rubber_decrease_click = {
				set_temp_variable = { res = token:rubber }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.449 
			}
			rubber_decrease_shift_click = {
				set_temp_variable = { res = token:rubber }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.449
			}
			rubber_decrease_control_click = {
				set_temp_variable = { res = token:rubber }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.449
			}
			   
			### TOOLTIPS     
			rubber_energy_cost_tooltip_click = {  
				ui_rubber_energy_cost_tooltip = yes
			}   
			  
			 
		### FUEL 
			assign_fuel_refinery_tooltip_delayed_click = {
				ui_assign_fuel_refinery_tooltip_delayed = yes
			}
			
			assign_fuel_refinery_tooltip_click = {
				ui_assign_fuel_refinery_tooltip = yes
			} 
			 
			fuel_btn_x5_click = {
				if = {
					limit = {
						check_variable = { ui_fuel_x = 5 }
					}
					clear_variable = ui_fuel_x
				}
				else = {
					set_variable = { ui_fuel_x = 5 }
				}
				
				add_to_variable = { ui_refinery = 1 } 
			}
			fuel_btn_x10_click = {
				if = {
					limit = {
						check_variable = { ui_fuel_x = 10 }
					}
					clear_variable = ui_fuel_x
				}
				else = {
					set_variable = { ui_fuel_x = 10 }
				}
				
				add_to_variable = { ui_refinery = 1 } 
			}
			assign_fuel_refinery_click = {
				set_temp_variable = { entry = i }  
				add_to_temp_variable = { entry = 1 }
				multiply_temp_variable = { entry = ui_fuel_x?1 }
				
				ui_assign_fuel_refinery = yes
				
				#add_to_temp_array = { conversion = token:fuel } 
				#update_resource_conversion = yes
				
				country_event = BI_on_action.448
			}
			fuel_increase_click = {
				set_temp_variable = { res = token:fuel }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.448
			}
			fuel_increase_shift_click = {
				set_temp_variable = { res = token:fuel }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.448
			}
			fuel_increase_control_click = {
				set_temp_variable = { res = token:fuel }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_increase_click = yes
				
				country_event = BI_on_action.448
			}
			fuel_decrease_click = {
				set_temp_variable = { res = token:fuel }
				set_temp_variable = { quant = 1 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.448
			}
			fuel_decrease_shift_click = {
				set_temp_variable = { res = token:fuel }
				set_temp_variable = { quant = 5 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.448
			}
			fuel_decrease_control_click = {
				set_temp_variable = { res = token:fuel }
				set_temp_variable = { quant = 10 }
				
				ui_refinery_decrease_click = yes
				
				country_event = BI_on_action.448
			}
			
			chromium_increase_click = {
				add_to_variable = { max_num_alloy_refinery = 1 }
				country_event = BI_on_action.444
				
				force_update_dynamic_modifier = yes
			}
			chromium_increase_shift_click = {
				add_to_variable = { max_num_alloy_refinery = 5 }
				country_event = BI_on_action.444
				 
				force_update_dynamic_modifier = yes
			}
			chromium_increase_control_click = {
				add_to_variable = { max_num_alloy_refinery = 10 }
				country_event = BI_on_action.444
				
				force_update_dynamic_modifier = yes
			}
			chromium_decrease_click = { 
				subtract_from_variable = { max_num_alloy_refinery = 1 }
				clamp_variable = { var = max_num_alloy_refinery min = 0 }
				country_event = BI_on_action.444
				
				force_update_dynamic_modifier = yes
			}
			chromium_decrease_shift_click = { 
				subtract_from_variable = { max_num_alloy_refinery = 5 }
				clamp_variable = { var = max_num_alloy_refinery min = 0 }
				country_event = BI_on_action.444
				
				force_update_dynamic_modifier = yes
			}
			chromium_decrease_control_click = { 
				subtract_from_variable = { max_num_alloy_refinery = 10 }
				clamp_variable = { var = max_num_alloy_refinery min = 0 }
				country_event = BI_on_action.444
				
				force_update_dynamic_modifier = yes
			}
			chromium_increase_shift_click = {
				add_to_variable = { max_num_alloy_refinery = 5 }
				country_event = BI_on_action.444
				
				force_update_dynamic_modifier = yes
			}
			chromium_decrease_shift_click = { 
				subtract_from_variable = { max_num_alloy_refinery = 5 }
				clamp_variable = { var = max_num_alloy_refinery min = 0 }
				country_event = BI_on_action.444
				
				force_update_dynamic_modifier = yes
			}
		}  
		
		triggers = {
			assign_alloy_visible = {
				set_temp_variable = { t = num_refineries_with_alloy }
				divide_temp_variable = { t = ui_steel_x?1 }
				
				set_temp_variable = { maxx = num_active_refinery@steel }
				divide_temp_variable = { maxx = ui_steel_x?1 }
				clamp_temp_variable = { var = t max = maxx }
				check_variable = { t > i }
			}
			steel_glow_visible = {
				check_variable = { num_refinery@steel > num_refinery_assigned@steel }
			}
			aluminium_glow_visible = {
				check_variable = { num_refinery@aluminium > num_refinery_assigned@aluminium }
			}
			rubber_glow_visible = {
				check_variable = { num_refinery@rubber > num_refinery_assigned@rubber }
			}
			fuel_glow_visible = {
				check_variable = { num_refinery@fuel > num_refinery_assigned@fuel }
			}
			aluminium_btn_x5_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_aluminium_x = 5 }
					}
					set_temp_variable = { aluminium_5 = 2 }
				}
				
				set_temp_variable = { num_refinery_target_num@aluminium = num_refinery_target@aluminium }
				subtract_from_temp_variable = { num_refinery_target_num@aluminium = num_refinery_assigned@aluminium }
				clamp_temp_variable = { var = num_refinery_target_num@aluminium min = 0 }
				
			}
			aluminium_btn_x10_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_aluminium_x = 10 }
					}
					set_temp_variable = { aluminium_10 = 2 }
				}
			}
			assign_aluminium_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_aluminium_x?1 }
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@aluminium > t_entry }
						check_variable = { ROOT.num_refinery@aluminium > t_entry }
						check_variable = { ROOT.num_active_refinery@aluminium > t_entry }
					}
					if = {
						limit = {
							set_temp_variable = { t = t_entry }
							add_to_temp_variable = { t = ui_aluminium_x?1 }
							check_variable = { ROOT.num_active_refinery@aluminium < t }
						}
						set_temp_variable = { aluminium_refinery_status = 6 }
					}
					else = {
						set_temp_variable = { aluminium_refinery_status = 2 }
					}
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@aluminium > t_entry }
						check_variable = { ROOT.num_refinery@aluminium > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@aluminium }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@aluminium }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@aluminium }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { aluminium_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@aluminium > t_entry }
						check_variable = { ROOT.num_refinery_assigned@aluminium > t_entry }
					}
					set_temp_variable = { aluminium_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@aluminium > t_entry }
					}
					set_temp_variable = { aluminium_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { aluminium_refinery_status = 1 }
				}
				
			}
			
			### STEEL
			steel_btn_x5_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_steel_x = 5 }
					}
					set_temp_variable = { steel_5 = 2 }
				}

				set_temp_variable = { num_refinery_target_num@steel = num_refinery_target@steel }
				subtract_from_temp_variable = { num_refinery_target_num@steel = num_refinery_assigned@steel }
				clamp_temp_variable = { var = num_refinery_target_num@steel min = 0 }
			}
			steel_btn_x10_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_steel_x = 10 }
					}
					set_temp_variable = { steel_10 = 2 }
				}
			}
			assign_steel_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_steel_x?1 }
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@steel > t_entry }
						check_variable = { ROOT.num_refinery@steel > t_entry }
						check_variable = { ROOT.num_active_refinery@steel > t_entry }
					}
					if = {
						limit = {
							set_temp_variable = { t = t_entry }
							add_to_temp_variable = { t = ui_steel_x?1 }
							check_variable = { ROOT.num_active_refinery@steel < t }
						}
						set_temp_variable = { steel_refinery_status = 6 }
					}
					else = {
						set_temp_variable = { steel_refinery_status = 2 }
					}
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@steel > t_entry }
						check_variable = { ROOT.num_refinery@steel > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@steel }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@steel }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@steel }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { steel_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@steel > t_entry }
						check_variable = { ROOT.num_refinery_assigned@steel > t_entry }
					}
					set_temp_variable = { steel_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@steel > t_entry }
					}
					set_temp_variable = { steel_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { steel_refinery_status = 1 }
				}
				
			}
			
			rubber_btn_x5_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_rubber_x = 5 }
					}
					set_temp_variable = { rubber_5 = 2 }
				}
				
				set_temp_variable = { num_refinery_target_num@rubber = num_refinery_target@rubber }
				subtract_from_temp_variable = { num_refinery_target_num@rubber = num_refinery_assigned@rubber }
				clamp_temp_variable = { var = num_refinery_target_num@rubber min = 0 }
				
			}
			rubber_btn_x10_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_rubber_x = 10 }
					}
					set_temp_variable = { rubber_10 = 2 }
				}
			}
			assign_rubber_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_rubber_x?1 }
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@rubber > t_entry }
						check_variable = { ROOT.num_refinery@rubber > t_entry }
						check_variable = { ROOT.num_active_refinery@rubber > t_entry }
					}
					if = {
						limit = {
							set_temp_variable = { t = t_entry }
							add_to_temp_variable = { t = ui_rubber_x?1 }
							check_variable = { ROOT.num_active_refinery@rubber < t }
						}
						set_temp_variable = { rubber_refinery_status = 6 }
					}
					else = {
						set_temp_variable = { rubber_refinery_status = 2 }
					}
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@rubber > t_entry }
						check_variable = { ROOT.num_refinery@rubber > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@rubber }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@rubber }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@rubber }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { rubber_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@rubber > t_entry }
						check_variable = { ROOT.num_refinery_assigned@rubber > t_entry }
					}
					set_temp_variable = { rubber_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@rubber > t_entry }
					}
					set_temp_variable = { rubber_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { rubber_refinery_status = 1 }
				}
				
			}
			
			### FUEL
			
			fuel_btn_x5_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_fuel_x = 5 }
					}
					set_temp_variable = { fuel_5 = 2 }
				}
				
				set_temp_variable = { num_refinery_target_num@fuel = num_refinery_target@fuel }
				subtract_from_temp_variable = { num_refinery_target_num@fuel = num_refinery_assigned@fuel }
				clamp_temp_variable = { var = num_refinery_target_num@fuel min = 0 }
				
			}
			fuel_btn_x10_click_enabled = {
				if = {
					limit = {
						check_variable = { ui_fuel_x = 10 }
					}
					set_temp_variable = { fuel_10 = 2 }
				}
			}
			assign_fuel_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_fuel_x?1 }
				
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@fuel > t_entry }
						check_variable = { ROOT.num_refinery@fuel > t_entry }
						check_variable = { ROOT.num_active_refinery@fuel > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 2 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@fuel > t_entry }
						check_variable = { ROOT.num_refinery@fuel > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@fuel }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@fuel }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@fuel }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@fuel > t_entry }
						check_variable = { ROOT.num_refinery_assigned@fuel > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@fuel > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { fuel_refinery_status = 1 }
				}
				
			}
		}
	}
	
	BI_resource_conversion_ui_only_window = {   
		context_type = player_context 
		
		window_name = "BI_resource_conversion_ui_only_container"
		parent_scripted_gui = BI_resource_conversion_window 
		
		#visible = { always = no }
  
		dynamic_lists = {
			aluminium_conversion_refinery_list = {
				array = global.aluminium_assigned_refineries
				change_scope = yes  
				entry_container = "aluminium_refinery_fake_entry_container"
			}
			steel_conversion_refinery_list = {
				array = global.steel_assigned_refineries
				change_scope = yes
				entry_container = "steel_refinery_fake_entry_container"
			}
			rubber_conversion_refinery_list = {
				array = global.rubber_assigned_refineries
				change_scope = yes
				entry_container = "rubber_refinery_fake_entry_container"
			}
			fuel_conversion_refinery_list = {
				array = global.fuel_assigned_refineries
				change_scope = yes
				entry_container = "fuel_refinery_fake_entry_container"
			}
		} 
		
		properties = {
			assign_aluminium_refinery = {
				frame = aluminium_refinery_status
			}
			assign_steel_refinery = {
				frame = steel_refinery_status
			}
			assign_rubber_refinery = {
				frame = rubber_refinery_status
			}
			assign_fuel_refinery = {
				frame = fuel_refinery_status
			}
		}
		
		effects = { 
			input_iron_text_click = { 
				set_temp_variable = { target_input = num_refinery_assigned@steel }
						
				set_temp_variable = { damaged = num_refinery_damaged@steel }
				set_temp_variable = { resilience = 1 }
				subtract_from_temp_variable = { resilience = modifier@refinery_resilience }
				clamp_temp_variable = { var = resilience min = 0.5 }
				multiply_temp_variable = { damaged = resilience }
				subtract_from_temp_variable = { target_input = damaged }
				
				multiply_temp_variable = { target_input = iron_input }
			
				custom_effect_tooltip = "STEEL_INPUT_IRON_TARGET_TOOLTIP"
				   
				if = {
					limit = { 
						check_variable = { iron_deficit > 0 }
					}
					
					custom_effect_tooltip = "STEEL_INPUT_IRON_DEFICIT_TOOLTIP"
					
				}
				else_if = {
					limit = {
						set_temp_variable = { iron_surplus = resource_produced@iron }
						add_to_temp_variable = { iron_surplus = resource_imported@iron }
						add_to_temp_variable = { iron_surplus = export_offset@iron }
						subtract_from_temp_variable = { iron_surplus = resource_exported@iron }
						subtract_from_temp_variable = { iron_surplus = conversion_use_@iron }
						
						check_variable = { iron_surplus > 0.5 } #atleast 1 unit
					}
						
					set_temp_variable = { num_possible = iron_surplus }
					divide_temp_variable = { num_possible = iron_input }
					custom_effect_tooltip = "STEEL_INPUT_IRON_SURPLUS_TOOLTIP"
				}
			}
			input_coal_text_click = { 
				set_temp_variable = { target_input = num_refinery_assigned@steel }
				
				set_temp_variable = { damaged = num_refinery_damaged@steel }
				set_temp_variable = { resilience = 1 }
				subtract_from_temp_variable = { resilience = modifier@refinery_resilience }
				clamp_temp_variable = { var = resilience min = 0.5 }
				multiply_temp_variable = { damaged = resilience }
				subtract_from_temp_variable = { target_input = damaged }
				
				multiply_temp_variable = { target_input = coal_input }
			
				custom_effect_tooltip = "STEEL_INPUT_COAL_TARGET_TOOLTIP"
				if = {
					limit = {
						check_variable = { coal_deficit > 0 }
					}
					set_temp_variable = { num_inactive = num_refinery_assigned@steel }
					subtract_from_temp_variable = { num_inactive = num_active_refinery@steel }
					
					custom_effect_tooltip = "STEEL_INPUT_COAL_DEFICIT_TOOLTIP"
					
				}
				else_if = {
					limit = {
						set_temp_variable = { coal_surplus = resource_produced@coal }
						add_to_temp_variable = { coal_surplus = resource_imported@coal }
						add_to_temp_variable = { coal_surplus = export_offset@coal }
						subtract_from_temp_variable = { coal_surplus = resource_exported@coal }
						subtract_from_temp_variable = { coal_surplus = conversion_use_@coal }
						subtract_from_temp_variable = { coal_surplus = train_use@coal }
						subtract_from_temp_variable = { coal_surplus = conversion_use_fuel@coal }#this is only so the TT lines up. steel has priority over fuel and can steal its coal
						
						check_variable = { coal_surplus > 0.5 } #atleast 1 unit
					}
						
					set_temp_variable = { num_possible = coal_surplus }
					divide_temp_variable = { num_possible = coal_input }
					custom_effect_tooltip = "STEEL_INPUT_COAL_SURPLUS_TOOLTIP"
				}
			}       
			steel_energy_cost_tooltip_click = {  
				ui_steel_energy_cost_tooltip = yes 
			}  
			
			
			bauxite_input_text_click = { 
				set_temp_variable = { target_input = num_refinery_assigned@aluminium }
				
				set_temp_variable = { damaged = num_refinery_damaged@aluminium }
				set_temp_variable = { resilience = 1 }
				subtract_from_temp_variable = { resilience = modifier@refinery_resilience }
				clamp_temp_variable = { var = resilience min = 0.5 }
				multiply_temp_variable = { damaged = resilience }
				subtract_from_temp_variable = { target_input = damaged }
				
				multiply_temp_variable = { target_input = bauxite_input }
			
				custom_effect_tooltip = "ALUMINIUM_INPUT_TARGET_TOOLTIP"
				if = {
					limit = {
						check_variable = { deficit > 0 }
					}
					set_temp_variable = { num_inactive = num_refinery_assigned@aluminium }
					subtract_from_temp_variable = { num_inactive = num_active_refinery@aluminium }
					
					custom_effect_tooltip = "ALUMINIUM_INPUT_DEFICIT_TOOLTIP"
				}
				else_if = {
					limit = {
						set_temp_variable = { surplus = resource_produced@bauxite }
						add_to_temp_variable = { surplus = resource_imported@bauxite }
						add_to_temp_variable = { surplus = export_offset@bauxite }
						subtract_from_temp_variable = { surplus = resource_exported@bauxite }
						subtract_from_temp_variable = { surplus = conversion_use_@bauxite }
						
						check_variable = { surplus > 0.5 }
					}
					set_temp_variable = { num_possible = surplus }
					divide_temp_variable = { num_possible = bauxite_input }
					custom_effect_tooltip = "ALUMINIUM_INPUT_SURPLUS_TOOLTIP"
				}
			}	   
			aluminium_energy_cost_tooltip_click = {  
				ui_aluminium_energy_cost_tooltip = yes
			}   
			
			
			fuel_input_text_click = { 
				set_temp_variable = { target_input = num_refinery_assigned@fuel }
				
				set_temp_variable = { damaged = num_refinery_damaged@fuel }
				set_temp_variable = { resilience = 1 }
				subtract_from_temp_variable = { resilience = modifier@refinery_resilience }
				clamp_temp_variable = { var = resilience min = 0.5 }
				multiply_temp_variable = { damaged = resilience }
				subtract_from_temp_variable = { target_input = damaged }
				
				multiply_temp_variable = { target_input = fuel_coal_input }
			
				custom_effect_tooltip = "FUEL_INPUT_TARGET_TOOLTIP"
				if = {
					limit = {
						check_variable = { fuel_coal_deficit > 0 }
				 	}
					
					custom_effect_tooltip = "FUEL_INPUT_DEFICIT_TOOLTIP"
				}
				else_if = {
					limit = {
						set_temp_variable = { coal_fuel_surplus = resource_produced@coal }
						add_to_temp_variable = { coal_fuel_surplus = resource_imported@coal }
						add_to_temp_variable = { coal_fuel_surplus = export_offset@coal }
						subtract_from_temp_variable = { coal_fuel_surplus = resource_exported@coal }
						subtract_from_temp_variable = { coal_fuel_surplus = conversion_use_@coal }
						subtract_from_temp_variable = { coal_fuel_surplus = train_use@coal }
						subtract_from_temp_variable = { coal_fuel_surplus = conversion_use_fuel@coal }
						
						check_variable = { coal_fuel_surplus > 0.5 } #atleast 1 unit
					}
						
					set_temp_variable = { num_possible = coal_fuel_surplus }
					divide_temp_variable = { num_possible = fuel_coal_input }
					custom_effect_tooltip = "FUEL_INPUT_SURPLUS_TOOLTIP"
				}
			}	   
			fuel_energy_cost_tooltip_click = {  
				ui_fuel_energy_cost_tooltip = yes
			} 
		}
		
		triggers = {
			assign_aluminium_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_aluminium_x?1 }
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@aluminium > t_entry }
						check_variable = { ROOT.num_refinery@aluminium > t_entry }
						check_variable = { ROOT.num_active_refinery@aluminium > t_entry }
					}
					if = {
						limit = {
							set_temp_variable = { t = t_entry }
							add_to_temp_variable = { t = ui_aluminium_x?1 }
							check_variable = { ROOT.num_active_refinery@aluminium < t }
						}
						set_temp_variable = { aluminium_refinery_status = 6 }
					}
					else = {
						set_temp_variable = { aluminium_refinery_status = 2 }
					}
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@aluminium > t_entry }
						check_variable = { ROOT.num_refinery@aluminium > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@aluminium }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@aluminium }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@aluminium }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { aluminium_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@aluminium > t_entry }
						check_variable = { ROOT.num_refinery_assigned@aluminium > t_entry }
					}
					set_temp_variable = { aluminium_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@aluminium > t_entry }
					}
					set_temp_variable = { aluminium_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { aluminium_refinery_status = 1 }
				}
				
			}
			
			assign_steel_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_steel_x?1 }
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@steel > t_entry }
						check_variable = { ROOT.num_refinery@steel > t_entry }
						check_variable = { ROOT.num_active_refinery@steel > t_entry }
					}
					if = {
						limit = {
							set_temp_variable = { t = t_entry }
							add_to_temp_variable = { t = ui_steel_x?1 }
							check_variable = { ROOT.num_active_refinery@steel < t }
						}
						set_temp_variable = { steel_refinery_status = 6 }
					}
					else = {
						set_temp_variable = { steel_refinery_status = 2 }
					}
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@steel > t_entry }
						check_variable = { ROOT.num_refinery@steel > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@steel }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@steel }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@steel }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { steel_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@steel > t_entry }
						check_variable = { ROOT.num_refinery_assigned@steel > t_entry }
					}
					set_temp_variable = { steel_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@steel > t_entry }
					}
					set_temp_variable = { steel_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { steel_refinery_status = 1 }
				}
				
			}
			
			assign_rubber_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_rubber_x?1 }
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@rubber > t_entry }
						check_variable = { ROOT.num_refinery@rubber > t_entry }
						check_variable = { ROOT.num_active_refinery@rubber > t_entry }
					}
					if = {
						limit = {
							set_temp_variable = { t = t_entry }
							add_to_temp_variable = { t = ui_rubber_x?1 }
							check_variable = { ROOT.num_active_refinery@rubber < t }
						}
						set_temp_variable = { rubber_refinery_status = 6 }
					}
					else = {
						set_temp_variable = { rubber_refinery_status = 2 }
					}
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@rubber > t_entry }
						check_variable = { ROOT.num_refinery@rubber > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@rubber }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@rubber }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@rubber }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { rubber_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@rubber > t_entry }
						check_variable = { ROOT.num_refinery_assigned@rubber > t_entry }
					}
					set_temp_variable = { rubber_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@rubber > t_entry }
					}
					set_temp_variable = { rubber_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { rubber_refinery_status = 1 }
				}
				
			}
			
			assign_fuel_refinery_click_enabled = {
				set_temp_variable = { t_entry = i }
				multiply_temp_variable = { t_entry = ui_fuel_x?1 }
				
				if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@fuel > t_entry }
						check_variable = { ROOT.num_refinery@fuel > t_entry }
						check_variable = { ROOT.num_active_refinery@fuel > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 2 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_assigned@fuel > t_entry }
						check_variable = { ROOT.num_refinery@fuel > t_entry }
						
						set_temp_variable = { t1 = ROOT.num_refinery@fuel }
						subtract_from_temp_variable = { t1 = ROOT.num_refinery_damaged@fuel }
						#subtract_from_temp_variable = { t1 = ROOT.num_active_refinery@fuel }
						
						check_variable = { t1 > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 5 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery@fuel > t_entry }
						check_variable = { ROOT.num_refinery_assigned@fuel > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 4 }
				}
				else_if = {
					limit = {
						check_variable = { ROOT.num_refinery_target@fuel > t_entry }
					}
					set_temp_variable = { fuel_refinery_status = 3 }
				}
				else = {
					set_temp_variable = { fuel_refinery_status = 1 }
				}
				
			}
		}
	}
	
	BI_energy_window = {   
		context_type = player_context
		  
		window_name = "BI_energy_container"
		parent_window_token = trade_tab 
		
		visible = {
			has_country_flag = ui_show_energy
		}
		
		properties = {
			production = {
				frame = production_bar_frame
			}
			deficit = {
				frame = deficit_bar_frame
			}
			
			civilian_1 = {
				frame = civilian_1
			}
			civilian_2 = {
				frame = civilian_2
			}
			civilian_3 = {
				frame = civilian_3
			}
			military_1 = {
				frame = military_1
			}
			military_2 = {
				frame = military_2
			}
			military_3 = {
				frame = military_3
			}
			naval_1 = {
				frame = naval_1
			}
			naval_2 = {
				frame = naval_2
			}
			naval_3 = {
				frame = naval_3
			}
			conversion_1 = {
				frame = conversion_1
			}
			conversion_2 = {
				frame = conversion_2
			}
			conversion_3 = {
				frame = conversion_3
			}
			
			coal_energy_icon = {
				frame = coal_energy_frame
			}
			fuel_energy_icon = {
				frame = fuel_energy_frame
			}
			hydro_energy_icon = {
				frame = hydro_energy_frame
			}
		} 
		
		effects = {
			# tooltips
			available_production_click = {
				custom_effect_tooltip = ENERGY_SURPLUS_BASE
				if = {
					limit = {
						check_variable = { num_power_plant > 0 }
						set_temp_variable = { t = num_power_plant }
						set_temp_variable = { x = 120 }
						set_temp_variable = { factor = modifier@energy_production_factor }
						add_to_temp_variable = { factor = 1 }
						multiply_temp_variable = { x = factor }
						multiply_temp_variable = { t = x }
					} 
					custom_effect_tooltip = ENERGY_SURPLUS_POWER_PLANT
				}
				if = {
					limit = {
						check_variable = { num_hydro_power > 0 }
						set_temp_variable = { t = num_hydro_power }
						set_temp_variable = { x = 160 }
						set_temp_variable = { factor = modifier@energy_hydro_factor }
						add_to_temp_variable = { factor = 1 }
						multiply_temp_variable = { x = factor }
						multiply_temp_variable = { t = x }
					}
					custom_effect_tooltip = ENERGY_SURPLUS_HYDRO_POWER
				}
				if = {
					limit = {
						check_variable = { surplus = 0 }
					}
					custom_effect_tooltip = ENERGY_SURPLUS_SUPLUS_BAD
					custom_effect_tooltip = alert_energy_lack_capacity_need
				}
				else = {
					custom_effect_tooltip = ENERGY_SURPLUS_SUPLUS 
				}
			}
			production_click = {
				custom_effect_tooltip = ENERGY_PRODUCTION_BASE
				if = {
					limit = {
						check_variable = { energy_produced@hydro > 0 }
					}
					custom_effect_tooltip = ENERGY_PRODUCTION_HYDRO_POWER
				}
				if = {
					limit = {
						OR = {
							check_variable = { energy_produced@coal > 0 }
							check_variable = { energy_produced@fuel > 0 }
						}
						set_temp_variable = { t = energy_produced@coal }
						add_to_temp_variable = { t = energy_produced@fuel }
					} 
					custom_effect_tooltip = ENERGY_PRODUCTION_POWER_PLANT
					if = {
						limit = {
							check_variable = { energy_produced@coal > 0 }
						}
						custom_effect_tooltip = ENERGY_PRODUCTION_COAL
					}
					if = {
						limit = {
							check_variable = { energy_produced@fuel > 0 }
						}
						set_temp_variable = { t = energy_input@fuel }
						multiply_temp_variable = { t = 24 }
						custom_effect_tooltip = ENERGY_PRODUCTION_FUEL
					}
				}
				if = {
					limit = {
						check_variable = { production_factor = 1 }
					}
									
					set_temp_variable = { t = 120 }
					
					set_temp_variable = { factor = modifier@energy_production_factor }
					add_to_temp_variable = { factor = 1 }
					multiply_temp_variable = { t = factor }
					
					set_temp_variable = { need = energy_cost }
					subtract_from_temp_variable = { need = max_energy_production }
					
					divide_temp_variable = { need = t }
					clamp_temp_variable = { var = need min = 1 }
					
					custom_effect_tooltip = ENERGY_PRODUCTION_DESC_BAD
				}
				else = {
					custom_effect_tooltip = ENERGY_PRODUCTION_DESC
				}
			}
			deficit_click = {
				if = {
					limit = {
						OR = {
							check_variable = { lack_of_energy@energy_civilian < 0 }
							check_variable = { lack_of_energy@energy_military < 0 }
							check_variable = { lack_of_energy@energy_naval < 0 }
							check_variable = { lack_of_energy@energy_conversion < 0 }
						}
					}
					custom_effect_tooltip = ENERGY_CONSUMPTION_BASE
					
					if = {
						limit = {
							check_variable = { energy_cost > max_energy_production }
						}
						set_temp_variable = { t = 120 }
						
						set_temp_variable = { factor = modifier@energy_production_factor }
						add_to_temp_variable = { factor = 1 }
						multiply_temp_variable = { t = factor }
						
						set_temp_variable = { need = energy_cost }
						subtract_from_temp_variable = { need = max_energy_production }
						
						divide_temp_variable = { need = t }
						clamp_temp_variable = { var = need min = 1 }
						
						custom_effect_tooltip = alert_energy_lack_capacity_need
					}
					if = {
						limit = {
							check_variable = { energy_input@coal < energy_input_real@coal }
						}
						custom_effect_tooltip = alert_energy_lack_resource_coal
					}
					if = {
						limit = {
							fuel_ratio < 0.05
							check_variable = { energy_input@fuel > 0 }
						}
						set_temp_variable = { req = energy_input@fuel }
						multiply_temp_variable = { req = 24 }
						custom_effect_tooltip = alert_energy_lack_resource_fuel
					}
					
					custom_effect_tooltip = alert_energy_lack_capacity_penalties
					if = {
						limit = {
							NOT = { check_variable = { lack_of_energy@energy_civilian = 0 } }
						}
						custom_effect_tooltip = alert_energy_lack_civilian
					}
					if = {
						limit = {
							NOT = { check_variable = { lack_of_energy@energy_military = 0 } }
						}
						custom_effect_tooltip = alert_energy_lack_military
					}
					if = {
						limit = {
							NOT = { check_variable = { lack_of_energy@energy_naval = 0 } }
						}
						custom_effect_tooltip = alert_energy_lack_naval
					}
					if = {
						limit = {
							NOT = { check_variable = { lack_of_energy@energy_conversion = 0 } }
						}
						custom_effect_tooltip = alert_energy_lack_refinery
					}
				}
				else = {
					custom_effect_tooltip = ENERGY_CONSUMPTION_NONE
				}
				
			}
			coal_input_text_click = {
				custom_effect_tooltip = ENERGY_COAL_INPUT_BASE
				
				if = {
					limit = {
						check_variable = { energy_input@coal < energy_input_real@coal }
						set_temp_variable = { t = energy_input_real@coal }
						subtract_from_temp_variable = { t = energy_input@coal }
					}
					custom_effect_tooltip = ENERGY_COAL_INPUT_DEFICIT
				}
			}
			coal_input_text_right_click = {
				ui_energy_coal_delayed_tooltip = yes
			}
			fuel_input_text_click = {
				set_temp_variable = { input = energy_input@fuel }
				multiply_temp_variable = { input = 24 }
				
				set_temp_variable = { real = energy_input_real@fuel }
				multiply_temp_variable = { real = 24 }
				custom_effect_tooltip = ENERGY_FUEL_INPUT_BASE
				
				if = {
					limit = {
						check_variable = { energy_input@fuel > energy_input_real@fuel }
						check_variable = { energy_input_real@fuel > 0 }
						
						set_temp_variable = { t = max_fuel_k }
						multiply_temp_variable = { t = 0.05 }
						subtract_from_temp_variable = { t = fuel_k }
						
					}
					custom_effect_tooltip = ENERGY_FUEL_INPUT_DEFICIT
				}
			}
			fuel_input_text_right_click = {
				ui_energy_fuel_delayed_tooltip = yes
			}
			hydro_input_text_click = {
				custom_effect_tooltip = ENERGY_HYDRO_INPUT_BASE
				
			}
			hydro_input_text_right_click = {
				ui_energy_hydro_delayed_tooltip = yes
			}
			
			# effects
			increase_coal_ratio_click = {
				add_to_variable = { energy_ratio@coal = 0.05 }
				subtract_from_variable = { energy_ratio@fuel = 0.05 }
				
				d_update_energy_daily = yes
				add_to_variable = { ui_energy_pie1 = 1 }
			}
			increase_fuel_ratio_click = {
				add_to_variable = { energy_ratio@fuel = 0.05 }
				subtract_from_variable = { energy_ratio@coal = 0.05 }
				
				d_update_energy_daily = yes
				add_to_variable = { ui_energy_pie1 = 1 }
			}
			
			increase_priority_click = {
				set_temp_variable = { new_index = i }
				add_to_temp_variable = { new_index = -1 }
				
				set_variable = { remove_energy_priority = i }
				country_event = { id = BI_on_action.446 }
				
				add_to_array = { 
					array = energy_priority 
					value = v
					index = new_index
				}
			}
			decrease_priority_click = {
				set_temp_variable = { new_index = i }
				add_to_temp_variable = { new_index = 1 }
				
				set_variable = { remove_energy_priority = i }
				country_event = { id = BI_on_action.446 }
				
				add_to_array = { 
					array = energy_priority 
					value = v
					index = new_index
				}
			}
			
			
			civilian_1_click = {
				set_variable = {energy_civilian = 1 }
				ui_civilian_energy_tooltip = yes
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			civilian_2_click = {
				set_variable = {energy_civilian = 2 }
				ui_military_energy_tooltip = yes
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			civilian_3_click = {
				set_variable = {energy_civilian = 3 }
				ui_naval_energy_tooltip = yes
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			military_1_click = {
				set_variable = {energy_military = 1 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			military_2_click = {
				set_variable = {energy_military = 2 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			military_3_click = {
				set_variable = {energy_military = 3 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			naval_1_click = {
				set_variable = {energy_naval = 1 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			naval_2_click = {
				set_variable = {energy_naval = 2 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			naval_3_click = {
				set_variable = {energy_naval = 3 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			conversion_1_click = {
				set_variable = {energy_conversion = 1 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			conversion_2_click = {
				set_variable = {energy_conversion = 2 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
			conversion_3_click = {
				set_variable = {energy_conversion = 3 }
				add_to_variable = { ui_energy_pie2 = 1 }
			}
		}
		
		triggers = {
			coal_energy_icon_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_input@coal < energy_input_real@coal }
					}
					set_temp_variable = { coal_energy_frame = 2 }
				}
			}
			increase_coal_ratio_click_enabled = {
				check_variable = { energy_ratio@coal < 1 }
			}
			fuel_energy_icon_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_input@fuel > 0 }
						fuel_ratio < 0.05
					}
					set_temp_variable = { fuel_energy_frame = 2 }
				}
			}
			increase_fuel_ratio_click_enabled = {
				check_variable = { energy_ratio@fuel < 1 }
				check_variable = { modifier@energy_fuel_fraction_cap > energy_ratio@fuel }
			}
			hydro_energy_icon_click_enabled = {
				if = {
					limit = {
						check_variable = { num_hydro_power > 0 }
						check_variable = { num_hydro_power_damaged > 0 }
					}
					set_temp_variable = { hydro_energy_frame = 2 }
				}
			}
			increase_priority_click_enabled = {
				check_variable = { i > 0 }
			} 
			decrease_priority_click_enabled = {
				check_variable = { i < 3 }
			}
			 
			production_click_enabled = {
				set_temp_variable = { production_bar_frame = energy_produced }
			
				check_variable = { max_energy_production > 0 }
				divide_temp_variable = { production_bar_frame = max_energy_production }
				multiply_temp_variable = { production_bar_frame = 100 }
				
			}
			deficit_click_enabled = {
				set_temp_variable = { t = energy_produced }
				if = {
					limit = {
						check_variable = { energy_cost > 0 }
					}
					divide_temp_variable = { t = energy_cost }
				}
				set_temp_variable = { deficit_bar_frame = 1 }
				subtract_from_temp_variable = { deficit_bar_frame = t }
				multiply_temp_variable = { deficit_bar_frame = 100 }
			}
			deficit_visible = {
				OR = {
					check_variable = { lack_of_energy@energy_civilian < 0 }
					check_variable = { lack_of_energy@energy_military < 0 }
					check_variable = { lack_of_energy@energy_naval < 0 }
					check_variable = { lack_of_energy@energy_conversion < 0 }
				}
			}
			
			civilian_1_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_civilian = 1 }
					}
					set_temp_variable = { civilian_1 = 2 }
				}
			}
			civilian_2_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_civilian = 2 }
					}
					set_temp_variable = { civilian_2 = 3 }
				}
			}
			civilian_3_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_civilian = 3 }
					}
					set_temp_variable = { civilian_3 = 4 }
				}
			}
			military_1_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_military = 1 }
					}
					set_temp_variable = { military_1 = 2 }
				}
			}
			military_2_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_military = 2 }
					}
					set_temp_variable = { military_2 = 3 }
				}
			}
			military_3_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_military = 3 }
					}
					set_temp_variable = { military_3 = 4 }
				}
			}
			naval_1_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_naval = 1 }
					}
					set_temp_variable = { naval_1 = 2 }
				}
			}
			naval_2_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_naval = 2 }
					}
					set_temp_variable = { naval_2 = 3 }
				}
			}
			naval_3_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_naval = 3 }
					}
					set_temp_variable = { naval_3 = 4 }
				}
			}
			conversion_1_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_conversion = 1 }
					}
					set_temp_variable = { conversion_1 = 2 }
				}
			}
			conversion_2_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_conversion = 2 }
					}
					set_temp_variable = { conversion_2 = 3 }
				}
			}
			conversion_3_click_enabled = {
				if = {
					limit = {
						check_variable = { energy_conversion = 3 }
					}
					set_temp_variable = { conversion_3 = 4 }
				}
			}
		}
	}
  
	energy_production_chart = {
		context_type = player_context
		    
		window_name = "energy_production_pie_chart"
		parent_scripted_gui = BI_energy_window
		
		dirty = ui_energy_pie1
		
		properties = {   
			pie0 = { frame = pie_chart^0 }
			pie1 = { frame = pie_chart^1 }
			pie2 = { frame = pie_chart^2 }
			pie3 = { frame = pie_chart^3 }
			pie4 = { frame = pie_chart^4 }
			pie5 = { frame = pie_chart^5 }
			pie6 = { frame = pie_chart^6 }
			pie7 = { frame = pie_chart^7 }
			pie8 = { frame = pie_chart^8 }
			pie9 = { frame = pie_chart^9 }
			pie10 = { frame = pie_chart^10 }
			pie11 = { frame = pie_chart^11 }
			pie12 = { frame = pie_chart^12 }
			pie13 = { frame = pie_chart^13 }
			pie14 = { frame = pie_chart^14 }
			pie15 = { frame = pie_chart^15 }
			pie16 = { frame = pie_chart^16 }
			pie17 = { frame = pie_chart^17 }
			pie18 = { frame = pie_chart^18 }
			pie19 = { frame = pie_chart^19 }
			pie20 = { frame = pie_chart^20 }
			pie21 = { frame = pie_chart^21 }
			pie22 = { frame = pie_chart^22 }
			pie23 = { frame = pie_chart^23 }
			pie24 = { frame = pie_chart^24 }
			pie25 = { frame = pie_chart^25 }
			pie26 = { frame = pie_chart^26 }
			pie27 = { frame = pie_chart^27 }
			pie28 = { frame = pie_chart^28 }
			pie29 = { frame = pie_chart^29 }
			pie30 = { frame = pie_chart^30 }
			pie31 = { frame = pie_chart^31 }
			pie32 = { frame = pie_chart^32 }
			pie33 = { frame = pie_chart^33 }
			pie34 = { frame = pie_chart^34 }
			pie35 = { frame = pie_chart^35 }
			pie36 = { frame = pie_chart^36 }
			pie37 = { frame = pie_chart^37 }
			pie38 = { frame = pie_chart^38 }
			pie39 = { frame = pie_chart^39 }
			pie40 = { frame = pie_chart^40 }
			pie41 = { frame = pie_chart^41 }
			pie42 = { frame = pie_chart^42 }
			pie43 = { frame = pie_chart^43 }
			pie44 = { frame = pie_chart^44 }
			pie45 = { frame = pie_chart^45 }
			pie46 = { frame = pie_chart^46 }
			pie47 = { frame = pie_chart^47 }
			pie48 = { frame = pie_chart^48 }
			pie49 = { frame = pie_chart^49 }
			pie50 = { frame = pie_chart^50 }
			pie51 = { frame = pie_chart^51 }
			pie52 = { frame = pie_chart^52 }
			pie53 = { frame = pie_chart^53 }
			pie54 = { frame = pie_chart^54 }
			pie55 = { frame = pie_chart^55 }
			pie56 = { frame = pie_chart^56 }
			pie57 = { frame = pie_chart^57 }
			pie58 = { frame = pie_chart^58 }
			pie59 = { frame = pie_chart^59 }
			pie60 = { frame = pie_chart^60 }
			pie61 = { frame = pie_chart^61 }
			pie62 = { frame = pie_chart^62 }
			pie63 = { frame = pie_chart^63 }
			pie64 = { frame = pie_chart^64 }
			pie65 = { frame = pie_chart^65 }
			pie66 = { frame = pie_chart^66 }
			pie67 = { frame = pie_chart^67 }
			pie68 = { frame = pie_chart^68 }
			pie69 = { frame = pie_chart^69 }
			pie70 = { frame = pie_chart^70 }
			pie71 = { frame = pie_chart^71 }
			pie72 = { frame = pie_chart^72 }
			pie73 = { frame = pie_chart^73 }
			pie74 = { frame = pie_chart^74 }
			pie75 = { frame = pie_chart^75 }
			pie76 = { frame = pie_chart^76 }
			pie77 = { frame = pie_chart^77 }
			pie78 = { frame = pie_chart^78 }
			pie79 = { frame = pie_chart^79 }
			pie80 = { frame = pie_chart^80 }
			pie81 = { frame = pie_chart^81 }
			pie82 = { frame = pie_chart^82 }
			pie83 = { frame = pie_chart^83 }
			pie84 = { frame = pie_chart^84 }
			pie85 = { frame = pie_chart^85 }
			pie86 = { frame = pie_chart^86 }
			pie87 = { frame = pie_chart^87 }
			pie88 = { frame = pie_chart^88 }
			pie89 = { frame = pie_chart^89 }
			pie90 = { frame = pie_chart^90 }
			pie91 = { frame = pie_chart^91 }
			pie92 = { frame = pie_chart^92 }
			pie93 = { frame = pie_chart^93 }
			pie94 = { frame = pie_chart^94 }
			pie95 = { frame = pie_chart^95 }
			pie96 = { frame = pie_chart^96 }
			pie97 = { frame = pie_chart^97 }
			pie98 = { frame = pie_chart^98 }
			pie99 = { frame = pie_chart^99 }
		}
		
		triggers = {  
			pie0_click_enabled = {
				set_temp_variable = { prod = energy_produced }
				subtract_from_temp_variable = { prod = 200 }
				
				set_temp_variable = { coal_ratio = energy_produced@coal }
				divide_temp_variable = { coal_ratio = prod }
				multiply_temp_variable = { coal_ratio = 100 }
				
				set_temp_variable = { fuel_ratio = energy_produced@fuel }
				divide_temp_variable = { fuel_ratio = prod }
				multiply_temp_variable = { fuel_ratio = 100 }
				
				set_temp_variable = { hydro_ratio = energy_produced@hydro }
				divide_temp_variable = { hydro_ratio = prod }
				multiply_temp_variable = { hydro_ratio = 100 }
				
				clear_temp_array = temp_arr
				resize_temp_array = { temp_arr = 100 }
				clear_temp_array = pie_chart
				all_of = {
					array = temp_arr
					
					if = {
						limit = {
							check_variable = { i < coal_ratio }
						}
						add_to_temp_array = { pie_chart = 1 }
					}
					else_if = {
						limit = {
							set_temp_variable = { t = coal_ratio }
							add_to_temp_variable = { t = fuel_ratio }
							check_variable = { i < t }
						}
						add_to_temp_array = { pie_chart = 2 }
					}
					else = {
						add_to_temp_array = { pie_chart = 3 }
					}
				}
				
			}
			
		}
		
	}
	
	energy_consumption_chart = {
		context_type = player_context
		    
		window_name = "energy_consumption_pie_chart"
		parent_scripted_gui = BI_energy_window
		
		dirty = ui_energy_pie2
		
		properties = {   
			pie0 = { frame = pie_chart^0 }
			pie1 = { frame = pie_chart^1 }
			pie2 = { frame = pie_chart^2 }
			pie3 = { frame = pie_chart^3 }
			pie4 = { frame = pie_chart^4 }
			pie5 = { frame = pie_chart^5 }
			pie6 = { frame = pie_chart^6 }
			pie7 = { frame = pie_chart^7 }
			pie8 = { frame = pie_chart^8 }
			pie9 = { frame = pie_chart^9 }
			pie10 = { frame = pie_chart^10 }
			pie11 = { frame = pie_chart^11 }
			pie12 = { frame = pie_chart^12 }
			pie13 = { frame = pie_chart^13 }
			pie14 = { frame = pie_chart^14 }
			pie15 = { frame = pie_chart^15 }
			pie16 = { frame = pie_chart^16 }
			pie17 = { frame = pie_chart^17 }
			pie18 = { frame = pie_chart^18 }
			pie19 = { frame = pie_chart^19 }
			pie20 = { frame = pie_chart^20 }
			pie21 = { frame = pie_chart^21 }
			pie22 = { frame = pie_chart^22 }
			pie23 = { frame = pie_chart^23 }
			pie24 = { frame = pie_chart^24 }
			pie25 = { frame = pie_chart^25 }
			pie26 = { frame = pie_chart^26 }
			pie27 = { frame = pie_chart^27 }
			pie28 = { frame = pie_chart^28 }
			pie29 = { frame = pie_chart^29 }
			pie30 = { frame = pie_chart^30 }
			pie31 = { frame = pie_chart^31 }
			pie32 = { frame = pie_chart^32 }
			pie33 = { frame = pie_chart^33 }
			pie34 = { frame = pie_chart^34 }
			pie35 = { frame = pie_chart^35 }
			pie36 = { frame = pie_chart^36 }
			pie37 = { frame = pie_chart^37 }
			pie38 = { frame = pie_chart^38 }
			pie39 = { frame = pie_chart^39 }
			pie40 = { frame = pie_chart^40 }
			pie41 = { frame = pie_chart^41 }
			pie42 = { frame = pie_chart^42 }
			pie43 = { frame = pie_chart^43 }
			pie44 = { frame = pie_chart^44 }
			pie45 = { frame = pie_chart^45 }
			pie46 = { frame = pie_chart^46 }
			pie47 = { frame = pie_chart^47 }
			pie48 = { frame = pie_chart^48 }
			pie49 = { frame = pie_chart^49 }
			pie50 = { frame = pie_chart^50 }
			pie51 = { frame = pie_chart^51 }
			pie52 = { frame = pie_chart^52 }
			pie53 = { frame = pie_chart^53 }
			pie54 = { frame = pie_chart^54 }
			pie55 = { frame = pie_chart^55 }
			pie56 = { frame = pie_chart^56 }
			pie57 = { frame = pie_chart^57 }
			pie58 = { frame = pie_chart^58 }
			pie59 = { frame = pie_chart^59 }
			pie60 = { frame = pie_chart^60 }
			pie61 = { frame = pie_chart^61 }
			pie62 = { frame = pie_chart^62 }
			pie63 = { frame = pie_chart^63 }
			pie64 = { frame = pie_chart^64 }
			pie65 = { frame = pie_chart^65 }
			pie66 = { frame = pie_chart^66 }
			pie67 = { frame = pie_chart^67 }
			pie68 = { frame = pie_chart^68 }
			pie69 = { frame = pie_chart^69 }
			pie70 = { frame = pie_chart^70 }
			pie71 = { frame = pie_chart^71 }
			pie72 = { frame = pie_chart^72 }
			pie73 = { frame = pie_chart^73 }
			pie74 = { frame = pie_chart^74 }
			pie75 = { frame = pie_chart^75 }
			pie76 = { frame = pie_chart^76 }
			pie77 = { frame = pie_chart^77 }
			pie78 = { frame = pie_chart^78 }
			pie79 = { frame = pie_chart^79 }
			pie80 = { frame = pie_chart^80 }
			pie81 = { frame = pie_chart^81 }
			pie82 = { frame = pie_chart^82 }
			pie83 = { frame = pie_chart^83 }
			pie84 = { frame = pie_chart^84 }
			pie85 = { frame = pie_chart^85 }
			pie86 = { frame = pie_chart^86 }
			pie87 = { frame = pie_chart^87 }
			pie88 = { frame = pie_chart^88 }
			pie89 = { frame = pie_chart^89 }
			pie90 = { frame = pie_chart^90 }
			pie91 = { frame = pie_chart^91 }
			pie92 = { frame = pie_chart^92 }
			pie93 = { frame = pie_chart^93 }
			pie94 = { frame = pie_chart^94 }
			pie95 = { frame = pie_chart^95 }
			pie96 = { frame = pie_chart^96 }
			pie97 = { frame = pie_chart^97 }
			pie98 = { frame = pie_chart^98 }
			pie99 = { frame = pie_chart^99 }
		}
		
		triggers = {  
			pie0_click_enabled = {
				set_temp_variable = { civ_cost = energy_cost@energy_civilian }
				divide_temp_variable = { civ_cost = energy_cost }
				multiply_temp_variable = { civ_cost = 100 }
				
				set_temp_variable = { mic_cost = energy_cost@energy_military }
				divide_temp_variable = { mic_cost = energy_cost }
				multiply_temp_variable = { mic_cost = 100 }
				
				set_temp_variable = { nav_cost = energy_cost@energy_naval }
				divide_temp_variable = { nav_cost = energy_cost }
				multiply_temp_variable = { nav_cost = 100 }
				
				set_temp_variable = { res_cost = energy_cost@energy_conversion }
				divide_temp_variable = { res_cost = energy_cost }
				multiply_temp_variable = { res_cost = 100 }
				
				clear_temp_array = temp_arr
				resize_temp_array = { temp_arr = 100 }
				clear_temp_array = pie_chart
				all_of = {
					array = temp_arr
					
					if = {
						limit = {
							check_variable = { i < civ_cost }
						}
						add_to_temp_array = { pie_chart = 1 }
					}
					else_if = {
						limit = {
							set_temp_variable = { t = civ_cost }
							add_to_temp_variable = { t = mic_cost }
							check_variable = { i < t }
						}
						add_to_temp_array = { pie_chart = 2 }
					}
					else_if = {
						limit = {
							set_temp_variable = { t = civ_cost }
							add_to_temp_variable = { t = mic_cost }
							add_to_temp_variable = { t = nav_cost }
							check_variable = { i < t }
						}
						add_to_temp_array = { pie_chart = 4 }
					}
					else = {
						add_to_temp_array = { pie_chart = 3 }
					}

				}
			}
		}   
	}   
	
	BI_storage_tab_window = {   
		context_type = player_context
		  
		window_name = "BI_storage_tab_container"
		parent_window_token = trade_tab 
		
		visible = {
			always = no
		}
		
		properties = {
			icon = {
				frame = global.storage_frame^i
			}
			filled = {
				frame = filled
			}
			active = {
				frame = active
			}
		}
		
		dynamic_lists = {
			storage_list = {
				array = global.storage 
				change_scope = yes  
				entry_container = "storage_tab_entry"
			}
		}
		
		effects = {
			active_click = {
				if = {
					limit = {
						check_variable = { assign_storage > 0 }
					}
					
					subtract_from_variable = { assign_storage = 1 }
					var:assign_storage_state^0 = {
						
						subtract_from_variable = { assign_storage = 1 }
						add_to_variable = { storage@var:v = 1 }
						add_to_variable = { ROOT.num_storage@var:v = 1 }
															
						set_temp_variable = { storage_modifier = ROOT.modifier@max_resource_storage_factor }
						add_to_temp_variable = { storage_modifier = 1 }
						multiply_temp_variable = { storage_modifier = global.resource_cost@var:v }
						multiply_temp_variable = { storage_modifier = 50 }
						
										
						add_to_variable = { ROOT.max_storage@var:v = storage_modifier }
						
						log = "[This.GetName] | [?storage@var:v] Storage | [?assign_storage] Assign Storage"
						if = {
							limit = {
								check_variable = { assign_storage < 1 }
							}
							clear_variable = assign_storage
							set_temp_variable = { assign_storage_done = 1 }
						}
					}
					
					if = {
						limit = {
							check_variable = { assign_storage_done > 0 }
						}
						remove_from_array = { ROOT.assign_storage_state = ROOT.assign_storage_state^0 }
					}
							
				}
				else = {
					if = { #stop output
						limit = { has_variable = storage_output@var:v }
						
						clear_variable = storage_output@var:v
						
						if = {
							limit = {
								all_of = {
									array = global.storage
									
									check_variable = { storage_output@var:v = 0 }
								}
							}
							remove_dynamic_modifier = { modifier = storage }
						}
					}	
					else_if = { #start output
						limit = {
							check_variable = { storage@var:v > 0 }
						}
									
						set_temp_variable = { factor = modifier@storage_output_factor }
						add_to_temp_variable = { factor = 1 }
						
						set_variable = { storage_output@var:v = global.resource_cost@var:v }
						multiply_variable = { storage_output@var:v = factor }
						set_temp_variable = { t = storage_output@var:v }
						multiply_variable = { storage_output@var:v = num_storage@var:v }
						add_to_variable = { storage_output@var:v = t }
								
						log = "[?storage_output@var:v] output"
						if = {
							limit = {
								NOT = {
									has_dynamic_modifier = { modifier = storage }
								}
							}
							add_dynamic_modifier = { modifier = storage }
						}
						
					}
				}
				
			}
		}
		
		triggers = {
			filled_click_enabled = { 
				set_temp_variable = { filled = storage@var:v }
				divide_temp_variable = { filled = max_storage@var:v }
				multiply_temp_variable = { filled = 100 }
				
				if = {
					limit = {
						has_variable = storage_output@var:v
					}
					set_temp_variable = { active = 2 }
				}
				else = {
					set_temp_variable = { active = 1 }
				}
			}
			days_icon_click_enabled = {
				if = {
					limit = {
						if = {
							limit = {
								check_variable = { i < 5 }
							}
							set_temp_variable = { x = resource@var:v }
							clamp_temp_variable = { var = x min = 0 }
						}
						else = {
							set_temp_variable = { x = resource_produced@var:v }	
							add_to_temp_variable = { x = export_offset@var:v }
							subtract_from_temp_variable = { x = resource_exported@var:v }
							add_to_temp_variable = { x = resource_imported@var:v }
							subtract_from_temp_variable = { x = conversion_use_@var:v }
							subtract_from_temp_variable = { x = train_use@var:v }
							subtract_from_temp_variable = { x = conversion_use_fuel@var:v }
							clamp_temp_variable = { var = x min = 0 }
						}
					
						subtract_from_temp_variable = { x = storage_output@var:v }
						
						check_variable = { x > 0 } #storage is getting filled
						
						set_temp_variable = { m = max_storage@var:v }
						subtract_from_temp_variable = { m = storage@var:v }
						
						divide_temp_variable = { m = x }
						check_variable = { m > 0 }
					}
				
				}
				else_if = {
					limit = {
						check_variable = { x < 0 }
						set_temp_variable = { m = storage@var:v }
						divide_temp_variable = { m = x }
						multiply_temp_variable = { m = -1 }
						check_variable = { m > 0 }
					}
				}
				else = {
					set_temp_variable = { m = -1 }
				}
			}
			days_good_visible = {
				check_variable = { m > 0 }
				check_variable = { x > 0 }
			}
			days_bad_visible = {
				check_variable = { m > 0 }
				check_variable = { x < 0 }
			}
			days_visible = {
				check_variable = { m = -1 }
			}
				
		}
	}
		
}

